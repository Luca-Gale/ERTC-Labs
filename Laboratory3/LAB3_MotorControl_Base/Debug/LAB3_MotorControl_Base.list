
LAB3_MotorControl_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000affc  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  0800b200  0800b200  0000c200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b63c  0800b63c  0000d1f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b63c  0800b63c  0000c63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b644  0800b644  0000d1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b644  0800b644  0000c644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b648  0800b648  0000c648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800b64c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008bc  200001f4  0800b840  0000d1f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ab0  0800b840  0000dab0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187ed  00000000  00000000  0000d222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003067  00000000  00000000  00025a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  00028a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001091  00000000  00000000  00029f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a136  00000000  00000000  0002b029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b26a  00000000  00000000  0005515f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107fde  00000000  00000000  000703c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001783a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069d8  00000000  00000000  001783ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  0017edc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f4 	.word	0x200001f4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b1e4 	.word	0x0800b1e4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f8 	.word	0x200001f8
 800023c:	0800b1e4 	.word	0x0800b1e4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295
 8000668:	f04f 30ff 	movne.w	r0, #4294967295
 800066c:	f000 b9c0 	b.w	80009f0 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f83e 	bl	80006f8 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__aeabi_d2lz>:
 8000688:	b508      	push	{r3, lr}
 800068a:	4602      	mov	r2, r0
 800068c:	460b      	mov	r3, r1
 800068e:	ec43 2b17 	vmov	d7, r2, r3
 8000692:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800069a:	d403      	bmi.n	80006a4 <__aeabi_d2lz+0x1c>
 800069c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006a0:	f000 b80a 	b.w	80006b8 <__aeabi_d2ulz>
 80006a4:	eeb1 7b47 	vneg.f64	d7, d7
 80006a8:	ec51 0b17 	vmov	r0, r1, d7
 80006ac:	f000 f804 	bl	80006b8 <__aeabi_d2ulz>
 80006b0:	4240      	negs	r0, r0
 80006b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b6:	bd08      	pop	{r3, pc}

080006b8 <__aeabi_d2ulz>:
 80006b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80006e8 <__aeabi_d2ulz+0x30>
 80006bc:	ec41 0b17 	vmov	d7, r0, r1
 80006c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80006f0 <__aeabi_d2ulz+0x38>
 80006c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006d8:	ee16 1a10 	vmov	r1, s12
 80006dc:	ee17 0a90 	vmov	r0, s15
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	f3af 8000 	nop.w
 80006e8:	00000000 	.word	0x00000000
 80006ec:	3df00000 	.word	0x3df00000
 80006f0:	00000000 	.word	0x00000000
 80006f4:	41f00000 	.word	0x41f00000

080006f8 <__udivmoddi4>:
 80006f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006fc:	9d08      	ldr	r5, [sp, #32]
 80006fe:	468e      	mov	lr, r1
 8000700:	4604      	mov	r4, r0
 8000702:	4688      	mov	r8, r1
 8000704:	2b00      	cmp	r3, #0
 8000706:	d14a      	bne.n	800079e <__udivmoddi4+0xa6>
 8000708:	428a      	cmp	r2, r1
 800070a:	4617      	mov	r7, r2
 800070c:	d962      	bls.n	80007d4 <__udivmoddi4+0xdc>
 800070e:	fab2 f682 	clz	r6, r2
 8000712:	b14e      	cbz	r6, 8000728 <__udivmoddi4+0x30>
 8000714:	f1c6 0320 	rsb	r3, r6, #32
 8000718:	fa01 f806 	lsl.w	r8, r1, r6
 800071c:	fa20 f303 	lsr.w	r3, r0, r3
 8000720:	40b7      	lsls	r7, r6
 8000722:	ea43 0808 	orr.w	r8, r3, r8
 8000726:	40b4      	lsls	r4, r6
 8000728:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800072c:	fa1f fc87 	uxth.w	ip, r7
 8000730:	fbb8 f1fe 	udiv	r1, r8, lr
 8000734:	0c23      	lsrs	r3, r4, #16
 8000736:	fb0e 8811 	mls	r8, lr, r1, r8
 800073a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800073e:	fb01 f20c 	mul.w	r2, r1, ip
 8000742:	429a      	cmp	r2, r3
 8000744:	d909      	bls.n	800075a <__udivmoddi4+0x62>
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	f101 30ff 	add.w	r0, r1, #4294967295
 800074c:	f080 80ea 	bcs.w	8000924 <__udivmoddi4+0x22c>
 8000750:	429a      	cmp	r2, r3
 8000752:	f240 80e7 	bls.w	8000924 <__udivmoddi4+0x22c>
 8000756:	3902      	subs	r1, #2
 8000758:	443b      	add	r3, r7
 800075a:	1a9a      	subs	r2, r3, r2
 800075c:	b2a3      	uxth	r3, r4
 800075e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000762:	fb0e 2210 	mls	r2, lr, r0, r2
 8000766:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800076a:	fb00 fc0c 	mul.w	ip, r0, ip
 800076e:	459c      	cmp	ip, r3
 8000770:	d909      	bls.n	8000786 <__udivmoddi4+0x8e>
 8000772:	18fb      	adds	r3, r7, r3
 8000774:	f100 32ff 	add.w	r2, r0, #4294967295
 8000778:	f080 80d6 	bcs.w	8000928 <__udivmoddi4+0x230>
 800077c:	459c      	cmp	ip, r3
 800077e:	f240 80d3 	bls.w	8000928 <__udivmoddi4+0x230>
 8000782:	443b      	add	r3, r7
 8000784:	3802      	subs	r0, #2
 8000786:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800078a:	eba3 030c 	sub.w	r3, r3, ip
 800078e:	2100      	movs	r1, #0
 8000790:	b11d      	cbz	r5, 800079a <__udivmoddi4+0xa2>
 8000792:	40f3      	lsrs	r3, r6
 8000794:	2200      	movs	r2, #0
 8000796:	e9c5 3200 	strd	r3, r2, [r5]
 800079a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079e:	428b      	cmp	r3, r1
 80007a0:	d905      	bls.n	80007ae <__udivmoddi4+0xb6>
 80007a2:	b10d      	cbz	r5, 80007a8 <__udivmoddi4+0xb0>
 80007a4:	e9c5 0100 	strd	r0, r1, [r5]
 80007a8:	2100      	movs	r1, #0
 80007aa:	4608      	mov	r0, r1
 80007ac:	e7f5      	b.n	800079a <__udivmoddi4+0xa2>
 80007ae:	fab3 f183 	clz	r1, r3
 80007b2:	2900      	cmp	r1, #0
 80007b4:	d146      	bne.n	8000844 <__udivmoddi4+0x14c>
 80007b6:	4573      	cmp	r3, lr
 80007b8:	d302      	bcc.n	80007c0 <__udivmoddi4+0xc8>
 80007ba:	4282      	cmp	r2, r0
 80007bc:	f200 8105 	bhi.w	80009ca <__udivmoddi4+0x2d2>
 80007c0:	1a84      	subs	r4, r0, r2
 80007c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80007c6:	2001      	movs	r0, #1
 80007c8:	4690      	mov	r8, r2
 80007ca:	2d00      	cmp	r5, #0
 80007cc:	d0e5      	beq.n	800079a <__udivmoddi4+0xa2>
 80007ce:	e9c5 4800 	strd	r4, r8, [r5]
 80007d2:	e7e2      	b.n	800079a <__udivmoddi4+0xa2>
 80007d4:	2a00      	cmp	r2, #0
 80007d6:	f000 8090 	beq.w	80008fa <__udivmoddi4+0x202>
 80007da:	fab2 f682 	clz	r6, r2
 80007de:	2e00      	cmp	r6, #0
 80007e0:	f040 80a4 	bne.w	800092c <__udivmoddi4+0x234>
 80007e4:	1a8a      	subs	r2, r1, r2
 80007e6:	0c03      	lsrs	r3, r0, #16
 80007e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007ec:	b280      	uxth	r0, r0
 80007ee:	b2bc      	uxth	r4, r7
 80007f0:	2101      	movs	r1, #1
 80007f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80007f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80007fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000802:	429a      	cmp	r2, r3
 8000804:	d907      	bls.n	8000816 <__udivmoddi4+0x11e>
 8000806:	18fb      	adds	r3, r7, r3
 8000808:	f10c 38ff 	add.w	r8, ip, #4294967295
 800080c:	d202      	bcs.n	8000814 <__udivmoddi4+0x11c>
 800080e:	429a      	cmp	r2, r3
 8000810:	f200 80e0 	bhi.w	80009d4 <__udivmoddi4+0x2dc>
 8000814:	46c4      	mov	ip, r8
 8000816:	1a9b      	subs	r3, r3, r2
 8000818:	fbb3 f2fe 	udiv	r2, r3, lr
 800081c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000820:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000824:	fb02 f404 	mul.w	r4, r2, r4
 8000828:	429c      	cmp	r4, r3
 800082a:	d907      	bls.n	800083c <__udivmoddi4+0x144>
 800082c:	18fb      	adds	r3, r7, r3
 800082e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000832:	d202      	bcs.n	800083a <__udivmoddi4+0x142>
 8000834:	429c      	cmp	r4, r3
 8000836:	f200 80ca 	bhi.w	80009ce <__udivmoddi4+0x2d6>
 800083a:	4602      	mov	r2, r0
 800083c:	1b1b      	subs	r3, r3, r4
 800083e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000842:	e7a5      	b.n	8000790 <__udivmoddi4+0x98>
 8000844:	f1c1 0620 	rsb	r6, r1, #32
 8000848:	408b      	lsls	r3, r1
 800084a:	fa22 f706 	lsr.w	r7, r2, r6
 800084e:	431f      	orrs	r7, r3
 8000850:	fa0e f401 	lsl.w	r4, lr, r1
 8000854:	fa20 f306 	lsr.w	r3, r0, r6
 8000858:	fa2e fe06 	lsr.w	lr, lr, r6
 800085c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000860:	4323      	orrs	r3, r4
 8000862:	fa00 f801 	lsl.w	r8, r0, r1
 8000866:	fa1f fc87 	uxth.w	ip, r7
 800086a:	fbbe f0f9 	udiv	r0, lr, r9
 800086e:	0c1c      	lsrs	r4, r3, #16
 8000870:	fb09 ee10 	mls	lr, r9, r0, lr
 8000874:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000878:	fb00 fe0c 	mul.w	lr, r0, ip
 800087c:	45a6      	cmp	lr, r4
 800087e:	fa02 f201 	lsl.w	r2, r2, r1
 8000882:	d909      	bls.n	8000898 <__udivmoddi4+0x1a0>
 8000884:	193c      	adds	r4, r7, r4
 8000886:	f100 3aff 	add.w	sl, r0, #4294967295
 800088a:	f080 809c 	bcs.w	80009c6 <__udivmoddi4+0x2ce>
 800088e:	45a6      	cmp	lr, r4
 8000890:	f240 8099 	bls.w	80009c6 <__udivmoddi4+0x2ce>
 8000894:	3802      	subs	r0, #2
 8000896:	443c      	add	r4, r7
 8000898:	eba4 040e 	sub.w	r4, r4, lr
 800089c:	fa1f fe83 	uxth.w	lr, r3
 80008a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80008a4:	fb09 4413 	mls	r4, r9, r3, r4
 80008a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80008ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80008b0:	45a4      	cmp	ip, r4
 80008b2:	d908      	bls.n	80008c6 <__udivmoddi4+0x1ce>
 80008b4:	193c      	adds	r4, r7, r4
 80008b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80008ba:	f080 8082 	bcs.w	80009c2 <__udivmoddi4+0x2ca>
 80008be:	45a4      	cmp	ip, r4
 80008c0:	d97f      	bls.n	80009c2 <__udivmoddi4+0x2ca>
 80008c2:	3b02      	subs	r3, #2
 80008c4:	443c      	add	r4, r7
 80008c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80008ca:	eba4 040c 	sub.w	r4, r4, ip
 80008ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80008d2:	4564      	cmp	r4, ip
 80008d4:	4673      	mov	r3, lr
 80008d6:	46e1      	mov	r9, ip
 80008d8:	d362      	bcc.n	80009a0 <__udivmoddi4+0x2a8>
 80008da:	d05f      	beq.n	800099c <__udivmoddi4+0x2a4>
 80008dc:	b15d      	cbz	r5, 80008f6 <__udivmoddi4+0x1fe>
 80008de:	ebb8 0203 	subs.w	r2, r8, r3
 80008e2:	eb64 0409 	sbc.w	r4, r4, r9
 80008e6:	fa04 f606 	lsl.w	r6, r4, r6
 80008ea:	fa22 f301 	lsr.w	r3, r2, r1
 80008ee:	431e      	orrs	r6, r3
 80008f0:	40cc      	lsrs	r4, r1
 80008f2:	e9c5 6400 	strd	r6, r4, [r5]
 80008f6:	2100      	movs	r1, #0
 80008f8:	e74f      	b.n	800079a <__udivmoddi4+0xa2>
 80008fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80008fe:	0c01      	lsrs	r1, r0, #16
 8000900:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000904:	b280      	uxth	r0, r0
 8000906:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800090a:	463b      	mov	r3, r7
 800090c:	4638      	mov	r0, r7
 800090e:	463c      	mov	r4, r7
 8000910:	46b8      	mov	r8, r7
 8000912:	46be      	mov	lr, r7
 8000914:	2620      	movs	r6, #32
 8000916:	fbb1 f1f7 	udiv	r1, r1, r7
 800091a:	eba2 0208 	sub.w	r2, r2, r8
 800091e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000922:	e766      	b.n	80007f2 <__udivmoddi4+0xfa>
 8000924:	4601      	mov	r1, r0
 8000926:	e718      	b.n	800075a <__udivmoddi4+0x62>
 8000928:	4610      	mov	r0, r2
 800092a:	e72c      	b.n	8000786 <__udivmoddi4+0x8e>
 800092c:	f1c6 0220 	rsb	r2, r6, #32
 8000930:	fa2e f302 	lsr.w	r3, lr, r2
 8000934:	40b7      	lsls	r7, r6
 8000936:	40b1      	lsls	r1, r6
 8000938:	fa20 f202 	lsr.w	r2, r0, r2
 800093c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000940:	430a      	orrs	r2, r1
 8000942:	fbb3 f8fe 	udiv	r8, r3, lr
 8000946:	b2bc      	uxth	r4, r7
 8000948:	fb0e 3318 	mls	r3, lr, r8, r3
 800094c:	0c11      	lsrs	r1, r2, #16
 800094e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000952:	fb08 f904 	mul.w	r9, r8, r4
 8000956:	40b0      	lsls	r0, r6
 8000958:	4589      	cmp	r9, r1
 800095a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800095e:	b280      	uxth	r0, r0
 8000960:	d93e      	bls.n	80009e0 <__udivmoddi4+0x2e8>
 8000962:	1879      	adds	r1, r7, r1
 8000964:	f108 3cff 	add.w	ip, r8, #4294967295
 8000968:	d201      	bcs.n	800096e <__udivmoddi4+0x276>
 800096a:	4589      	cmp	r9, r1
 800096c:	d81f      	bhi.n	80009ae <__udivmoddi4+0x2b6>
 800096e:	eba1 0109 	sub.w	r1, r1, r9
 8000972:	fbb1 f9fe 	udiv	r9, r1, lr
 8000976:	fb09 f804 	mul.w	r8, r9, r4
 800097a:	fb0e 1119 	mls	r1, lr, r9, r1
 800097e:	b292      	uxth	r2, r2
 8000980:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000984:	4542      	cmp	r2, r8
 8000986:	d229      	bcs.n	80009dc <__udivmoddi4+0x2e4>
 8000988:	18ba      	adds	r2, r7, r2
 800098a:	f109 31ff 	add.w	r1, r9, #4294967295
 800098e:	d2c4      	bcs.n	800091a <__udivmoddi4+0x222>
 8000990:	4542      	cmp	r2, r8
 8000992:	d2c2      	bcs.n	800091a <__udivmoddi4+0x222>
 8000994:	f1a9 0102 	sub.w	r1, r9, #2
 8000998:	443a      	add	r2, r7
 800099a:	e7be      	b.n	800091a <__udivmoddi4+0x222>
 800099c:	45f0      	cmp	r8, lr
 800099e:	d29d      	bcs.n	80008dc <__udivmoddi4+0x1e4>
 80009a0:	ebbe 0302 	subs.w	r3, lr, r2
 80009a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009a8:	3801      	subs	r0, #1
 80009aa:	46e1      	mov	r9, ip
 80009ac:	e796      	b.n	80008dc <__udivmoddi4+0x1e4>
 80009ae:	eba7 0909 	sub.w	r9, r7, r9
 80009b2:	4449      	add	r1, r9
 80009b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80009b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80009bc:	fb09 f804 	mul.w	r8, r9, r4
 80009c0:	e7db      	b.n	800097a <__udivmoddi4+0x282>
 80009c2:	4673      	mov	r3, lr
 80009c4:	e77f      	b.n	80008c6 <__udivmoddi4+0x1ce>
 80009c6:	4650      	mov	r0, sl
 80009c8:	e766      	b.n	8000898 <__udivmoddi4+0x1a0>
 80009ca:	4608      	mov	r0, r1
 80009cc:	e6fd      	b.n	80007ca <__udivmoddi4+0xd2>
 80009ce:	443b      	add	r3, r7
 80009d0:	3a02      	subs	r2, #2
 80009d2:	e733      	b.n	800083c <__udivmoddi4+0x144>
 80009d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009d8:	443b      	add	r3, r7
 80009da:	e71c      	b.n	8000816 <__udivmoddi4+0x11e>
 80009dc:	4649      	mov	r1, r9
 80009de:	e79c      	b.n	800091a <__udivmoddi4+0x222>
 80009e0:	eba1 0109 	sub.w	r1, r1, r9
 80009e4:	46c4      	mov	ip, r8
 80009e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009ea:	fb09 f804 	mul.w	r8, r9, r4
 80009ee:	e7c4      	b.n	800097a <__udivmoddi4+0x282>

080009f0 <__aeabi_idiv0>:
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <ertc_dlog_update>:

	return 0;
}

int ertc_dlog_update(struct ertc_dlog *logger)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(&logger->uart_handle, (uint8_t *)logger->rxbuff, 1, HAL_TIMEOUT) == HAL_OK) {
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	1c59      	adds	r1, r3, #1
 8000a06:	2303      	movs	r3, #3
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f007 f895 	bl	8007b38 <HAL_UART_Receive>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d111      	bne.n	8000a38 <ertc_dlog_update+0x44>
		switch (logger->rxbuff[0]) {
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	785b      	ldrb	r3, [r3, #1]
 8000a18:	2b41      	cmp	r3, #65	@ 0x41
 8000a1a:	d002      	beq.n	8000a22 <ertc_dlog_update+0x2e>
 8000a1c:	2b42      	cmp	r3, #66	@ 0x42
 8000a1e:	d004      	beq.n	8000a2a <ertc_dlog_update+0x36>
 8000a20:	e007      	b.n	8000a32 <ertc_dlog_update+0x3e>
			case TX_START_CMD:
				logger->tx_enable = true;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2201      	movs	r2, #1
 8000a26:	701a      	strb	r2, [r3, #0]
				break;
 8000a28:	e006      	b.n	8000a38 <ertc_dlog_update+0x44>
			case TX_STOP_CMD:
				logger->tx_enable = false;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
				break;
 8000a30:	e002      	b.n	8000a38 <ertc_dlog_update+0x44>
			default:
				logger->tx_enable = false;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
		}
	}
	return 0;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <get_keypad_key>:
    {'4', '5', '6', 'B'},
    {'1', '2', '3', 'A'}
};


char get_keypad_key(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af04      	add	r7, sp, #16
    uint8_t col = 0xFF, row = 0xFF;
 8000a4a:	23ff      	movs	r3, #255	@ 0xff
 8000a4c:	71fb      	strb	r3, [r7, #7]
 8000a4e:	23ff      	movs	r3, #255	@ 0xff
 8000a50:	71bb      	strb	r3, [r7, #6]

    // Read column and row register from SX1509
    HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_1, 1, &col, 1, 100);
 8000a52:	2364      	movs	r3, #100	@ 0x64
 8000a54:	9302      	str	r3, [sp, #8]
 8000a56:	2301      	movs	r3, #1
 8000a58:	9301      	str	r3, [sp, #4]
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	2227      	movs	r2, #39	@ 0x27
 8000a62:	217e      	movs	r1, #126	@ 0x7e
 8000a64:	4823      	ldr	r0, [pc, #140]	@ (8000af4 <get_keypad_key+0xb0>)
 8000a66:	f003 fb45 	bl	80040f4 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_2, 1, &row, 1, 100);
 8000a6a:	2364      	movs	r3, #100	@ 0x64
 8000a6c:	9302      	str	r3, [sp, #8]
 8000a6e:	2301      	movs	r3, #1
 8000a70:	9301      	str	r3, [sp, #4]
 8000a72:	1dbb      	adds	r3, r7, #6
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	2301      	movs	r3, #1
 8000a78:	2228      	movs	r2, #40	@ 0x28
 8000a7a:	217e      	movs	r1, #126	@ 0x7e
 8000a7c:	481d      	ldr	r0, [pc, #116]	@ (8000af4 <get_keypad_key+0xb0>)
 8000a7e:	f003 fb39 	bl	80040f4 <HAL_I2C_Mem_Read>

    // Nothing pressed (all bits HIGH)
    if (col == 0xFF || row == 0xFF) return '\0';
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	2bff      	cmp	r3, #255	@ 0xff
 8000a86:	d002      	beq.n	8000a8e <get_keypad_key+0x4a>
 8000a88:	79bb      	ldrb	r3, [r7, #6]
 8000a8a:	2bff      	cmp	r3, #255	@ 0xff
 8000a8c:	d101      	bne.n	8000a92 <get_keypad_key+0x4e>
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e02c      	b.n	8000aec <get_keypad_key+0xa8>

    // Find the LOW bit (indicating which row and column were pressed)
    // Tried to do both row and column at the same time
    for (int r = 0; r < 4; r++) {
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	e025      	b.n	8000ae4 <get_keypad_key+0xa0>
        if (!(row & (1 << r))) {
 8000a98:	79bb      	ldrb	r3, [r7, #6]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	fa42 f303 	asr.w	r3, r2, r3
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d119      	bne.n	8000ade <get_keypad_key+0x9a>
            for (int c = 0; c < 4; c++) {
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	e013      	b.n	8000ad8 <get_keypad_key+0x94>
                if (!(col & (1 << c))) {
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	fa42 f303 	asr.w	r3, r2, r3
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d107      	bne.n	8000ad2 <get_keypad_key+0x8e>
                    return keypad_map[r][c];
 8000ac2:	4a0d      	ldr	r2, [pc, #52]	@ (8000af8 <get_keypad_key+0xb4>)
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	441a      	add	r2, r3
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	4413      	add	r3, r2
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	e00c      	b.n	8000aec <get_keypad_key+0xa8>
            for (int c = 0; c < 4; c++) {
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	2b03      	cmp	r3, #3
 8000adc:	dde8      	ble.n	8000ab0 <get_keypad_key+0x6c>
    for (int r = 0; r < 4; r++) {
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	ddd6      	ble.n	8000a98 <get_keypad_key+0x54>
                }
            }
        }
    }

    return '\0';
 8000aea:	2300      	movs	r3, #0
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000258 	.word	0x20000258
 8000af8:	0800b258 	.word	0x0800b258

08000afc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b04:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b08:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d013      	beq.n	8000b3c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b14:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b18:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000b1c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d00b      	beq.n	8000b3c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b24:	e000      	b.n	8000b28 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b26:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b28:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d0f9      	beq.n	8000b26 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b32:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b3c:	687b      	ldr	r3, [r7, #4]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <handle_keypad_input>:

// Set reference speed with keypad
char input_buffer[6] = {0};  // To store up to 5 digits
int input_index = 0;

void handle_keypad_input(PI_Controller *controller) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
    char key = get_keypad_key();
 8000b54:	f7ff ff76 	bl	8000a44 <get_keypad_key>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	75fb      	strb	r3, [r7, #23]

    if (key >= '0' && key <= '9') {
 8000b5c:	7dfb      	ldrb	r3, [r7, #23]
 8000b5e:	2b2f      	cmp	r3, #47	@ 0x2f
 8000b60:	d914      	bls.n	8000b8c <handle_keypad_input+0x40>
 8000b62:	7dfb      	ldrb	r3, [r7, #23]
 8000b64:	2b39      	cmp	r3, #57	@ 0x39
 8000b66:	d811      	bhi.n	8000b8c <handle_keypad_input+0x40>
        if (input_index < sizeof(input_buffer) - 1) {
 8000b68:	4b2e      	ldr	r3, [pc, #184]	@ (8000c24 <handle_keypad_input+0xd8>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b04      	cmp	r3, #4
 8000b6e:	d855      	bhi.n	8000c1c <handle_keypad_input+0xd0>
            input_buffer[input_index++] = key;
 8000b70:	4b2c      	ldr	r3, [pc, #176]	@ (8000c24 <handle_keypad_input+0xd8>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	1c5a      	adds	r2, r3, #1
 8000b76:	492b      	ldr	r1, [pc, #172]	@ (8000c24 <handle_keypad_input+0xd8>)
 8000b78:	600a      	str	r2, [r1, #0]
 8000b7a:	492b      	ldr	r1, [pc, #172]	@ (8000c28 <handle_keypad_input+0xdc>)
 8000b7c:	7dfa      	ldrb	r2, [r7, #23]
 8000b7e:	54ca      	strb	r2, [r1, r3]
            input_buffer[input_index] = '\0';
 8000b80:	4b28      	ldr	r3, [pc, #160]	@ (8000c24 <handle_keypad_input+0xd8>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a28      	ldr	r2, [pc, #160]	@ (8000c28 <handle_keypad_input+0xdc>)
 8000b86:	2100      	movs	r1, #0
 8000b88:	54d1      	strb	r1, [r2, r3]
        if (input_index < sizeof(input_buffer) - 1) {
 8000b8a:	e047      	b.n	8000c1c <handle_keypad_input+0xd0>
        }
    } else if (key == '#') {
 8000b8c:	7dfb      	ldrb	r3, [r7, #23]
 8000b8e:	2b23      	cmp	r3, #35	@ 0x23
 8000b90:	d137      	bne.n	8000c02 <handle_keypad_input+0xb6>
        if (input_index > 0) {
 8000b92:	4b24      	ldr	r3, [pc, #144]	@ (8000c24 <handle_keypad_input+0xd8>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	dd2c      	ble.n	8000bf4 <handle_keypad_input+0xa8>
            float new_ref = atof(input_buffer);  // ASCII to Float
 8000b9a:	4823      	ldr	r0, [pc, #140]	@ (8000c28 <handle_keypad_input+0xdc>)
 8000b9c:	f007 fd13 	bl	80085c6 <atof>
 8000ba0:	ee07 0a90 	vmov	s15, r0
 8000ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ba8:	edc7 7a04 	vstr	s15, [r7, #16]
            // TODO check speed bound on reference
            controller->ref = new_ref;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	60da      	str	r2, [r3, #12]

            // Workaround the impossibility to print float
            int sp_int = (int)(new_ref * 100);
 8000bb2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bb6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000c2c <handle_keypad_input+0xe0>
 8000bba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bc2:	ee17 3a90 	vmov	r3, s15
 8000bc6:	60fb      	str	r3, [r7, #12]
            printf("Reference speed = %d.%02d\n RPM", sp_int / 100, sp_int % 100);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4a19      	ldr	r2, [pc, #100]	@ (8000c30 <handle_keypad_input+0xe4>)
 8000bcc:	fb82 1203 	smull	r1, r2, r2, r3
 8000bd0:	1152      	asrs	r2, r2, #5
 8000bd2:	17db      	asrs	r3, r3, #31
 8000bd4:	1ad0      	subs	r0, r2, r3
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	4a15      	ldr	r2, [pc, #84]	@ (8000c30 <handle_keypad_input+0xe4>)
 8000bda:	fb82 1203 	smull	r1, r2, r2, r3
 8000bde:	1151      	asrs	r1, r2, #5
 8000be0:	17da      	asrs	r2, r3, #31
 8000be2:	1a8a      	subs	r2, r1, r2
 8000be4:	2164      	movs	r1, #100	@ 0x64
 8000be6:	fb01 f202 	mul.w	r2, r1, r2
 8000bea:	1a9a      	subs	r2, r3, r2
 8000bec:	4601      	mov	r1, r0
 8000bee:	4811      	ldr	r0, [pc, #68]	@ (8000c34 <handle_keypad_input+0xe8>)
 8000bf0:	f008 fb6e 	bl	80092d0 <iprintf>
        }
        input_index = 0;
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c24 <handle_keypad_input+0xd8>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
        input_buffer[0] = '\0';
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <handle_keypad_input+0xdc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
    } else if (key == '*') {
        input_index = 0;
        input_buffer[0] = '\0';
        printf("Input cleared\n");
    }
}
 8000c00:	e00c      	b.n	8000c1c <handle_keypad_input+0xd0>
    } else if (key == '*') {
 8000c02:	7dfb      	ldrb	r3, [r7, #23]
 8000c04:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c06:	d109      	bne.n	8000c1c <handle_keypad_input+0xd0>
        input_index = 0;
 8000c08:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <handle_keypad_input+0xd8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
        input_buffer[0] = '\0';
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <handle_keypad_input+0xdc>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
        printf("Input cleared\n");
 8000c14:	4808      	ldr	r0, [pc, #32]	@ (8000c38 <handle_keypad_input+0xec>)
 8000c16:	f008 fbc3 	bl	80093a0 <puts>
}
 8000c1a:	e7ff      	b.n	8000c1c <handle_keypad_input+0xd0>
 8000c1c:	bf00      	nop
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000950 	.word	0x20000950
 8000c28:	20000948 	.word	0x20000948
 8000c2c:	42c80000 	.word	0x42c80000
 8000c30:	51eb851f 	.word	0x51eb851f
 8000c34:	0800b200 	.word	0x0800b200
 8000c38:	0800b220 	.word	0x0800b220

08000c3c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a24      	ldr	r2, [pc, #144]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d141      	bne.n	8000cd2 <HAL_TIM_PeriodElapsedCallback+0x96>
	{
		// Motor 1
		encoder_update(&motor1_encoder, &htim3, 3840);
 8000c4e:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000c52:	4923      	ldr	r1, [pc, #140]	@ (8000ce0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000c54:	4823      	ldr	r0, [pc, #140]	@ (8000ce4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000c56:	f001 fa6b 	bl	8002130 <encoder_update>
		float u1 = pi_control(&motor1_pi, motor1_encoder.speed_rpm);
 8000c5a:	4b22      	ldr	r3, [pc, #136]	@ (8000ce4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000c5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c60:	eeb0 0a67 	vmov.f32	s0, s15
 8000c64:	4820      	ldr	r0, [pc, #128]	@ (8000ce8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000c66:	f001 fabd 	bl	80021e4 <pi_control>
 8000c6a:	ed87 0a05 	vstr	s0, [r7, #20]
		int32_t duty1 = (int32_t)(u1 * V2DUTY);
 8000c6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c72:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000cec <HAL_TIM_PeriodElapsedCallback+0xb0>
 8000c76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c7e:	ee17 3a90 	vmov	r3, s15
 8000c82:	613b      	str	r3, [r7, #16]
		set_motor_pwm(duty1, &htim8, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8000c84:	2304      	movs	r3, #4
 8000c86:	2200      	movs	r2, #0
 8000c88:	4919      	ldr	r1, [pc, #100]	@ (8000cf0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c8a:	6938      	ldr	r0, [r7, #16]
 8000c8c:	f001 fae8 	bl	8002260 <set_motor_pwm>

		// Motor 2
		encoder_update(&motor2_encoder, &htim4, 3840);
 8000c90:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000c94:	4917      	ldr	r1, [pc, #92]	@ (8000cf4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000c96:	4818      	ldr	r0, [pc, #96]	@ (8000cf8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000c98:	f001 fa4a 	bl	8002130 <encoder_update>
		float u2 = pi_control(&motor2_pi, motor2_encoder.speed_rpm);
 8000c9c:	4b16      	ldr	r3, [pc, #88]	@ (8000cf8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000c9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ca2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ca6:	4815      	ldr	r0, [pc, #84]	@ (8000cfc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000ca8:	f001 fa9c 	bl	80021e4 <pi_control>
 8000cac:	ed87 0a03 	vstr	s0, [r7, #12]
		int32_t duty2 = (int32_t)(u2 * V2DUTY);
 8000cb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cb4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000cec <HAL_TIM_PeriodElapsedCallback+0xb0>
 8000cb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cc0:	ee17 3a90 	vmov	r3, s15
 8000cc4:	60bb      	str	r3, [r7, #8]
		set_motor_pwm(duty2, &htim8, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8000cc6:	230c      	movs	r3, #12
 8000cc8:	2208      	movs	r2, #8
 8000cca:	4909      	ldr	r1, [pc, #36]	@ (8000cf0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000ccc:	68b8      	ldr	r0, [r7, #8]
 8000cce:	f001 fac7 	bl	8002260 <set_motor_pwm>
	}
}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40001000 	.word	0x40001000
 8000ce0:	200003fc 	.word	0x200003fc
 8000ce4:	20000938 	.word	0x20000938
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	42055555 	.word	0x42055555
 8000cf0:	2000052c 	.word	0x2000052c
 8000cf4:	20000448 	.word	0x20000448
 8000cf8:	20000940 	.word	0x20000940
 8000cfc:	20000010 	.word	0x20000010

08000d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d06:	f002 fa0c 	bl	8003122 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0a:	f000 fa69 	bl	80011e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0e:	f001 f8c1 	bl	8001e94 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d12:	f001 f88f 	bl	8001e34 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000d16:	f000 fad5 	bl	80012c4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000d1a:	f000 fb25 	bl	8001368 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000d1e:	f000 fb63 	bl	80013e8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000d22:	f000 fba1 	bl	8001468 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000d26:	f000 fbdd 	bl	80014e4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d2a:	f000 fcab 	bl	8001684 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d2e:	f000 fd43 	bl	80017b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d32:	f000 fd97 	bl	8001864 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000d36:	f000 fdeb 	bl	8001910 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000d3a:	f000 fe99 	bl	8001a70 <MX_TIM8_Init>
  MX_UART4_Init();
 8000d3e:	f000 ffb9 	bl	8001cb4 <MX_UART4_Init>
  MX_UART5_Init();
 8000d42:	f000 ffe7 	bl	8001d14 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000d46:	f001 f815 	bl	8001d74 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d4a:	f001 f843 	bl	8001dd4 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8000d4e:	f000 ff61 	bl	8001c14 <MX_TIM9_Init>
  MX_TIM6_Init();
 8000d52:	f000 fe55 	bl	8001a00 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  logger.uart_handle = huart3; // for serial
 8000d56:	4bb9      	ldr	r3, [pc, #740]	@ (800103c <main+0x33c>)
 8000d58:	4ab9      	ldr	r2, [pc, #740]	@ (8001040 <main+0x340>)
 8000d5a:	3344      	adds	r3, #68	@ 0x44
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	2288      	movs	r2, #136	@ 0x88
 8000d60:	4618      	mov	r0, r3
 8000d62:	f008 fc8a 	bl	800967a <memcpy>
  //logger.uart_handle = huart2; // for wifi

  /* Reset LCD */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	2110      	movs	r1, #16
 8000d6a:	48b6      	ldr	r0, [pc, #728]	@ (8001044 <main+0x344>)
 8000d6c:	f002 ffde 	bl	8003d2c <HAL_GPIO_WritePin>

  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000d70:	200a      	movs	r0, #10
 8000d72:	f002 fe14 	bl	800399e <HAL_NVIC_DisableIRQ>

    ITM_SendChar('h');
 8000d76:	2068      	movs	r0, #104	@ 0x68
 8000d78:	f7ff fec0 	bl	8000afc <ITM_SendChar>

    /* Software reset */
    data = 0x12;
 8000d7c:	2312      	movs	r3, #18
 8000d7e:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000d80:	23c8      	movs	r3, #200	@ 0xc8
 8000d82:	9302      	str	r3, [sp, #8]
 8000d84:	2301      	movs	r3, #1
 8000d86:	9301      	str	r3, [sp, #4]
 8000d88:	1dbb      	adds	r3, r7, #6
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	227d      	movs	r2, #125	@ 0x7d
 8000d90:	217e      	movs	r1, #126	@ 0x7e
 8000d92:	48ad      	ldr	r0, [pc, #692]	@ (8001048 <main+0x348>)
 8000d94:	f003 f89a 	bl	8003ecc <HAL_I2C_Mem_Write>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d004      	beq.n	8000dac <main+0xac>
      printf("I2C communication error (%X).\n", status);
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	4619      	mov	r1, r3
 8000da6:	48a9      	ldr	r0, [pc, #676]	@ (800104c <main+0x34c>)
 8000da8:	f008 fa92 	bl	80092d0 <iprintf>

    data = 0x34;
 8000dac:	2334      	movs	r3, #52	@ 0x34
 8000dae:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000db0:	23c8      	movs	r3, #200	@ 0xc8
 8000db2:	9302      	str	r3, [sp, #8]
 8000db4:	2301      	movs	r3, #1
 8000db6:	9301      	str	r3, [sp, #4]
 8000db8:	1dbb      	adds	r3, r7, #6
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	227d      	movs	r2, #125	@ 0x7d
 8000dc0:	217e      	movs	r1, #126	@ 0x7e
 8000dc2:	48a1      	ldr	r0, [pc, #644]	@ (8001048 <main+0x348>)
 8000dc4:	f003 f882 	bl	8003ecc <HAL_I2C_Mem_Write>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d004      	beq.n	8000ddc <main+0xdc>
      printf("I2C communication error (%X).\n", status);
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	489d      	ldr	r0, [pc, #628]	@ (800104c <main+0x34c>)
 8000dd8:	f008 fa7a 	bl	80092d0 <iprintf>

    HAL_Delay(100);
 8000ddc:	2064      	movs	r0, #100	@ 0x64
 8000dde:	f002 f9fd 	bl	80031dc <HAL_Delay>

    /* Set KeyPad scanning engine */

    /* Set RegClock to 0x40 (enable internal oscillator; 2MHz freq) */
    data = 0x40;
 8000de2:	2340      	movs	r3, #64	@ 0x40
 8000de4:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_CLOCK, 1, &data, 1, I2C_TIMEOUT);
 8000de6:	23c8      	movs	r3, #200	@ 0xc8
 8000de8:	9302      	str	r3, [sp, #8]
 8000dea:	2301      	movs	r3, #1
 8000dec:	9301      	str	r3, [sp, #4]
 8000dee:	1dbb      	adds	r3, r7, #6
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2301      	movs	r3, #1
 8000df4:	221e      	movs	r2, #30
 8000df6:	217e      	movs	r1, #126	@ 0x7e
 8000df8:	4893      	ldr	r0, [pc, #588]	@ (8001048 <main+0x348>)
 8000dfa:	f003 f867 	bl	8003ecc <HAL_I2C_Mem_Write>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d004      	beq.n	8000e12 <main+0x112>
      printf("I2C communication error (%X).\n", status);
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	488f      	ldr	r0, [pc, #572]	@ (800104c <main+0x34c>)
 8000e0e:	f008 fa5f 	bl	80092d0 <iprintf>

    /* Set Bank A RegDir to 0xF0 (IO[0:3] as out) */
    data = 0xF0;
 8000e12:	23f0      	movs	r3, #240	@ 0xf0
 8000e14:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8000e16:	23c8      	movs	r3, #200	@ 0xc8
 8000e18:	9302      	str	r3, [sp, #8]
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	1dbb      	adds	r3, r7, #6
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2301      	movs	r3, #1
 8000e24:	220f      	movs	r2, #15
 8000e26:	217e      	movs	r1, #126	@ 0x7e
 8000e28:	4887      	ldr	r0, [pc, #540]	@ (8001048 <main+0x348>)
 8000e2a:	f003 f84f 	bl	8003ecc <HAL_I2C_Mem_Write>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d004      	beq.n	8000e42 <main+0x142>
      printf("I2C communication error (%X).\n", status);
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4883      	ldr	r0, [pc, #524]	@ (800104c <main+0x34c>)
 8000e3e:	f008 fa47 	bl	80092d0 <iprintf>

    /* Set Bank B RegDir to 0x0F (IO[8:11] as in) */
    data = 0x0F;
 8000e42:	230f      	movs	r3, #15
 8000e44:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8000e46:	23c8      	movs	r3, #200	@ 0xc8
 8000e48:	9302      	str	r3, [sp, #8]
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	1dbb      	adds	r3, r7, #6
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	2301      	movs	r3, #1
 8000e54:	220e      	movs	r2, #14
 8000e56:	217e      	movs	r1, #126	@ 0x7e
 8000e58:	487b      	ldr	r0, [pc, #492]	@ (8001048 <main+0x348>)
 8000e5a:	f003 f837 	bl	8003ecc <HAL_I2C_Mem_Write>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d004      	beq.n	8000e72 <main+0x172>
      printf("I2C communication error (%X).\n", status);
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4877      	ldr	r0, [pc, #476]	@ (800104c <main+0x34c>)
 8000e6e:	f008 fa2f 	bl	80092d0 <iprintf>

    /* Set Bank A RegOpenDrain to 0x0F (IO[0:3] as open-drain outputs) */
    data = 0x0F;
 8000e72:	230f      	movs	r3, #15
 8000e74:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_OPEN_DRAIN_A, 1, &data, 1, I2C_TIMEOUT);
 8000e76:	23c8      	movs	r3, #200	@ 0xc8
 8000e78:	9302      	str	r3, [sp, #8]
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	9301      	str	r3, [sp, #4]
 8000e7e:	1dbb      	adds	r3, r7, #6
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	2301      	movs	r3, #1
 8000e84:	220b      	movs	r2, #11
 8000e86:	217e      	movs	r1, #126	@ 0x7e
 8000e88:	486f      	ldr	r0, [pc, #444]	@ (8001048 <main+0x348>)
 8000e8a:	f003 f81f 	bl	8003ecc <HAL_I2C_Mem_Write>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d004      	beq.n	8000ea2 <main+0x1a2>
      printf("I2C communication error (%X).\n", status);
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	486b      	ldr	r0, [pc, #428]	@ (800104c <main+0x34c>)
 8000e9e:	f008 fa17 	bl	80092d0 <iprintf>

    /* Set Bank B RegPullup to 0x0F (pull-ups enabled on inputs IO[8:11]) */
    data = 0x0F;
 8000ea2:	230f      	movs	r3, #15
 8000ea4:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_PULL_UP_B, 1, &data, 1, I2C_TIMEOUT);
 8000ea6:	23c8      	movs	r3, #200	@ 0xc8
 8000ea8:	9302      	str	r3, [sp, #8]
 8000eaa:	2301      	movs	r3, #1
 8000eac:	9301      	str	r3, [sp, #4]
 8000eae:	1dbb      	adds	r3, r7, #6
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	2206      	movs	r2, #6
 8000eb6:	217e      	movs	r1, #126	@ 0x7e
 8000eb8:	4863      	ldr	r0, [pc, #396]	@ (8001048 <main+0x348>)
 8000eba:	f003 f807 	bl	8003ecc <HAL_I2C_Mem_Write>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d004      	beq.n	8000ed2 <main+0x1d2>
      printf("I2C communication error (%X).\n", status);
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	485f      	ldr	r0, [pc, #380]	@ (800104c <main+0x34c>)
 8000ece:	f008 f9ff 	bl	80092d0 <iprintf>

    /* Set Bank B RegDebounceEnable to 0x0F (enable debouncing on IO[8:11]) */
    data = 0x0F;
 8000ed2:	230f      	movs	r3, #15
 8000ed4:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_ENABLE_B, 1, &data, 1, I2C_TIMEOUT);
 8000ed6:	23c8      	movs	r3, #200	@ 0xc8
 8000ed8:	9302      	str	r3, [sp, #8]
 8000eda:	2301      	movs	r3, #1
 8000edc:	9301      	str	r3, [sp, #4]
 8000ede:	1dbb      	adds	r3, r7, #6
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	2223      	movs	r2, #35	@ 0x23
 8000ee6:	217e      	movs	r1, #126	@ 0x7e
 8000ee8:	4857      	ldr	r0, [pc, #348]	@ (8001048 <main+0x348>)
 8000eea:	f002 ffef 	bl	8003ecc <HAL_I2C_Mem_Write>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d004      	beq.n	8000f02 <main+0x202>
      printf("I2C communication error (%X).\n", status);
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	4619      	mov	r1, r3
 8000efc:	4853      	ldr	r0, [pc, #332]	@ (800104c <main+0x34c>)
 8000efe:	f008 f9e7 	bl	80092d0 <iprintf>

    /* Set RegDebounceConfig to 0x05 (16ms debounce time) */
    data = 0x05;
 8000f02:	2305      	movs	r3, #5
 8000f04:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_CONFIG, 1, &data, 1, I2C_TIMEOUT);
 8000f06:	23c8      	movs	r3, #200	@ 0xc8
 8000f08:	9302      	str	r3, [sp, #8]
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	9301      	str	r3, [sp, #4]
 8000f0e:	1dbb      	adds	r3, r7, #6
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2301      	movs	r3, #1
 8000f14:	2222      	movs	r2, #34	@ 0x22
 8000f16:	217e      	movs	r1, #126	@ 0x7e
 8000f18:	484b      	ldr	r0, [pc, #300]	@ (8001048 <main+0x348>)
 8000f1a:	f002 ffd7 	bl	8003ecc <HAL_I2C_Mem_Write>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d004      	beq.n	8000f32 <main+0x232>
      printf("I2C communication error (%X).\n", status);
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4847      	ldr	r0, [pc, #284]	@ (800104c <main+0x34c>)
 8000f2e:	f008 f9cf 	bl	80092d0 <iprintf>

    /* Set RegKeyConfig1 to 0x7D (8s auto-sleep; 32ms scan time per row) */
    data = 0x7D;
 8000f32:	237d      	movs	r3, #125	@ 0x7d
 8000f34:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_1, 1, &data, 1, I2C_TIMEOUT);
 8000f36:	23c8      	movs	r3, #200	@ 0xc8
 8000f38:	9302      	str	r3, [sp, #8]
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	9301      	str	r3, [sp, #4]
 8000f3e:	1dbb      	adds	r3, r7, #6
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2301      	movs	r3, #1
 8000f44:	2225      	movs	r2, #37	@ 0x25
 8000f46:	217e      	movs	r1, #126	@ 0x7e
 8000f48:	483f      	ldr	r0, [pc, #252]	@ (8001048 <main+0x348>)
 8000f4a:	f002 ffbf 	bl	8003ecc <HAL_I2C_Mem_Write>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d004      	beq.n	8000f62 <main+0x262>
      printf("I2C communication error (%X).\n", status);
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	483b      	ldr	r0, [pc, #236]	@ (800104c <main+0x34c>)
 8000f5e:	f008 f9b7 	bl	80092d0 <iprintf>

    /* Set RegKeyConfig2 to 0x1B (4 rows; 4 columns) */
    data = 0x1B;
 8000f62:	231b      	movs	r3, #27
 8000f64:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_2, 1, &data, 1, I2C_TIMEOUT);
 8000f66:	23c8      	movs	r3, #200	@ 0xc8
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	1dbb      	adds	r3, r7, #6
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2301      	movs	r3, #1
 8000f74:	2226      	movs	r2, #38	@ 0x26
 8000f76:	217e      	movs	r1, #126	@ 0x7e
 8000f78:	4833      	ldr	r0, [pc, #204]	@ (8001048 <main+0x348>)
 8000f7a:	f002 ffa7 	bl	8003ecc <HAL_I2C_Mem_Write>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d004      	beq.n	8000f92 <main+0x292>
      printf("I2C communication error (%X).\n", status);
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	482f      	ldr	r0, [pc, #188]	@ (800104c <main+0x34c>)
 8000f8e:	f008 f99f 	bl	80092d0 <iprintf>

    /* Enable EXTI4_IRQ after SX1509 initialization */
    HAL_Delay(100);
 8000f92:	2064      	movs	r0, #100	@ 0x64
 8000f94:	f002 f922 	bl	80031dc <HAL_Delay>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000f98:	200a      	movs	r0, #10
 8000f9a:	f002 fcf2 	bl	8003982 <HAL_NVIC_EnableIRQ>

    /* Disable EXTI2_IRQ during SX1509 initialization */
    HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8000f9e:	2008      	movs	r0, #8
 8000fa0:	f002 fcfd 	bl	800399e <HAL_NVIC_DisableIRQ>

    /* Software reset */
    data = 0x12;
 8000fa4:	2312      	movs	r3, #18
 8000fa6:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000fa8:	23c8      	movs	r3, #200	@ 0xc8
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	2301      	movs	r3, #1
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	1dbb      	adds	r3, r7, #6
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	227d      	movs	r2, #125	@ 0x7d
 8000fb8:	217c      	movs	r1, #124	@ 0x7c
 8000fba:	4823      	ldr	r0, [pc, #140]	@ (8001048 <main+0x348>)
 8000fbc:	f002 ff86 	bl	8003ecc <HAL_I2C_Mem_Write>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d004      	beq.n	8000fd4 <main+0x2d4>
      printf("I2C communication error (%X).\n", status);
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	481f      	ldr	r0, [pc, #124]	@ (800104c <main+0x34c>)
 8000fd0:	f008 f97e 	bl	80092d0 <iprintf>

    data = 0x34;
 8000fd4:	2334      	movs	r3, #52	@ 0x34
 8000fd6:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000fd8:	23c8      	movs	r3, #200	@ 0xc8
 8000fda:	9302      	str	r3, [sp, #8]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	1dbb      	adds	r3, r7, #6
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	227d      	movs	r2, #125	@ 0x7d
 8000fe8:	217c      	movs	r1, #124	@ 0x7c
 8000fea:	4817      	ldr	r0, [pc, #92]	@ (8001048 <main+0x348>)
 8000fec:	f002 ff6e 	bl	8003ecc <HAL_I2C_Mem_Write>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d004      	beq.n	8001004 <main+0x304>
      printf("I2C communication error (%X).\n", status);
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4813      	ldr	r0, [pc, #76]	@ (800104c <main+0x34c>)
 8001000:	f008 f966 	bl	80092d0 <iprintf>

    HAL_Delay(100);
 8001004:	2064      	movs	r0, #100	@ 0x64
 8001006:	f002 f8e9 	bl	80031dc <HAL_Delay>

    /* Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
    data = 0xFF; // 0 = out; 1 = in
 800100a:	23ff      	movs	r3, #255	@ 0xff
 800100c:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 800100e:	23c8      	movs	r3, #200	@ 0xc8
 8001010:	9302      	str	r3, [sp, #8]
 8001012:	2301      	movs	r3, #1
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	1dbb      	adds	r3, r7, #6
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2301      	movs	r3, #1
 800101c:	220f      	movs	r2, #15
 800101e:	217c      	movs	r1, #124	@ 0x7c
 8001020:	4809      	ldr	r0, [pc, #36]	@ (8001048 <main+0x348>)
 8001022:	f002 ff53 	bl	8003ecc <HAL_I2C_Mem_Write>
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d00f      	beq.n	8001050 <main+0x350>
      printf("I2C communication error (%X).\n", status);
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	@ (800104c <main+0x34c>)
 8001036:	f008 f94b 	bl	80092d0 <iprintf>
 800103a:	e009      	b.n	8001050 <main+0x350>
 800103c:	2000086c 	.word	0x2000086c
 8001040:	200007e4 	.word	0x200007e4
 8001044:	40021000 	.word	0x40021000
 8001048:	20000258 	.word	0x20000258
 800104c:	0800b230 	.word	0x0800b230

    /* Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
    data = 0xFF; // 0 = out; 1 = in
 8001050:	23ff      	movs	r3, #255	@ 0xff
 8001052:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8001054:	23c8      	movs	r3, #200	@ 0xc8
 8001056:	9302      	str	r3, [sp, #8]
 8001058:	2301      	movs	r3, #1
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	1dbb      	adds	r3, r7, #6
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	220e      	movs	r2, #14
 8001064:	217c      	movs	r1, #124	@ 0x7c
 8001066:	4854      	ldr	r0, [pc, #336]	@ (80011b8 <main+0x4b8>)
 8001068:	f002 ff30 	bl	8003ecc <HAL_I2C_Mem_Write>
 800106c:	4603      	mov	r3, r0
 800106e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d004      	beq.n	8001080 <main+0x380>
      printf("I2C communication error (%X).\n", status);
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	4619      	mov	r1, r3
 800107a:	4850      	ldr	r0, [pc, #320]	@ (80011bc <main+0x4bc>)
 800107c:	f008 f928 	bl	80092d0 <iprintf>

    /* Set RegInterruptMaskA to 0x00 (all IO of Bank A will trigger an interrupt) */
    data = 0x00;
 8001080:	2300      	movs	r3, #0
 8001082:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_INTERRUPT_MASK_A, 1, &data, 1, I2C_TIMEOUT);
 8001084:	23c8      	movs	r3, #200	@ 0xc8
 8001086:	9302      	str	r3, [sp, #8]
 8001088:	2301      	movs	r3, #1
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	1dbb      	adds	r3, r7, #6
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	2213      	movs	r2, #19
 8001094:	217c      	movs	r1, #124	@ 0x7c
 8001096:	4848      	ldr	r0, [pc, #288]	@ (80011b8 <main+0x4b8>)
 8001098:	f002 ff18 	bl	8003ecc <HAL_I2C_Mem_Write>
 800109c:	4603      	mov	r3, r0
 800109e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d004      	beq.n	80010b0 <main+0x3b0>
      printf("I2C communication error (%X).\n", status);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4619      	mov	r1, r3
 80010aa:	4844      	ldr	r0, [pc, #272]	@ (80011bc <main+0x4bc>)
 80010ac:	f008 f910 	bl	80092d0 <iprintf>

    /* Set RegSenseHighA to 0xAA (IO[7:4] of Bank A will trigger an interrupt on falling edge) */
    data = 0xAA;
 80010b0:	23aa      	movs	r3, #170	@ 0xaa
 80010b2:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_HIGH_A, 1, &data, 1, I2C_TIMEOUT);
 80010b4:	23c8      	movs	r3, #200	@ 0xc8
 80010b6:	9302      	str	r3, [sp, #8]
 80010b8:	2301      	movs	r3, #1
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	1dbb      	adds	r3, r7, #6
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2301      	movs	r3, #1
 80010c2:	2216      	movs	r2, #22
 80010c4:	217c      	movs	r1, #124	@ 0x7c
 80010c6:	483c      	ldr	r0, [pc, #240]	@ (80011b8 <main+0x4b8>)
 80010c8:	f002 ff00 	bl	8003ecc <HAL_I2C_Mem_Write>
 80010cc:	4603      	mov	r3, r0
 80010ce:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d004      	beq.n	80010e0 <main+0x3e0>
      printf("I2C communication error (%X).\n", status);
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	4619      	mov	r1, r3
 80010da:	4838      	ldr	r0, [pc, #224]	@ (80011bc <main+0x4bc>)
 80010dc:	f008 f8f8 	bl	80092d0 <iprintf>

    /* Set RegSenseLowA to 0xAA (IO[3:0] of Bank A will trigger an interrupt on falling edge) */
    data = 0xAA;
 80010e0:	23aa      	movs	r3, #170	@ 0xaa
 80010e2:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_LOW_A, 1, &data, 1, I2C_TIMEOUT);
 80010e4:	23c8      	movs	r3, #200	@ 0xc8
 80010e6:	9302      	str	r3, [sp, #8]
 80010e8:	2301      	movs	r3, #1
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	1dbb      	adds	r3, r7, #6
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	2217      	movs	r2, #23
 80010f4:	217c      	movs	r1, #124	@ 0x7c
 80010f6:	4830      	ldr	r0, [pc, #192]	@ (80011b8 <main+0x4b8>)
 80010f8:	f002 fee8 	bl	8003ecc <HAL_I2C_Mem_Write>
 80010fc:	4603      	mov	r3, r0
 80010fe:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d004      	beq.n	8001110 <main+0x410>
      printf("I2C communication error (%X).\n", status);
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	4619      	mov	r1, r3
 800110a:	482c      	ldr	r0, [pc, #176]	@ (80011bc <main+0x4bc>)
 800110c:	f008 f8e0 	bl	80092d0 <iprintf>

    /* Enable EXTI2_IRQ after SX1509 initialization */
    HAL_Delay(100);
 8001110:	2064      	movs	r0, #100	@ 0x64
 8001112:	f002 f863 	bl	80031dc <HAL_Delay>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001116:	2008      	movs	r0, #8
 8001118:	f002 fc33 	bl	8003982 <HAL_NVIC_EnableIRQ>


    printf("Ready\n");
 800111c:	4828      	ldr	r0, [pc, #160]	@ (80011c0 <main+0x4c0>)
 800111e:	f008 f93f 	bl	80093a0 <puts>


  HAL_Delay(1000);
 8001122:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001126:	f002 f859 	bl	80031dc <HAL_Delay>

  /* Start encoders timers */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800112a:	213c      	movs	r1, #60	@ 0x3c
 800112c:	4825      	ldr	r0, [pc, #148]	@ (80011c4 <main+0x4c4>)
 800112e:	f005 f9e5 	bl	80064fc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001132:	213c      	movs	r1, #60	@ 0x3c
 8001134:	4824      	ldr	r0, [pc, #144]	@ (80011c8 <main+0x4c8>)
 8001136:	f005 f9e1 	bl	80064fc <HAL_TIM_Encoder_Start>

  /* Start servomotors PWM (avoid floating inputs to servomotors) */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800113a:	2100      	movs	r1, #0
 800113c:	4823      	ldr	r0, [pc, #140]	@ (80011cc <main+0x4cc>)
 800113e:	f004 ffdb 	bl	80060f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001142:	2104      	movs	r1, #4
 8001144:	4821      	ldr	r0, [pc, #132]	@ (80011cc <main+0x4cc>)
 8001146:	f004 ffd7 	bl	80060f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800114a:	2108      	movs	r1, #8
 800114c:	481f      	ldr	r0, [pc, #124]	@ (80011cc <main+0x4cc>)
 800114e:	f004 ffd3 	bl	80060f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001152:	210c      	movs	r1, #12
 8001154:	481d      	ldr	r0, [pc, #116]	@ (80011cc <main+0x4cc>)
 8001156:	f004 ffcf 	bl	80060f8 <HAL_TIM_PWM_Start>

  /* Start motor PWM */
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 800115a:	4b1d      	ldr	r3, [pc, #116]	@ (80011d0 <main+0x4d0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2200      	movs	r2, #0
 8001160:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8001162:	4b1b      	ldr	r3, [pc, #108]	@ (80011d0 <main+0x4d0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2200      	movs	r2, #0
 8001168:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 800116a:	4b19      	ldr	r3, [pc, #100]	@ (80011d0 <main+0x4d0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2200      	movs	r2, #0
 8001170:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8001172:	4b17      	ldr	r3, [pc, #92]	@ (80011d0 <main+0x4d0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2200      	movs	r2, #0
 8001178:	641a      	str	r2, [r3, #64]	@ 0x40

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800117a:	2100      	movs	r1, #0
 800117c:	4814      	ldr	r0, [pc, #80]	@ (80011d0 <main+0x4d0>)
 800117e:	f004 ffbb 	bl	80060f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001182:	2104      	movs	r1, #4
 8001184:	4812      	ldr	r0, [pc, #72]	@ (80011d0 <main+0x4d0>)
 8001186:	f004 ffb7 	bl	80060f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800118a:	2108      	movs	r1, #8
 800118c:	4810      	ldr	r0, [pc, #64]	@ (80011d0 <main+0x4d0>)
 800118e:	f004 ffb3 	bl	80060f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001192:	210c      	movs	r1, #12
 8001194:	480e      	ldr	r0, [pc, #56]	@ (80011d0 <main+0x4d0>)
 8001196:	f004 ffaf 	bl	80060f8 <HAL_TIM_PWM_Start>

  /* Start speed ctrl ISR */
  HAL_TIM_Base_Start_IT(&htim6);
 800119a:	480e      	ldr	r0, [pc, #56]	@ (80011d4 <main+0x4d4>)
 800119c:	f004 fe7c 	bl	8005e98 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ertc_dlog_update(&logger);
 80011a0:	480d      	ldr	r0, [pc, #52]	@ (80011d8 <main+0x4d8>)
 80011a2:	f7ff fc27 	bl	80009f4 <ertc_dlog_update>
	  handle_keypad_input(&motor1_pi);
 80011a6:	480d      	ldr	r0, [pc, #52]	@ (80011dc <main+0x4dc>)
 80011a8:	f7ff fcd0 	bl	8000b4c <handle_keypad_input>
	  HAL_Delay(100);  // Prevent double reads if holding a key
 80011ac:	2064      	movs	r0, #100	@ 0x64
 80011ae:	f002 f815 	bl	80031dc <HAL_Delay>
	  ertc_dlog_update(&logger);
 80011b2:	bf00      	nop
 80011b4:	e7f4      	b.n	80011a0 <main+0x4a0>
 80011b6:	bf00      	nop
 80011b8:	20000258 	.word	0x20000258
 80011bc:	0800b230 	.word	0x0800b230
 80011c0:	0800b250 	.word	0x0800b250
 80011c4:	200003fc 	.word	0x200003fc
 80011c8:	20000448 	.word	0x20000448
 80011cc:	20000364 	.word	0x20000364
 80011d0:	2000052c 	.word	0x2000052c
 80011d4:	200004e0 	.word	0x200004e0
 80011d8:	2000086c 	.word	0x2000086c
 80011dc:	20000000 	.word	0x20000000

080011e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b094      	sub	sp, #80	@ 0x50
 80011e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	2234      	movs	r2, #52	@ 0x34
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f008 f9b6 	bl	8009560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001204:	f003 fbea 	bl	80049dc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001208:	4b2c      	ldr	r3, [pc, #176]	@ (80012bc <SystemClock_Config+0xdc>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120c:	4a2b      	ldr	r2, [pc, #172]	@ (80012bc <SystemClock_Config+0xdc>)
 800120e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001212:	6413      	str	r3, [r2, #64]	@ 0x40
 8001214:	4b29      	ldr	r3, [pc, #164]	@ (80012bc <SystemClock_Config+0xdc>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001218:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001220:	4b27      	ldr	r3, [pc, #156]	@ (80012c0 <SystemClock_Config+0xe0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001228:	4a25      	ldr	r2, [pc, #148]	@ (80012c0 <SystemClock_Config+0xe0>)
 800122a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4b23      	ldr	r3, [pc, #140]	@ (80012c0 <SystemClock_Config+0xe0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001238:	603b      	str	r3, [r7, #0]
 800123a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800123c:	2301      	movs	r3, #1
 800123e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001240:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001244:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001246:	2302      	movs	r3, #2
 8001248:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800124a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800124e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001250:	2304      	movs	r3, #4
 8001252:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001254:	2360      	movs	r3, #96	@ 0x60
 8001256:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001258:	2302      	movs	r3, #2
 800125a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800125c:	2304      	movs	r3, #4
 800125e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001260:	2302      	movs	r3, #2
 8001262:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	4618      	mov	r0, r3
 800126a:	f003 fc17 	bl	8004a9c <HAL_RCC_OscConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001274:	f000 ff40 	bl	80020f8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001278:	f003 fbc0 	bl	80049fc <HAL_PWREx_EnableOverDrive>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001282:	f000 ff39 	bl	80020f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001286:	230f      	movs	r3, #15
 8001288:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128a:	2302      	movs	r3, #2
 800128c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001292:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001296:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001298:	2300      	movs	r3, #0
 800129a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	2103      	movs	r1, #3
 80012a2:	4618      	mov	r0, r3
 80012a4:	f003 fea8 	bl	8004ff8 <HAL_RCC_ClockConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80012ae:	f000 ff23 	bl	80020f8 <Error_Handler>
  }
}
 80012b2:	bf00      	nop
 80012b4:	3750      	adds	r7, #80	@ 0x50
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40007000 	.word	0x40007000

080012c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012ca:	463b      	mov	r3, r7
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012d6:	4b21      	ldr	r3, [pc, #132]	@ (800135c <MX_ADC1_Init+0x98>)
 80012d8:	4a21      	ldr	r2, [pc, #132]	@ (8001360 <MX_ADC1_Init+0x9c>)
 80012da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012dc:	4b1f      	ldr	r3, [pc, #124]	@ (800135c <MX_ADC1_Init+0x98>)
 80012de:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012e4:	4b1d      	ldr	r3, [pc, #116]	@ (800135c <MX_ADC1_Init+0x98>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012ea:	4b1c      	ldr	r3, [pc, #112]	@ (800135c <MX_ADC1_Init+0x98>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012f0:	4b1a      	ldr	r3, [pc, #104]	@ (800135c <MX_ADC1_Init+0x98>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012f6:	4b19      	ldr	r3, [pc, #100]	@ (800135c <MX_ADC1_Init+0x98>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012fe:	4b17      	ldr	r3, [pc, #92]	@ (800135c <MX_ADC1_Init+0x98>)
 8001300:	2200      	movs	r2, #0
 8001302:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001304:	4b15      	ldr	r3, [pc, #84]	@ (800135c <MX_ADC1_Init+0x98>)
 8001306:	4a17      	ldr	r2, [pc, #92]	@ (8001364 <MX_ADC1_Init+0xa0>)
 8001308:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800130a:	4b14      	ldr	r3, [pc, #80]	@ (800135c <MX_ADC1_Init+0x98>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <MX_ADC1_Init+0x98>)
 8001312:	2201      	movs	r2, #1
 8001314:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001316:	4b11      	ldr	r3, [pc, #68]	@ (800135c <MX_ADC1_Init+0x98>)
 8001318:	2200      	movs	r2, #0
 800131a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800131e:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <MX_ADC1_Init+0x98>)
 8001320:	2201      	movs	r2, #1
 8001322:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001324:	480d      	ldr	r0, [pc, #52]	@ (800135c <MX_ADC1_Init+0x98>)
 8001326:	f001 ff7d 	bl	8003224 <HAL_ADC_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001330:	f000 fee2 	bl	80020f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001334:	2303      	movs	r3, #3
 8001336:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001338:	2301      	movs	r3, #1
 800133a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001340:	463b      	mov	r3, r7
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	@ (800135c <MX_ADC1_Init+0x98>)
 8001346:	f001 ffb1 	bl	80032ac <HAL_ADC_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001350:	f000 fed2 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000210 	.word	0x20000210
 8001360:	40012000 	.word	0x40012000
 8001364:	0f000001 	.word	0x0f000001

08001368 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800136c:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <MX_I2C1_Init+0x74>)
 800136e:	4a1c      	ldr	r2, [pc, #112]	@ (80013e0 <MX_I2C1_Init+0x78>)
 8001370:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001372:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <MX_I2C1_Init+0x74>)
 8001374:	4a1b      	ldr	r2, [pc, #108]	@ (80013e4 <MX_I2C1_Init+0x7c>)
 8001376:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001378:	4b18      	ldr	r3, [pc, #96]	@ (80013dc <MX_I2C1_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800137e:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <MX_I2C1_Init+0x74>)
 8001380:	2201      	movs	r2, #1
 8001382:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001384:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <MX_I2C1_Init+0x74>)
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800138a:	4b14      	ldr	r3, [pc, #80]	@ (80013dc <MX_I2C1_Init+0x74>)
 800138c:	2200      	movs	r2, #0
 800138e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001390:	4b12      	ldr	r3, [pc, #72]	@ (80013dc <MX_I2C1_Init+0x74>)
 8001392:	2200      	movs	r2, #0
 8001394:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001396:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <MX_I2C1_Init+0x74>)
 8001398:	2200      	movs	r2, #0
 800139a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800139c:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <MX_I2C1_Init+0x74>)
 800139e:	2200      	movs	r2, #0
 80013a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013a2:	480e      	ldr	r0, [pc, #56]	@ (80013dc <MX_I2C1_Init+0x74>)
 80013a4:	f002 fcf6 	bl	8003d94 <HAL_I2C_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013ae:	f000 fea3 	bl	80020f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013b2:	2100      	movs	r1, #0
 80013b4:	4809      	ldr	r0, [pc, #36]	@ (80013dc <MX_I2C1_Init+0x74>)
 80013b6:	f003 fa79 	bl	80048ac <HAL_I2CEx_ConfigAnalogFilter>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013c0:	f000 fe9a 	bl	80020f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013c4:	2100      	movs	r1, #0
 80013c6:	4805      	ldr	r0, [pc, #20]	@ (80013dc <MX_I2C1_Init+0x74>)
 80013c8:	f003 fabb 	bl	8004942 <HAL_I2CEx_ConfigDigitalFilter>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013d2:	f000 fe91 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000258 	.word	0x20000258
 80013e0:	40005400 	.word	0x40005400
 80013e4:	20303e5d 	.word	0x20303e5d

080013e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <MX_I2C2_Init+0x74>)
 80013ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001460 <MX_I2C2_Init+0x78>)
 80013f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80013f2:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <MX_I2C2_Init+0x74>)
 80013f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001464 <MX_I2C2_Init+0x7c>)
 80013f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80013f8:	4b18      	ldr	r3, [pc, #96]	@ (800145c <MX_I2C2_Init+0x74>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013fe:	4b17      	ldr	r3, [pc, #92]	@ (800145c <MX_I2C2_Init+0x74>)
 8001400:	2201      	movs	r2, #1
 8001402:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001404:	4b15      	ldr	r3, [pc, #84]	@ (800145c <MX_I2C2_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800140a:	4b14      	ldr	r3, [pc, #80]	@ (800145c <MX_I2C2_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001410:	4b12      	ldr	r3, [pc, #72]	@ (800145c <MX_I2C2_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001416:	4b11      	ldr	r3, [pc, #68]	@ (800145c <MX_I2C2_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800141c:	4b0f      	ldr	r3, [pc, #60]	@ (800145c <MX_I2C2_Init+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001422:	480e      	ldr	r0, [pc, #56]	@ (800145c <MX_I2C2_Init+0x74>)
 8001424:	f002 fcb6 	bl	8003d94 <HAL_I2C_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800142e:	f000 fe63 	bl	80020f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001432:	2100      	movs	r1, #0
 8001434:	4809      	ldr	r0, [pc, #36]	@ (800145c <MX_I2C2_Init+0x74>)
 8001436:	f003 fa39 	bl	80048ac <HAL_I2CEx_ConfigAnalogFilter>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001440:	f000 fe5a 	bl	80020f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001444:	2100      	movs	r1, #0
 8001446:	4805      	ldr	r0, [pc, #20]	@ (800145c <MX_I2C2_Init+0x74>)
 8001448:	f003 fa7b 	bl	8004942 <HAL_I2CEx_ConfigDigitalFilter>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001452:	f000 fe51 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200002ac 	.word	0x200002ac
 8001460:	40005800 	.word	0x40005800
 8001464:	20303e5d 	.word	0x20303e5d

08001468 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800146c:	4b1b      	ldr	r3, [pc, #108]	@ (80014dc <MX_SPI1_Init+0x74>)
 800146e:	4a1c      	ldr	r2, [pc, #112]	@ (80014e0 <MX_SPI1_Init+0x78>)
 8001470:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001472:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <MX_SPI1_Init+0x74>)
 8001474:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001478:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800147a:	4b18      	ldr	r3, [pc, #96]	@ (80014dc <MX_SPI1_Init+0x74>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001480:	4b16      	ldr	r3, [pc, #88]	@ (80014dc <MX_SPI1_Init+0x74>)
 8001482:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001486:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001488:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <MX_SPI1_Init+0x74>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800148e:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <MX_SPI1_Init+0x74>)
 8001490:	2200      	movs	r2, #0
 8001492:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001494:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <MX_SPI1_Init+0x74>)
 8001496:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800149a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800149c:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <MX_SPI1_Init+0x74>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <MX_SPI1_Init+0x74>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <MX_SPI1_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ae:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <MX_SPI1_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014b4:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <MX_SPI1_Init+0x74>)
 80014b6:	2207      	movs	r2, #7
 80014b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014ba:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <MX_SPI1_Init+0x74>)
 80014bc:	2200      	movs	r2, #0
 80014be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014c0:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <MX_SPI1_Init+0x74>)
 80014c2:	2208      	movs	r2, #8
 80014c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014c6:	4805      	ldr	r0, [pc, #20]	@ (80014dc <MX_SPI1_Init+0x74>)
 80014c8:	f004 fbe4 	bl	8005c94 <HAL_SPI_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80014d2:	f000 fe11 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000300 	.word	0x20000300
 80014e0:	40013000 	.word	0x40013000

080014e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b09a      	sub	sp, #104	@ 0x68
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001504:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
 8001514:	615a      	str	r2, [r3, #20]
 8001516:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	222c      	movs	r2, #44	@ 0x2c
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f008 f81e 	bl	8009560 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001524:	4b55      	ldr	r3, [pc, #340]	@ (800167c <MX_TIM1_Init+0x198>)
 8001526:	4a56      	ldr	r2, [pc, #344]	@ (8001680 <MX_TIM1_Init+0x19c>)
 8001528:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800152a:	4b54      	ldr	r3, [pc, #336]	@ (800167c <MX_TIM1_Init+0x198>)
 800152c:	2200      	movs	r2, #0
 800152e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b52      	ldr	r3, [pc, #328]	@ (800167c <MX_TIM1_Init+0x198>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001536:	4b51      	ldr	r3, [pc, #324]	@ (800167c <MX_TIM1_Init+0x198>)
 8001538:	2200      	movs	r2, #0
 800153a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153c:	4b4f      	ldr	r3, [pc, #316]	@ (800167c <MX_TIM1_Init+0x198>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001542:	4b4e      	ldr	r3, [pc, #312]	@ (800167c <MX_TIM1_Init+0x198>)
 8001544:	2200      	movs	r2, #0
 8001546:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001548:	4b4c      	ldr	r3, [pc, #304]	@ (800167c <MX_TIM1_Init+0x198>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800154e:	484b      	ldr	r0, [pc, #300]	@ (800167c <MX_TIM1_Init+0x198>)
 8001550:	f004 fc4b 	bl	8005dea <HAL_TIM_Base_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800155a:	f000 fdcd 	bl	80020f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001562:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001564:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001568:	4619      	mov	r1, r3
 800156a:	4844      	ldr	r0, [pc, #272]	@ (800167c <MX_TIM1_Init+0x198>)
 800156c:	f005 fb86 	bl	8006c7c <HAL_TIM_ConfigClockSource>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001576:	f000 fdbf 	bl	80020f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800157a:	4840      	ldr	r0, [pc, #256]	@ (800167c <MX_TIM1_Init+0x198>)
 800157c:	f004 fd04 	bl	8005f88 <HAL_TIM_OC_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001586:	f000 fdb7 	bl	80020f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158a:	2300      	movs	r3, #0
 800158c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001596:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800159a:	4619      	mov	r1, r3
 800159c:	4837      	ldr	r0, [pc, #220]	@ (800167c <MX_TIM1_Init+0x198>)
 800159e:	f006 f953 	bl	8007848 <HAL_TIMEx_MasterConfigSynchronization>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80015a8:	f000 fda6 	bl	80020f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 80015ac:	2350      	movs	r3, #80	@ 0x50
 80015ae:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80015b4:	2302      	movs	r3, #2
 80015b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015b8:	2300      	movs	r3, #0
 80015ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015c4:	2300      	movs	r3, #0
 80015c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015cc:	2200      	movs	r2, #0
 80015ce:	4619      	mov	r1, r3
 80015d0:	482a      	ldr	r0, [pc, #168]	@ (800167c <MX_TIM1_Init+0x198>)
 80015d2:	f005 f929 	bl	8006828 <HAL_TIM_OC_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80015dc:	f000 fd8c 	bl	80020f8 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015e4:	2204      	movs	r2, #4
 80015e6:	4619      	mov	r1, r3
 80015e8:	4824      	ldr	r0, [pc, #144]	@ (800167c <MX_TIM1_Init+0x198>)
 80015ea:	f005 f91d 	bl	8006828 <HAL_TIM_OC_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80015f4:	f000 fd80 	bl	80020f8 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015f8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015fc:	2208      	movs	r2, #8
 80015fe:	4619      	mov	r1, r3
 8001600:	481e      	ldr	r0, [pc, #120]	@ (800167c <MX_TIM1_Init+0x198>)
 8001602:	f005 f911 	bl	8006828 <HAL_TIM_OC_ConfigChannel>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800160c:	f000 fd74 	bl	80020f8 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001610:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001614:	220c      	movs	r2, #12
 8001616:	4619      	mov	r1, r3
 8001618:	4818      	ldr	r0, [pc, #96]	@ (800167c <MX_TIM1_Init+0x198>)
 800161a:	f005 f905 	bl	8006828 <HAL_TIM_OC_ConfigChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001624:	f000 fd68 	bl	80020f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800163c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001640:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800164a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800164e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	4619      	mov	r1, r3
 800165c:	4807      	ldr	r0, [pc, #28]	@ (800167c <MX_TIM1_Init+0x198>)
 800165e:	f006 f981 	bl	8007964 <HAL_TIMEx_ConfigBreakDeadTime>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8001668:	f000 fd46 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800166c:	4803      	ldr	r0, [pc, #12]	@ (800167c <MX_TIM1_Init+0x198>)
 800166e:	f001 f981 	bl	8002974 <HAL_TIM_MspPostInit>

}
 8001672:	bf00      	nop
 8001674:	3768      	adds	r7, #104	@ 0x68
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000364 	.word	0x20000364
 8001680:	40010000 	.word	0x40010000

08001684 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b092      	sub	sp, #72	@ 0x48
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800168a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001698:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
 80016b4:	615a      	str	r2, [r3, #20]
 80016b6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016b8:	463b      	mov	r3, r7
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016c4:	4b3b      	ldr	r3, [pc, #236]	@ (80017b4 <MX_TIM2_Init+0x130>)
 80016c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016cc:	4b39      	ldr	r3, [pc, #228]	@ (80017b4 <MX_TIM2_Init+0x130>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d2:	4b38      	ldr	r3, [pc, #224]	@ (80017b4 <MX_TIM2_Init+0x130>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80016d8:	4b36      	ldr	r3, [pc, #216]	@ (80017b4 <MX_TIM2_Init+0x130>)
 80016da:	f04f 32ff 	mov.w	r2, #4294967295
 80016de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e0:	4b34      	ldr	r3, [pc, #208]	@ (80017b4 <MX_TIM2_Init+0x130>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e6:	4b33      	ldr	r3, [pc, #204]	@ (80017b4 <MX_TIM2_Init+0x130>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ec:	4831      	ldr	r0, [pc, #196]	@ (80017b4 <MX_TIM2_Init+0x130>)
 80016ee:	f004 fb7c 	bl	8005dea <HAL_TIM_Base_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80016f8:	f000 fcfe 	bl	80020f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001700:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001702:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001706:	4619      	mov	r1, r3
 8001708:	482a      	ldr	r0, [pc, #168]	@ (80017b4 <MX_TIM2_Init+0x130>)
 800170a:	f005 fab7 	bl	8006c7c <HAL_TIM_ConfigClockSource>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001714:	f000 fcf0 	bl	80020f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001718:	4826      	ldr	r0, [pc, #152]	@ (80017b4 <MX_TIM2_Init+0x130>)
 800171a:	f004 fc96 	bl	800604a <HAL_TIM_PWM_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001724:	f000 fce8 	bl	80020f8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001728:	4822      	ldr	r0, [pc, #136]	@ (80017b4 <MX_TIM2_Init+0x130>)
 800172a:	f004 fddf 	bl	80062ec <HAL_TIM_IC_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001734:	f000 fce0 	bl	80020f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001738:	2300      	movs	r3, #0
 800173a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001740:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001744:	4619      	mov	r1, r3
 8001746:	481b      	ldr	r0, [pc, #108]	@ (80017b4 <MX_TIM2_Init+0x130>)
 8001748:	f006 f87e 	bl	8007848 <HAL_TIMEx_MasterConfigSynchronization>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001752:	f000 fcd1 	bl	80020f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001756:	2360      	movs	r3, #96	@ 0x60
 8001758:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800175e:	2300      	movs	r3, #0
 8001760:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001766:	f107 0310 	add.w	r3, r7, #16
 800176a:	2200      	movs	r2, #0
 800176c:	4619      	mov	r1, r3
 800176e:	4811      	ldr	r0, [pc, #68]	@ (80017b4 <MX_TIM2_Init+0x130>)
 8001770:	f005 f970 	bl	8006a54 <HAL_TIM_PWM_ConfigChannel>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 800177a:	f000 fcbd 	bl	80020f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800177e:	2300      	movs	r3, #0
 8001780:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001782:	2301      	movs	r3, #1
 8001784:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800178e:	463b      	mov	r3, r7
 8001790:	2208      	movs	r2, #8
 8001792:	4619      	mov	r1, r3
 8001794:	4807      	ldr	r0, [pc, #28]	@ (80017b4 <MX_TIM2_Init+0x130>)
 8001796:	f005 f8c1 	bl	800691c <HAL_TIM_IC_ConfigChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 80017a0:	f000 fcaa 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017a4:	4803      	ldr	r0, [pc, #12]	@ (80017b4 <MX_TIM2_Init+0x130>)
 80017a6:	f001 f8e5 	bl	8002974 <HAL_TIM_MspPostInit>

}
 80017aa:	bf00      	nop
 80017ac:	3748      	adds	r7, #72	@ 0x48
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200003b0 	.word	0x200003b0

080017b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08c      	sub	sp, #48	@ 0x30
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017be:	f107 030c 	add.w	r3, r7, #12
 80017c2:	2224      	movs	r2, #36	@ 0x24
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f007 feca 	bl	8009560 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017cc:	463b      	mov	r3, r7
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017d6:	4b21      	ldr	r3, [pc, #132]	@ (800185c <MX_TIM3_Init+0xa4>)
 80017d8:	4a21      	ldr	r2, [pc, #132]	@ (8001860 <MX_TIM3_Init+0xa8>)
 80017da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017dc:	4b1f      	ldr	r3, [pc, #124]	@ (800185c <MX_TIM3_Init+0xa4>)
 80017de:	2200      	movs	r2, #0
 80017e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e2:	4b1e      	ldr	r3, [pc, #120]	@ (800185c <MX_TIM3_Init+0xa4>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_ARR_VALUE;
 80017e8:	4b1c      	ldr	r3, [pc, #112]	@ (800185c <MX_TIM3_Init+0xa4>)
 80017ea:	f640 62ff 	movw	r2, #3839	@ 0xeff
 80017ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f0:	4b1a      	ldr	r3, [pc, #104]	@ (800185c <MX_TIM3_Init+0xa4>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f6:	4b19      	ldr	r3, [pc, #100]	@ (800185c <MX_TIM3_Init+0xa4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017fc:	2303      	movs	r3, #3
 80017fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001800:	2300      	movs	r3, #0
 8001802:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001804:	2301      	movs	r3, #1
 8001806:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001808:	2300      	movs	r3, #0
 800180a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800180c:	230f      	movs	r3, #15
 800180e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001810:	2300      	movs	r3, #0
 8001812:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001814:	2301      	movs	r3, #1
 8001816:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001818:	2300      	movs	r3, #0
 800181a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800181c:	230f      	movs	r3, #15
 800181e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	4619      	mov	r1, r3
 8001826:	480d      	ldr	r0, [pc, #52]	@ (800185c <MX_TIM3_Init+0xa4>)
 8001828:	f004 fdc2 	bl	80063b0 <HAL_TIM_Encoder_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001832:	f000 fc61 	bl	80020f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001836:	2300      	movs	r3, #0
 8001838:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800183e:	463b      	mov	r3, r7
 8001840:	4619      	mov	r1, r3
 8001842:	4806      	ldr	r0, [pc, #24]	@ (800185c <MX_TIM3_Init+0xa4>)
 8001844:	f006 f800 	bl	8007848 <HAL_TIMEx_MasterConfigSynchronization>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800184e:	f000 fc53 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	3730      	adds	r7, #48	@ 0x30
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200003fc 	.word	0x200003fc
 8001860:	40000400 	.word	0x40000400

08001864 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08c      	sub	sp, #48	@ 0x30
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800186a:	f107 030c 	add.w	r3, r7, #12
 800186e:	2224      	movs	r2, #36	@ 0x24
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f007 fe74 	bl	8009560 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	463b      	mov	r3, r7
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001882:	4b21      	ldr	r3, [pc, #132]	@ (8001908 <MX_TIM4_Init+0xa4>)
 8001884:	4a21      	ldr	r2, [pc, #132]	@ (800190c <MX_TIM4_Init+0xa8>)
 8001886:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001888:	4b1f      	ldr	r3, [pc, #124]	@ (8001908 <MX_TIM4_Init+0xa4>)
 800188a:	2200      	movs	r2, #0
 800188c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188e:	4b1e      	ldr	r3, [pc, #120]	@ (8001908 <MX_TIM4_Init+0xa4>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = TIM4_ARR_VALUE;
 8001894:	4b1c      	ldr	r3, [pc, #112]	@ (8001908 <MX_TIM4_Init+0xa4>)
 8001896:	f640 62ff 	movw	r2, #3839	@ 0xeff
 800189a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189c:	4b1a      	ldr	r3, [pc, #104]	@ (8001908 <MX_TIM4_Init+0xa4>)
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a2:	4b19      	ldr	r3, [pc, #100]	@ (8001908 <MX_TIM4_Init+0xa4>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018a8:	2303      	movs	r3, #3
 80018aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018ac:	2300      	movs	r3, #0
 80018ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018b0:	2301      	movs	r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80018b8:	230f      	movs	r3, #15
 80018ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018c0:	2301      	movs	r3, #1
 80018c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80018c8:	230f      	movs	r3, #15
 80018ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	4619      	mov	r1, r3
 80018d2:	480d      	ldr	r0, [pc, #52]	@ (8001908 <MX_TIM4_Init+0xa4>)
 80018d4:	f004 fd6c 	bl	80063b0 <HAL_TIM_Encoder_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80018de:	f000 fc0b 	bl	80020f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e2:	2300      	movs	r3, #0
 80018e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018ea:	463b      	mov	r3, r7
 80018ec:	4619      	mov	r1, r3
 80018ee:	4806      	ldr	r0, [pc, #24]	@ (8001908 <MX_TIM4_Init+0xa4>)
 80018f0:	f005 ffaa 	bl	8007848 <HAL_TIMEx_MasterConfigSynchronization>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80018fa:	f000 fbfd 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	3730      	adds	r7, #48	@ 0x30
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000448 	.word	0x20000448
 800190c:	40000800 	.word	0x40000800

08001910 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08e      	sub	sp, #56	@ 0x38
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001916:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001930:	463b      	mov	r3, r7
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
 800193c:	611a      	str	r2, [r3, #16]
 800193e:	615a      	str	r2, [r3, #20]
 8001940:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001942:	4b2d      	ldr	r3, [pc, #180]	@ (80019f8 <MX_TIM5_Init+0xe8>)
 8001944:	4a2d      	ldr	r2, [pc, #180]	@ (80019fc <MX_TIM5_Init+0xec>)
 8001946:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001948:	4b2b      	ldr	r3, [pc, #172]	@ (80019f8 <MX_TIM5_Init+0xe8>)
 800194a:	2200      	movs	r2, #0
 800194c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194e:	4b2a      	ldr	r3, [pc, #168]	@ (80019f8 <MX_TIM5_Init+0xe8>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001954:	4b28      	ldr	r3, [pc, #160]	@ (80019f8 <MX_TIM5_Init+0xe8>)
 8001956:	f04f 32ff 	mov.w	r2, #4294967295
 800195a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195c:	4b26      	ldr	r3, [pc, #152]	@ (80019f8 <MX_TIM5_Init+0xe8>)
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001962:	4b25      	ldr	r3, [pc, #148]	@ (80019f8 <MX_TIM5_Init+0xe8>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001968:	4823      	ldr	r0, [pc, #140]	@ (80019f8 <MX_TIM5_Init+0xe8>)
 800196a:	f004 fa3e 	bl	8005dea <HAL_TIM_Base_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001974:	f000 fbc0 	bl	80020f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001978:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800197c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800197e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001982:	4619      	mov	r1, r3
 8001984:	481c      	ldr	r0, [pc, #112]	@ (80019f8 <MX_TIM5_Init+0xe8>)
 8001986:	f005 f979 	bl	8006c7c <HAL_TIM_ConfigClockSource>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001990:	f000 fbb2 	bl	80020f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001994:	4818      	ldr	r0, [pc, #96]	@ (80019f8 <MX_TIM5_Init+0xe8>)
 8001996:	f004 fb58 	bl	800604a <HAL_TIM_PWM_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80019a0:	f000 fbaa 	bl	80020f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	4619      	mov	r1, r3
 80019b2:	4811      	ldr	r0, [pc, #68]	@ (80019f8 <MX_TIM5_Init+0xe8>)
 80019b4:	f005 ff48 	bl	8007848 <HAL_TIMEx_MasterConfigSynchronization>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80019be:	f000 fb9b 	bl	80020f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c2:	2360      	movs	r3, #96	@ 0x60
 80019c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019d2:	463b      	mov	r3, r7
 80019d4:	2200      	movs	r2, #0
 80019d6:	4619      	mov	r1, r3
 80019d8:	4807      	ldr	r0, [pc, #28]	@ (80019f8 <MX_TIM5_Init+0xe8>)
 80019da:	f005 f83b 	bl	8006a54 <HAL_TIM_PWM_ConfigChannel>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80019e4:	f000 fb88 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80019e8:	4803      	ldr	r0, [pc, #12]	@ (80019f8 <MX_TIM5_Init+0xe8>)
 80019ea:	f000 ffc3 	bl	8002974 <HAL_TIM_MspPostInit>

}
 80019ee:	bf00      	nop
 80019f0:	3738      	adds	r7, #56	@ 0x38
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000494 	.word	0x20000494
 80019fc:	40000c00 	.word	0x40000c00

08001a00 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a10:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <MX_TIM6_Init+0x68>)
 8001a12:	4a16      	ldr	r2, [pc, #88]	@ (8001a6c <MX_TIM6_Init+0x6c>)
 8001a14:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM6_PSC_VALUE;
 8001a16:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <MX_TIM6_Init+0x68>)
 8001a18:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8001a1c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1e:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <MX_TIM6_Init+0x68>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM6_ARR_VALUE;
 8001a24:	4b10      	ldr	r3, [pc, #64]	@ (8001a68 <MX_TIM6_Init+0x68>)
 8001a26:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a2a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a68 <MX_TIM6_Init+0x68>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a32:	480d      	ldr	r0, [pc, #52]	@ (8001a68 <MX_TIM6_Init+0x68>)
 8001a34:	f004 f9d9 	bl	8005dea <HAL_TIM_Base_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001a3e:	f000 fb5b 	bl	80020f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4806      	ldr	r0, [pc, #24]	@ (8001a68 <MX_TIM6_Init+0x68>)
 8001a50:	f005 fefa 	bl	8007848 <HAL_TIMEx_MasterConfigSynchronization>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001a5a:	f000 fb4d 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200004e0 	.word	0x200004e0
 8001a6c:	40001000 	.word	0x40001000

08001a70 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b09a      	sub	sp, #104	@ 0x68
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a76:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a84:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a90:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
 8001aa0:	615a      	str	r2, [r3, #20]
 8001aa2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	222c      	movs	r2, #44	@ 0x2c
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f007 fd58 	bl	8009560 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001ab0:	4b56      	ldr	r3, [pc, #344]	@ (8001c0c <MX_TIM8_Init+0x19c>)
 8001ab2:	4a57      	ldr	r2, [pc, #348]	@ (8001c10 <MX_TIM8_Init+0x1a0>)
 8001ab4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 8001ab6:	4b55      	ldr	r3, [pc, #340]	@ (8001c0c <MX_TIM8_Init+0x19c>)
 8001ab8:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8001abc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abe:	4b53      	ldr	r3, [pc, #332]	@ (8001c0c <MX_TIM8_Init+0x19c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 8001ac4:	4b51      	ldr	r3, [pc, #324]	@ (8001c0c <MX_TIM8_Init+0x19c>)
 8001ac6:	f240 128f 	movw	r2, #399	@ 0x18f
 8001aca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001acc:	4b4f      	ldr	r3, [pc, #316]	@ (8001c0c <MX_TIM8_Init+0x19c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ad2:	4b4e      	ldr	r3, [pc, #312]	@ (8001c0c <MX_TIM8_Init+0x19c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad8:	4b4c      	ldr	r3, [pc, #304]	@ (8001c0c <MX_TIM8_Init+0x19c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001ade:	484b      	ldr	r0, [pc, #300]	@ (8001c0c <MX_TIM8_Init+0x19c>)
 8001ae0:	f004 f983 	bl	8005dea <HAL_TIM_Base_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8001aea:	f000 fb05 	bl	80020f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001af2:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001af4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001af8:	4619      	mov	r1, r3
 8001afa:	4844      	ldr	r0, [pc, #272]	@ (8001c0c <MX_TIM8_Init+0x19c>)
 8001afc:	f005 f8be 	bl	8006c7c <HAL_TIM_ConfigClockSource>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001b06:	f000 faf7 	bl	80020f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001b0a:	4840      	ldr	r0, [pc, #256]	@ (8001c0c <MX_TIM8_Init+0x19c>)
 8001b0c:	f004 fa9d 	bl	800604a <HAL_TIM_PWM_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001b16:	f000 faef 	bl	80020f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b26:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4837      	ldr	r0, [pc, #220]	@ (8001c0c <MX_TIM8_Init+0x19c>)
 8001b2e:	f005 fe8b 	bl	8007848 <HAL_TIMEx_MasterConfigSynchronization>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001b38:	f000 fade 	bl	80020f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b3c:	2360      	movs	r3, #96	@ 0x60
 8001b3e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b44:	2300      	movs	r3, #0
 8001b46:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b50:	2300      	movs	r3, #0
 8001b52:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b54:	2300      	movs	r3, #0
 8001b56:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b58:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	4619      	mov	r1, r3
 8001b60:	482a      	ldr	r0, [pc, #168]	@ (8001c0c <MX_TIM8_Init+0x19c>)
 8001b62:	f004 ff77 	bl	8006a54 <HAL_TIM_PWM_ConfigChannel>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001b6c:	f000 fac4 	bl	80020f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b74:	2204      	movs	r2, #4
 8001b76:	4619      	mov	r1, r3
 8001b78:	4824      	ldr	r0, [pc, #144]	@ (8001c0c <MX_TIM8_Init+0x19c>)
 8001b7a:	f004 ff6b 	bl	8006a54 <HAL_TIM_PWM_ConfigChannel>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001b84:	f000 fab8 	bl	80020f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b88:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	4619      	mov	r1, r3
 8001b90:	481e      	ldr	r0, [pc, #120]	@ (8001c0c <MX_TIM8_Init+0x19c>)
 8001b92:	f004 ff5f 	bl	8006a54 <HAL_TIM_PWM_ConfigChannel>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001b9c:	f000 faac 	bl	80020f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ba0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ba4:	220c      	movs	r2, #12
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4818      	ldr	r0, [pc, #96]	@ (8001c0c <MX_TIM8_Init+0x19c>)
 8001baa:	f004 ff53 	bl	8006a54 <HAL_TIM_PWM_ConfigChannel>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8001bb4:	f000 faa0 	bl	80020f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bd0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bde:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	4619      	mov	r1, r3
 8001bec:	4807      	ldr	r0, [pc, #28]	@ (8001c0c <MX_TIM8_Init+0x19c>)
 8001bee:	f005 feb9 	bl	8007964 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 8001bf8:	f000 fa7e 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001bfc:	4803      	ldr	r0, [pc, #12]	@ (8001c0c <MX_TIM8_Init+0x19c>)
 8001bfe:	f000 feb9 	bl	8002974 <HAL_TIM_MspPostInit>

}
 8001c02:	bf00      	nop
 8001c04:	3768      	adds	r7, #104	@ 0x68
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	2000052c 	.word	0x2000052c
 8001c10:	40010400 	.word	0x40010400

08001c14 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
 8001c28:	615a      	str	r2, [r3, #20]
 8001c2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cac <MX_TIM9_Init+0x98>)
 8001c2e:	4a20      	ldr	r2, [pc, #128]	@ (8001cb0 <MX_TIM9_Init+0x9c>)
 8001c30:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001c32:	4b1e      	ldr	r3, [pc, #120]	@ (8001cac <MX_TIM9_Init+0x98>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c38:	4b1c      	ldr	r3, [pc, #112]	@ (8001cac <MX_TIM9_Init+0x98>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <MX_TIM9_Init+0x98>)
 8001c40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c44:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c46:	4b19      	ldr	r3, [pc, #100]	@ (8001cac <MX_TIM9_Init+0x98>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4c:	4b17      	ldr	r3, [pc, #92]	@ (8001cac <MX_TIM9_Init+0x98>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001c52:	4816      	ldr	r0, [pc, #88]	@ (8001cac <MX_TIM9_Init+0x98>)
 8001c54:	f004 f9f9 	bl	800604a <HAL_TIM_PWM_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001c5e:	f000 fa4b 	bl	80020f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c62:	2360      	movs	r3, #96	@ 0x60
 8001c64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	2200      	movs	r2, #0
 8001c76:	4619      	mov	r1, r3
 8001c78:	480c      	ldr	r0, [pc, #48]	@ (8001cac <MX_TIM9_Init+0x98>)
 8001c7a:	f004 feeb 	bl	8006a54 <HAL_TIM_PWM_ConfigChannel>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001c84:	f000 fa38 	bl	80020f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4807      	ldr	r0, [pc, #28]	@ (8001cac <MX_TIM9_Init+0x98>)
 8001c90:	f004 fee0 	bl	8006a54 <HAL_TIM_PWM_ConfigChannel>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001c9a:	f000 fa2d 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001c9e:	4803      	ldr	r0, [pc, #12]	@ (8001cac <MX_TIM9_Init+0x98>)
 8001ca0:	f000 fe68 	bl	8002974 <HAL_TIM_MspPostInit>

}
 8001ca4:	bf00      	nop
 8001ca6:	3720      	adds	r7, #32
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000578 	.word	0x20000578
 8001cb0:	40014000 	.word	0x40014000

08001cb4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001cb8:	4b14      	ldr	r3, [pc, #80]	@ (8001d0c <MX_UART4_Init+0x58>)
 8001cba:	4a15      	ldr	r2, [pc, #84]	@ (8001d10 <MX_UART4_Init+0x5c>)
 8001cbc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001cbe:	4b13      	ldr	r3, [pc, #76]	@ (8001d0c <MX_UART4_Init+0x58>)
 8001cc0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001cc4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc6:	4b11      	ldr	r3, [pc, #68]	@ (8001d0c <MX_UART4_Init+0x58>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d0c <MX_UART4_Init+0x58>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d0c <MX_UART4_Init+0x58>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <MX_UART4_Init+0x58>)
 8001cda:	220c      	movs	r2, #12
 8001cdc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cde:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <MX_UART4_Init+0x58>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce4:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <MX_UART4_Init+0x58>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cea:	4b08      	ldr	r3, [pc, #32]	@ (8001d0c <MX_UART4_Init+0x58>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <MX_UART4_Init+0x58>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001cf6:	4805      	ldr	r0, [pc, #20]	@ (8001d0c <MX_UART4_Init+0x58>)
 8001cf8:	f005 fed0 	bl	8007a9c <HAL_UART_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001d02:	f000 f9f9 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200005c4 	.word	0x200005c4
 8001d10:	40004c00 	.word	0x40004c00

08001d14 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001d18:	4b14      	ldr	r3, [pc, #80]	@ (8001d6c <MX_UART5_Init+0x58>)
 8001d1a:	4a15      	ldr	r2, [pc, #84]	@ (8001d70 <MX_UART5_Init+0x5c>)
 8001d1c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001d1e:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <MX_UART5_Init+0x58>)
 8001d20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d24:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001d26:	4b11      	ldr	r3, [pc, #68]	@ (8001d6c <MX_UART5_Init+0x58>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d6c <MX_UART5_Init+0x58>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	@ (8001d6c <MX_UART5_Init+0x58>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001d38:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <MX_UART5_Init+0x58>)
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d6c <MX_UART5_Init+0x58>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d44:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <MX_UART5_Init+0x58>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d4a:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <MX_UART5_Init+0x58>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <MX_UART5_Init+0x58>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001d56:	4805      	ldr	r0, [pc, #20]	@ (8001d6c <MX_UART5_Init+0x58>)
 8001d58:	f005 fea0 	bl	8007a9c <HAL_UART_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001d62:	f000 f9c9 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	2000064c 	.word	0x2000064c
 8001d70:	40005000 	.word	0x40005000

08001d74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d78:	4b14      	ldr	r3, [pc, #80]	@ (8001dcc <MX_USART1_UART_Init+0x58>)
 8001d7a:	4a15      	ldr	r2, [pc, #84]	@ (8001dd0 <MX_USART1_UART_Init+0x5c>)
 8001d7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d7e:	4b13      	ldr	r3, [pc, #76]	@ (8001dcc <MX_USART1_UART_Init+0x58>)
 8001d80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d86:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <MX_USART1_UART_Init+0x58>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dcc <MX_USART1_UART_Init+0x58>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d92:	4b0e      	ldr	r3, [pc, #56]	@ (8001dcc <MX_USART1_UART_Init+0x58>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d98:	4b0c      	ldr	r3, [pc, #48]	@ (8001dcc <MX_USART1_UART_Init+0x58>)
 8001d9a:	220c      	movs	r2, #12
 8001d9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dcc <MX_USART1_UART_Init+0x58>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da4:	4b09      	ldr	r3, [pc, #36]	@ (8001dcc <MX_USART1_UART_Init+0x58>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001daa:	4b08      	ldr	r3, [pc, #32]	@ (8001dcc <MX_USART1_UART_Init+0x58>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001db0:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <MX_USART1_UART_Init+0x58>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001db6:	4805      	ldr	r0, [pc, #20]	@ (8001dcc <MX_USART1_UART_Init+0x58>)
 8001db8:	f005 fe70 	bl	8007a9c <HAL_UART_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001dc2:	f000 f999 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200006d4 	.word	0x200006d4
 8001dd0:	40011000 	.word	0x40011000

08001dd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dd8:	4b13      	ldr	r3, [pc, #76]	@ (8001e28 <MX_USART2_UART_Init+0x54>)
 8001dda:	4a14      	ldr	r2, [pc, #80]	@ (8001e2c <MX_USART2_UART_Init+0x58>)
 8001ddc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8001dde:	4b12      	ldr	r3, [pc, #72]	@ (8001e28 <MX_USART2_UART_Init+0x54>)
 8001de0:	4a13      	ldr	r2, [pc, #76]	@ (8001e30 <MX_USART2_UART_Init+0x5c>)
 8001de2:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001de4:	4b10      	ldr	r3, [pc, #64]	@ (8001e28 <MX_USART2_UART_Init+0x54>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dea:	4b0f      	ldr	r3, [pc, #60]	@ (8001e28 <MX_USART2_UART_Init+0x54>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001df0:	4b0d      	ldr	r3, [pc, #52]	@ (8001e28 <MX_USART2_UART_Init+0x54>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001df6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e28 <MX_USART2_UART_Init+0x54>)
 8001df8:	220c      	movs	r2, #12
 8001dfa:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001e28 <MX_USART2_UART_Init+0x54>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e02:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <MX_USART2_UART_Init+0x54>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e08:	4b07      	ldr	r3, [pc, #28]	@ (8001e28 <MX_USART2_UART_Init+0x54>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e0e:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <MX_USART2_UART_Init+0x54>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e14:	4804      	ldr	r0, [pc, #16]	@ (8001e28 <MX_USART2_UART_Init+0x54>)
 8001e16:	f005 fe41 	bl	8007a9c <HAL_UART_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8001e20:	f000 f96a 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	2000075c 	.word	0x2000075c
 8001e2c:	40004400 	.word	0x40004400
 8001e30:	000f4240 	.word	0x000f4240

08001e34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e38:	4b14      	ldr	r3, [pc, #80]	@ (8001e8c <MX_USART3_UART_Init+0x58>)
 8001e3a:	4a15      	ldr	r2, [pc, #84]	@ (8001e90 <MX_USART3_UART_Init+0x5c>)
 8001e3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e3e:	4b13      	ldr	r3, [pc, #76]	@ (8001e8c <MX_USART3_UART_Init+0x58>)
 8001e40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e46:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <MX_USART3_UART_Init+0x58>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e8c <MX_USART3_UART_Init+0x58>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e52:	4b0e      	ldr	r3, [pc, #56]	@ (8001e8c <MX_USART3_UART_Init+0x58>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e58:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <MX_USART3_UART_Init+0x58>)
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e8c <MX_USART3_UART_Init+0x58>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e64:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <MX_USART3_UART_Init+0x58>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e6a:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <MX_USART3_UART_Init+0x58>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e70:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <MX_USART3_UART_Init+0x58>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e76:	4805      	ldr	r0, [pc, #20]	@ (8001e8c <MX_USART3_UART_Init+0x58>)
 8001e78:	f005 fe10 	bl	8007a9c <HAL_UART_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e82:	f000 f939 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200007e4 	.word	0x200007e4
 8001e90:	40004800 	.word	0x40004800

08001e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08e      	sub	sp, #56	@ 0x38
 8001e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
 8001ea8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eaa:	4b8c      	ldr	r3, [pc, #560]	@ (80020dc <MX_GPIO_Init+0x248>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	4a8b      	ldr	r2, [pc, #556]	@ (80020dc <MX_GPIO_Init+0x248>)
 8001eb0:	f043 0310 	orr.w	r3, r3, #16
 8001eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb6:	4b89      	ldr	r3, [pc, #548]	@ (80020dc <MX_GPIO_Init+0x248>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	623b      	str	r3, [r7, #32]
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec2:	4b86      	ldr	r3, [pc, #536]	@ (80020dc <MX_GPIO_Init+0x248>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	4a85      	ldr	r2, [pc, #532]	@ (80020dc <MX_GPIO_Init+0x248>)
 8001ec8:	f043 0304 	orr.w	r3, r3, #4
 8001ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ece:	4b83      	ldr	r3, [pc, #524]	@ (80020dc <MX_GPIO_Init+0x248>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	61fb      	str	r3, [r7, #28]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eda:	4b80      	ldr	r3, [pc, #512]	@ (80020dc <MX_GPIO_Init+0x248>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	4a7f      	ldr	r2, [pc, #508]	@ (80020dc <MX_GPIO_Init+0x248>)
 8001ee0:	f043 0320 	orr.w	r3, r3, #32
 8001ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee6:	4b7d      	ldr	r3, [pc, #500]	@ (80020dc <MX_GPIO_Init+0x248>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	61bb      	str	r3, [r7, #24]
 8001ef0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ef2:	4b7a      	ldr	r3, [pc, #488]	@ (80020dc <MX_GPIO_Init+0x248>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	4a79      	ldr	r2, [pc, #484]	@ (80020dc <MX_GPIO_Init+0x248>)
 8001ef8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efe:	4b77      	ldr	r3, [pc, #476]	@ (80020dc <MX_GPIO_Init+0x248>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0a:	4b74      	ldr	r3, [pc, #464]	@ (80020dc <MX_GPIO_Init+0x248>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	4a73      	ldr	r2, [pc, #460]	@ (80020dc <MX_GPIO_Init+0x248>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f16:	4b71      	ldr	r3, [pc, #452]	@ (80020dc <MX_GPIO_Init+0x248>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f22:	4b6e      	ldr	r3, [pc, #440]	@ (80020dc <MX_GPIO_Init+0x248>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	4a6d      	ldr	r2, [pc, #436]	@ (80020dc <MX_GPIO_Init+0x248>)
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2e:	4b6b      	ldr	r3, [pc, #428]	@ (80020dc <MX_GPIO_Init+0x248>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3a:	4b68      	ldr	r3, [pc, #416]	@ (80020dc <MX_GPIO_Init+0x248>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	4a67      	ldr	r2, [pc, #412]	@ (80020dc <MX_GPIO_Init+0x248>)
 8001f40:	f043 0308 	orr.w	r3, r3, #8
 8001f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f46:	4b65      	ldr	r3, [pc, #404]	@ (80020dc <MX_GPIO_Init+0x248>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f52:	4b62      	ldr	r3, [pc, #392]	@ (80020dc <MX_GPIO_Init+0x248>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	4a61      	ldr	r2, [pc, #388]	@ (80020dc <MX_GPIO_Init+0x248>)
 8001f58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5e:	4b5f      	ldr	r3, [pc, #380]	@ (80020dc <MX_GPIO_Init+0x248>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2118      	movs	r1, #24
 8001f6e:	485c      	ldr	r0, [pc, #368]	@ (80020e0 <MX_GPIO_Init+0x24c>)
 8001f70:	f001 fedc 	bl	8003d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001f74:	2200      	movs	r2, #0
 8001f76:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001f7a:	485a      	ldr	r0, [pc, #360]	@ (80020e4 <MX_GPIO_Init+0x250>)
 8001f7c:	f001 fed6 	bl	8003d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001f80:	2200      	movs	r2, #0
 8001f82:	2140      	movs	r1, #64	@ 0x40
 8001f84:	4858      	ldr	r0, [pc, #352]	@ (80020e8 <MX_GPIO_Init+0x254>)
 8001f86:	f001 fed1 	bl	8003d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin;
 8001f8a:	2318      	movs	r3, #24
 8001f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	484f      	ldr	r0, [pc, #316]	@ (80020e0 <MX_GPIO_Init+0x24c>)
 8001fa2:	f001 fd17 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI4_KPAD_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin
                           GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin
                           GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin|GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI4_KPAD_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin
 8001fa6:	f643 731c 	movw	r3, #16156	@ 0x3f1c
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin|GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin
                          |GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fba:	4619      	mov	r1, r3
 8001fbc:	484b      	ldr	r0, [pc, #300]	@ (80020ec <MX_GPIO_Init+0x258>)
 8001fbe:	f001 fd09 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001fc2:	2332      	movs	r3, #50	@ 0x32
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fd2:	230b      	movs	r3, #11
 8001fd4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4844      	ldr	r0, [pc, #272]	@ (80020f0 <MX_GPIO_Init+0x25c>)
 8001fde:	f001 fcf9 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001fe2:	2386      	movs	r3, #134	@ 0x86
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ff2:	230b      	movs	r3, #11
 8001ff4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	483d      	ldr	r0, [pc, #244]	@ (80020f4 <MX_GPIO_Init+0x260>)
 8001ffe:	f001 fce9 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002002:	f244 0381 	movw	r3, #16513	@ 0x4081
 8002006:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002008:	2301      	movs	r3, #1
 800200a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	2300      	movs	r3, #0
 8002012:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002014:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002018:	4619      	mov	r1, r3
 800201a:	4832      	ldr	r0, [pc, #200]	@ (80020e4 <MX_GPIO_Init+0x250>)
 800201c:	f001 fcda 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002020:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002024:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002032:	230b      	movs	r3, #11
 8002034:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002036:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800203a:	4619      	mov	r1, r3
 800203c:	4829      	ldr	r0, [pc, #164]	@ (80020e4 <MX_GPIO_Init+0x250>)
 800203e:	f001 fcc9 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002042:	2340      	movs	r3, #64	@ 0x40
 8002044:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002046:	2301      	movs	r3, #1
 8002048:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204e:	2300      	movs	r3, #0
 8002050:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002052:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002056:	4619      	mov	r1, r3
 8002058:	4823      	ldr	r0, [pc, #140]	@ (80020e8 <MX_GPIO_Init+0x254>)
 800205a:	f001 fcbb 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800205e:	2380      	movs	r3, #128	@ 0x80
 8002060:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002062:	2300      	movs	r3, #0
 8002064:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800206a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800206e:	4619      	mov	r1, r3
 8002070:	481d      	ldr	r0, [pc, #116]	@ (80020e8 <MX_GPIO_Init+0x254>)
 8002072:	f001 fcaf 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002076:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800207a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002084:	2303      	movs	r3, #3
 8002086:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002088:	230a      	movs	r3, #10
 800208a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002090:	4619      	mov	r1, r3
 8002092:	4818      	ldr	r0, [pc, #96]	@ (80020f4 <MX_GPIO_Init+0x260>)
 8002094:	f001 fc9e 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002098:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800209c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800209e:	2300      	movs	r3, #0
 80020a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80020a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020aa:	4619      	mov	r1, r3
 80020ac:	4811      	ldr	r0, [pc, #68]	@ (80020f4 <MX_GPIO_Init+0x260>)
 80020ae:	f001 fc91 	bl	80039d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80020b2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80020b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c0:	2303      	movs	r3, #3
 80020c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020c4:	230b      	movs	r3, #11
 80020c6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020cc:	4619      	mov	r1, r3
 80020ce:	4806      	ldr	r0, [pc, #24]	@ (80020e8 <MX_GPIO_Init+0x254>)
 80020d0:	f001 fc80 	bl	80039d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80020d4:	bf00      	nop
 80020d6:	3738      	adds	r7, #56	@ 0x38
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40020400 	.word	0x40020400
 80020e8:	40021800 	.word	0x40021800
 80020ec:	40021400 	.word	0x40021400
 80020f0:	40020800 	.word	0x40020800
 80020f4:	40020000 	.word	0x40020000

080020f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020fc:	b672      	cpsid	i
}
 80020fe:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  static uint32_t kLed = 0;
	  if(++kLed >= 1000)
 8002100:	4b09      	ldr	r3, [pc, #36]	@ (8002128 <Error_Handler+0x30>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	3301      	adds	r3, #1
 8002106:	4a08      	ldr	r2, [pc, #32]	@ (8002128 <Error_Handler+0x30>)
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	4b07      	ldr	r3, [pc, #28]	@ (8002128 <Error_Handler+0x30>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002112:	d3f5      	bcc.n	8002100 <Error_Handler+0x8>
	  {
		  kLed = 0;
 8002114:	4b04      	ldr	r3, [pc, #16]	@ (8002128 <Error_Handler+0x30>)
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800211a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800211e:	4803      	ldr	r0, [pc, #12]	@ (800212c <Error_Handler+0x34>)
 8002120:	f001 fe1d 	bl	8003d5e <HAL_GPIO_TogglePin>
  {
 8002124:	e7ec      	b.n	8002100 <Error_Handler+0x8>
 8002126:	bf00      	nop
 8002128:	20000954 	.word	0x20000954
 800212c:	40020400 	.word	0x40020400

08002130 <encoder_update>:
 *      Author: lucag
 */

#include "motor_control.h"

void encoder_update(Encoder *enc, TIM_HandleTypeDef *htim, uint32_t arr_value) {
 8002130:	b480      	push	{r7}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
	uint32_t current_count = __HAL_TIM_GET_COUNTER(htim);
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002142:	613b      	str	r3, [r7, #16]
	int32_t diff;

	// evaluate increment of TIM3 counter from previous count
	if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) {
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	2b10      	cmp	r3, #16
 8002150:	d115      	bne.n	800217e <encoder_update+0x4e>
		if (current_count <= enc->prev_count)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4293      	cmp	r3, r2
 800215c:	d806      	bhi.n	800216c <encoder_update+0x3c>
			diff = current_count - enc->prev_count;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	e01e      	b.n	80021aa <encoder_update+0x7a>
		else
			diff = -((arr_value + 1) - current_count) - enc->prev_count;
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	1a9b      	subs	r3, r3, r2
 8002178:	3b01      	subs	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	e015      	b.n	80021aa <encoder_update+0x7a>
	} else {
		if (current_count >= enc->prev_count)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4293      	cmp	r3, r2
 8002188:	d306      	bcc.n	8002198 <encoder_update+0x68>
			diff = current_count - enc->prev_count;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1a9b      	subs	r3, r3, r2
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	e008      	b.n	80021aa <encoder_update+0x7a>
		else
			diff = ((arr_value + 1) - enc->prev_count) + current_count;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	1a9a      	subs	r2, r3, r2
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4413      	add	r3, r2
 80021a6:	3301      	adds	r3, #1
 80021a8:	617b      	str	r3, [r7, #20]
	}
	enc->prev_count = current_count;
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	601a      	str	r2, [r3, #0]
	 Explanation: diff/3840 gives the fraction of a revolution done during Ts
	 /Ts converts revolution in Ts seconds into revolution in 1 second
	 *60 coverts into revolution per minute (RPM)
	 NB: Everything in kept as float to avoid casting errors
	 */
	enc->speed_rpm = ((float) diff / 3840.0f) * (60.0f / TS);
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	ee07 3a90 	vmov	s15, r3
 80021b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ba:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80021dc <encoder_update+0xac>
 80021be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021c2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80021e0 <encoder_update+0xb0>
 80021c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80021d0:	bf00      	nop
 80021d2:	371c      	adds	r7, #28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	45700000 	.word	0x45700000
 80021e0:	45bb8000 	.word	0x45bb8000

080021e4 <pi_control>:

float pi_control(PI_Controller *controller, float measured) {
 80021e4:	b480      	push	{r7}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	ed87 0a00 	vstr	s0, [r7]
	float error = controller->ref - measured;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	ed93 7a03 	vldr	s14, [r3, #12]
 80021f6:	edd7 7a00 	vldr	s15, [r7]
 80021fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021fe:	edc7 7a05 	vstr	s15, [r7, #20]
	controller->integral += controller->ki * TS * error;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	ed93 7a02 	vldr	s14, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	edd3 7a01 	vldr	s15, [r3, #4]
 800220e:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800225c <pi_control+0x78>
 8002212:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002216:	edd7 7a05 	vldr	s15, [r7, #20]
 800221a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800221e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	edc3 7a02 	vstr	s15, [r3, #8]
	float P = controller->kp * error;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	edd3 7a00 	vldr	s15, [r3]
 800222e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002236:	edc7 7a04 	vstr	s15, [r7, #16]
	float I = controller->integral;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	60fb      	str	r3, [r7, #12]
	return P + I;
 8002240:	ed97 7a04 	vldr	s14, [r7, #16]
 8002244:	edd7 7a03 	vldr	s15, [r7, #12]
 8002248:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800224c:	eeb0 0a67 	vmov.f32	s0, s15
 8002250:	371c      	adds	r7, #28
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	3c23d70a 	.word	0x3c23d70a

08002260 <set_motor_pwm>:
	return output;

}

void set_motor_pwm(int32_t duty, TIM_HandleTypeDef *htim_pwm, uint32_t ch1,
		uint32_t ch2) {
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	603b      	str	r3, [r7, #0]
	if (duty >= 0) {
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	db58      	blt.n	8002326 <set_motor_pwm+0xc6>
		__HAL_TIM_SET_COMPARE(htim_pwm, ch1, (uint32_t )duty);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d104      	bne.n	8002284 <set_motor_pwm+0x24>
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	635a      	str	r2, [r3, #52]	@ 0x34
 8002282:	e023      	b.n	80022cc <set_motor_pwm+0x6c>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b04      	cmp	r3, #4
 8002288:	d104      	bne.n	8002294 <set_motor_pwm+0x34>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6393      	str	r3, [r2, #56]	@ 0x38
 8002292:	e01b      	b.n	80022cc <set_motor_pwm+0x6c>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b08      	cmp	r3, #8
 8002298:	d104      	bne.n	80022a4 <set_motor_pwm+0x44>
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80022a2:	e013      	b.n	80022cc <set_motor_pwm+0x6c>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b0c      	cmp	r3, #12
 80022a8:	d104      	bne.n	80022b4 <set_motor_pwm+0x54>
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022b2:	e00b      	b.n	80022cc <set_motor_pwm+0x6c>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b10      	cmp	r3, #16
 80022b8:	d104      	bne.n	80022c4 <set_motor_pwm+0x64>
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80022c2:	e003      	b.n	80022cc <set_motor_pwm+0x6c>
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, 0);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d104      	bne.n	80022dc <set_motor_pwm+0x7c>
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2200      	movs	r2, #0
 80022d8:	635a      	str	r2, [r3, #52]	@ 0x34
	} else {
		__HAL_TIM_SET_COMPARE(htim_pwm, ch1, 0);
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, (uint32_t )(-duty));
	}
}
 80022da:	e088      	b.n	80023ee <set_motor_pwm+0x18e>
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, 0);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d104      	bne.n	80022ec <set_motor_pwm+0x8c>
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	2300      	movs	r3, #0
 80022e8:	6393      	str	r3, [r2, #56]	@ 0x38
 80022ea:	e080      	b.n	80023ee <set_motor_pwm+0x18e>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d104      	bne.n	80022fc <set_motor_pwm+0x9c>
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	2300      	movs	r3, #0
 80022f8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80022fa:	e078      	b.n	80023ee <set_motor_pwm+0x18e>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	2b0c      	cmp	r3, #12
 8002300:	d104      	bne.n	800230c <set_motor_pwm+0xac>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	2300      	movs	r3, #0
 8002308:	6413      	str	r3, [r2, #64]	@ 0x40
 800230a:	e070      	b.n	80023ee <set_motor_pwm+0x18e>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2b10      	cmp	r3, #16
 8002310:	d104      	bne.n	800231c <set_motor_pwm+0xbc>
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	2300      	movs	r3, #0
 8002318:	6593      	str	r3, [r2, #88]	@ 0x58
 800231a:	e068      	b.n	80023ee <set_motor_pwm+0x18e>
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	2300      	movs	r3, #0
 8002322:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8002324:	e063      	b.n	80023ee <set_motor_pwm+0x18e>
		__HAL_TIM_SET_COMPARE(htim_pwm, ch1, 0);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d104      	bne.n	8002336 <set_motor_pwm+0xd6>
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2200      	movs	r2, #0
 8002332:	635a      	str	r2, [r3, #52]	@ 0x34
 8002334:	e023      	b.n	800237e <set_motor_pwm+0x11e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b04      	cmp	r3, #4
 800233a:	d104      	bne.n	8002346 <set_motor_pwm+0xe6>
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	2300      	movs	r3, #0
 8002342:	6393      	str	r3, [r2, #56]	@ 0x38
 8002344:	e01b      	b.n	800237e <set_motor_pwm+0x11e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b08      	cmp	r3, #8
 800234a:	d104      	bne.n	8002356 <set_motor_pwm+0xf6>
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	2300      	movs	r3, #0
 8002352:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002354:	e013      	b.n	800237e <set_motor_pwm+0x11e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b0c      	cmp	r3, #12
 800235a:	d104      	bne.n	8002366 <set_motor_pwm+0x106>
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	2300      	movs	r3, #0
 8002362:	6413      	str	r3, [r2, #64]	@ 0x40
 8002364:	e00b      	b.n	800237e <set_motor_pwm+0x11e>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b10      	cmp	r3, #16
 800236a:	d104      	bne.n	8002376 <set_motor_pwm+0x116>
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	2300      	movs	r3, #0
 8002372:	6593      	str	r3, [r2, #88]	@ 0x58
 8002374:	e003      	b.n	800237e <set_motor_pwm+0x11e>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	2300      	movs	r3, #0
 800237c:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, (uint32_t )(-duty));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d105      	bne.n	8002390 <set_motor_pwm+0x130>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	425a      	negs	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800238e:	e02e      	b.n	80023ee <set_motor_pwm+0x18e>
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, (uint32_t )(-duty));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	2b04      	cmp	r3, #4
 8002394:	d106      	bne.n	80023a4 <set_motor_pwm+0x144>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4259      	negs	r1, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	460b      	mov	r3, r1
 80023a0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80023a2:	e024      	b.n	80023ee <set_motor_pwm+0x18e>
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, (uint32_t )(-duty));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d106      	bne.n	80023b8 <set_motor_pwm+0x158>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4259      	negs	r1, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	460b      	mov	r3, r1
 80023b4:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80023b6:	e01a      	b.n	80023ee <set_motor_pwm+0x18e>
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, (uint32_t )(-duty));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2b0c      	cmp	r3, #12
 80023bc:	d106      	bne.n	80023cc <set_motor_pwm+0x16c>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4259      	negs	r1, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	460b      	mov	r3, r1
 80023c8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80023ca:	e010      	b.n	80023ee <set_motor_pwm+0x18e>
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, (uint32_t )(-duty));
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2b10      	cmp	r3, #16
 80023d0:	d106      	bne.n	80023e0 <set_motor_pwm+0x180>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4259      	negs	r1, r3
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	460b      	mov	r3, r1
 80023dc:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80023de:	e006      	b.n	80023ee <set_motor_pwm+0x18e>
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, (uint32_t )(-duty));
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4259      	negs	r1, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	460b      	mov	r3, r1
 80023ea:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80023ec:	e7ff      	b.n	80023ee <set_motor_pwm+0x18e>
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002402:	4b0f      	ldr	r3, [pc, #60]	@ (8002440 <HAL_MspInit+0x44>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	4a0e      	ldr	r2, [pc, #56]	@ (8002440 <HAL_MspInit+0x44>)
 8002408:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800240c:	6413      	str	r3, [r2, #64]	@ 0x40
 800240e:	4b0c      	ldr	r3, [pc, #48]	@ (8002440 <HAL_MspInit+0x44>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002416:	607b      	str	r3, [r7, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241a:	4b09      	ldr	r3, [pc, #36]	@ (8002440 <HAL_MspInit+0x44>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241e:	4a08      	ldr	r2, [pc, #32]	@ (8002440 <HAL_MspInit+0x44>)
 8002420:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002424:	6453      	str	r3, [r2, #68]	@ 0x44
 8002426:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <HAL_MspInit+0x44>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800

08002444 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	@ 0x28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a15      	ldr	r2, [pc, #84]	@ (80024b8 <HAL_ADC_MspInit+0x74>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d123      	bne.n	80024ae <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002466:	4b15      	ldr	r3, [pc, #84]	@ (80024bc <HAL_ADC_MspInit+0x78>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246a:	4a14      	ldr	r2, [pc, #80]	@ (80024bc <HAL_ADC_MspInit+0x78>)
 800246c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002470:	6453      	str	r3, [r2, #68]	@ 0x44
 8002472:	4b12      	ldr	r3, [pc, #72]	@ (80024bc <HAL_ADC_MspInit+0x78>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247e:	4b0f      	ldr	r3, [pc, #60]	@ (80024bc <HAL_ADC_MspInit+0x78>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	4a0e      	ldr	r2, [pc, #56]	@ (80024bc <HAL_ADC_MspInit+0x78>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	6313      	str	r3, [r2, #48]	@ 0x30
 800248a:	4b0c      	ldr	r3, [pc, #48]	@ (80024bc <HAL_ADC_MspInit+0x78>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 8002496:	2308      	movs	r3, #8
 8002498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800249a:	2303      	movs	r3, #3
 800249c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	4619      	mov	r1, r3
 80024a8:	4805      	ldr	r0, [pc, #20]	@ (80024c0 <HAL_ADC_MspInit+0x7c>)
 80024aa:	f001 fa93 	bl	80039d4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80024ae:	bf00      	nop
 80024b0:	3728      	adds	r7, #40	@ 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40012000 	.word	0x40012000
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40020000 	.word	0x40020000

080024c4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b0b0      	sub	sp, #192	@ 0xc0
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024dc:	f107 031c 	add.w	r3, r7, #28
 80024e0:	2290      	movs	r2, #144	@ 0x90
 80024e2:	2100      	movs	r1, #0
 80024e4:	4618      	mov	r0, r3
 80024e6:	f007 f83b 	bl	8009560 <memset>
  if(hi2c->Instance==I2C1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a44      	ldr	r2, [pc, #272]	@ (8002600 <HAL_I2C_MspInit+0x13c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d13e      	bne.n	8002572 <HAL_I2C_MspInit+0xae>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80024f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80024f8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80024fa:	2300      	movs	r3, #0
 80024fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002500:	f107 031c 	add.w	r3, r7, #28
 8002504:	4618      	mov	r0, r3
 8002506:	f002 ff9d 	bl	8005444 <HAL_RCCEx_PeriphCLKConfig>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002510:	f7ff fdf2 	bl	80020f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002514:	4b3b      	ldr	r3, [pc, #236]	@ (8002604 <HAL_I2C_MspInit+0x140>)
 8002516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002518:	4a3a      	ldr	r2, [pc, #232]	@ (8002604 <HAL_I2C_MspInit+0x140>)
 800251a:	f043 0302 	orr.w	r3, r3, #2
 800251e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002520:	4b38      	ldr	r3, [pc, #224]	@ (8002604 <HAL_I2C_MspInit+0x140>)
 8002522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	61bb      	str	r3, [r7, #24]
 800252a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800252c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002530:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002534:	2312      	movs	r3, #18
 8002536:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800253a:	2301      	movs	r3, #1
 800253c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002540:	2303      	movs	r3, #3
 8002542:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002546:	2304      	movs	r3, #4
 8002548:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002550:	4619      	mov	r1, r3
 8002552:	482d      	ldr	r0, [pc, #180]	@ (8002608 <HAL_I2C_MspInit+0x144>)
 8002554:	f001 fa3e 	bl	80039d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002558:	4b2a      	ldr	r3, [pc, #168]	@ (8002604 <HAL_I2C_MspInit+0x140>)
 800255a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255c:	4a29      	ldr	r2, [pc, #164]	@ (8002604 <HAL_I2C_MspInit+0x140>)
 800255e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002562:	6413      	str	r3, [r2, #64]	@ 0x40
 8002564:	4b27      	ldr	r3, [pc, #156]	@ (8002604 <HAL_I2C_MspInit+0x140>)
 8002566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002568:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002570:	e041      	b.n	80025f6 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a25      	ldr	r2, [pc, #148]	@ (800260c <HAL_I2C_MspInit+0x148>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d13c      	bne.n	80025f6 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800257c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002580:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002582:	2300      	movs	r3, #0
 8002584:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002588:	f107 031c 	add.w	r3, r7, #28
 800258c:	4618      	mov	r0, r3
 800258e:	f002 ff59 	bl	8005444 <HAL_RCCEx_PeriphCLKConfig>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8002598:	f7ff fdae 	bl	80020f8 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800259c:	4b19      	ldr	r3, [pc, #100]	@ (8002604 <HAL_I2C_MspInit+0x140>)
 800259e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a0:	4a18      	ldr	r2, [pc, #96]	@ (8002604 <HAL_I2C_MspInit+0x140>)
 80025a2:	f043 0320 	orr.w	r3, r3, #32
 80025a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80025a8:	4b16      	ldr	r3, [pc, #88]	@ (8002604 <HAL_I2C_MspInit+0x140>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025b4:	2303      	movs	r3, #3
 80025b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025ba:	2312      	movs	r3, #18
 80025bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025c0:	2301      	movs	r3, #1
 80025c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c6:	2303      	movs	r3, #3
 80025c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80025cc:	2304      	movs	r3, #4
 80025ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025d2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80025d6:	4619      	mov	r1, r3
 80025d8:	480d      	ldr	r0, [pc, #52]	@ (8002610 <HAL_I2C_MspInit+0x14c>)
 80025da:	f001 f9fb 	bl	80039d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80025de:	4b09      	ldr	r3, [pc, #36]	@ (8002604 <HAL_I2C_MspInit+0x140>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	4a08      	ldr	r2, [pc, #32]	@ (8002604 <HAL_I2C_MspInit+0x140>)
 80025e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ea:	4b06      	ldr	r3, [pc, #24]	@ (8002604 <HAL_I2C_MspInit+0x140>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
}
 80025f6:	bf00      	nop
 80025f8:	37c0      	adds	r7, #192	@ 0xc0
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40005400 	.word	0x40005400
 8002604:	40023800 	.word	0x40023800
 8002608:	40020400 	.word	0x40020400
 800260c:	40005800 	.word	0x40005800
 8002610:	40021400 	.word	0x40021400

08002614 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08c      	sub	sp, #48	@ 0x30
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261c:	f107 031c 	add.w	r3, r7, #28
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a33      	ldr	r2, [pc, #204]	@ (8002700 <HAL_SPI_MspInit+0xec>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d160      	bne.n	80026f8 <HAL_SPI_MspInit+0xe4>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002636:	4b33      	ldr	r3, [pc, #204]	@ (8002704 <HAL_SPI_MspInit+0xf0>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263a:	4a32      	ldr	r2, [pc, #200]	@ (8002704 <HAL_SPI_MspInit+0xf0>)
 800263c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002640:	6453      	str	r3, [r2, #68]	@ 0x44
 8002642:	4b30      	ldr	r3, [pc, #192]	@ (8002704 <HAL_SPI_MspInit+0xf0>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002646:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800264a:	61bb      	str	r3, [r7, #24]
 800264c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264e:	4b2d      	ldr	r3, [pc, #180]	@ (8002704 <HAL_SPI_MspInit+0xf0>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	4a2c      	ldr	r2, [pc, #176]	@ (8002704 <HAL_SPI_MspInit+0xf0>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6313      	str	r3, [r2, #48]	@ 0x30
 800265a:	4b2a      	ldr	r3, [pc, #168]	@ (8002704 <HAL_SPI_MspInit+0xf0>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002666:	4b27      	ldr	r3, [pc, #156]	@ (8002704 <HAL_SPI_MspInit+0xf0>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	4a26      	ldr	r2, [pc, #152]	@ (8002704 <HAL_SPI_MspInit+0xf0>)
 800266c:	f043 0308 	orr.w	r3, r3, #8
 8002670:	6313      	str	r3, [r2, #48]	@ 0x30
 8002672:	4b24      	ldr	r3, [pc, #144]	@ (8002704 <HAL_SPI_MspInit+0xf0>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800267e:	4b21      	ldr	r3, [pc, #132]	@ (8002704 <HAL_SPI_MspInit+0xf0>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	4a20      	ldr	r2, [pc, #128]	@ (8002704 <HAL_SPI_MspInit+0xf0>)
 8002684:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002688:	6313      	str	r3, [r2, #48]	@ 0x30
 800268a:	4b1e      	ldr	r3, [pc, #120]	@ (8002704 <HAL_SPI_MspInit+0xf0>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002696:	2320      	movs	r3, #32
 8002698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269a:	2302      	movs	r3, #2
 800269c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a2:	2303      	movs	r3, #3
 80026a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026a6:	2305      	movs	r3, #5
 80026a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026aa:	f107 031c 	add.w	r3, r7, #28
 80026ae:	4619      	mov	r1, r3
 80026b0:	4815      	ldr	r0, [pc, #84]	@ (8002708 <HAL_SPI_MspInit+0xf4>)
 80026b2:	f001 f98f 	bl	80039d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026b6:	2380      	movs	r3, #128	@ 0x80
 80026b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c2:	2303      	movs	r3, #3
 80026c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026c6:	2305      	movs	r3, #5
 80026c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026ca:	f107 031c 	add.w	r3, r7, #28
 80026ce:	4619      	mov	r1, r3
 80026d0:	480e      	ldr	r0, [pc, #56]	@ (800270c <HAL_SPI_MspInit+0xf8>)
 80026d2:	f001 f97f 	bl	80039d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026dc:	2302      	movs	r3, #2
 80026de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e4:	2303      	movs	r3, #3
 80026e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026e8:	2305      	movs	r3, #5
 80026ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026ec:	f107 031c 	add.w	r3, r7, #28
 80026f0:	4619      	mov	r1, r3
 80026f2:	4807      	ldr	r0, [pc, #28]	@ (8002710 <HAL_SPI_MspInit+0xfc>)
 80026f4:	f001 f96e 	bl	80039d4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80026f8:	bf00      	nop
 80026fa:	3730      	adds	r7, #48	@ 0x30
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40013000 	.word	0x40013000
 8002704:	40023800 	.word	0x40023800
 8002708:	40020000 	.word	0x40020000
 800270c:	40020c00 	.word	0x40020c00
 8002710:	40021800 	.word	0x40021800

08002714 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08e      	sub	sp, #56	@ 0x38
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a3f      	ldr	r2, [pc, #252]	@ (8002830 <HAL_TIM_Base_MspInit+0x11c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d10c      	bne.n	8002750 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002736:	4b3f      	ldr	r3, [pc, #252]	@ (8002834 <HAL_TIM_Base_MspInit+0x120>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273a:	4a3e      	ldr	r2, [pc, #248]	@ (8002834 <HAL_TIM_Base_MspInit+0x120>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	6453      	str	r3, [r2, #68]	@ 0x44
 8002742:	4b3c      	ldr	r3, [pc, #240]	@ (8002834 <HAL_TIM_Base_MspInit+0x120>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	623b      	str	r3, [r7, #32]
 800274c:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 800274e:	e06b      	b.n	8002828 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002758:	d129      	bne.n	80027ae <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800275a:	4b36      	ldr	r3, [pc, #216]	@ (8002834 <HAL_TIM_Base_MspInit+0x120>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	4a35      	ldr	r2, [pc, #212]	@ (8002834 <HAL_TIM_Base_MspInit+0x120>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6413      	str	r3, [r2, #64]	@ 0x40
 8002766:	4b33      	ldr	r3, [pc, #204]	@ (8002834 <HAL_TIM_Base_MspInit+0x120>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002772:	4b30      	ldr	r3, [pc, #192]	@ (8002834 <HAL_TIM_Base_MspInit+0x120>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002776:	4a2f      	ldr	r2, [pc, #188]	@ (8002834 <HAL_TIM_Base_MspInit+0x120>)
 8002778:	f043 0302 	orr.w	r3, r3, #2
 800277c:	6313      	str	r3, [r2, #48]	@ 0x30
 800277e:	4b2d      	ldr	r3, [pc, #180]	@ (8002834 <HAL_TIM_Base_MspInit+0x120>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	61bb      	str	r3, [r7, #24]
 8002788:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 800278a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800278e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002790:	2302      	movs	r3, #2
 8002792:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002798:	2300      	movs	r3, #0
 800279a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800279c:	2301      	movs	r3, #1
 800279e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 80027a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027a4:	4619      	mov	r1, r3
 80027a6:	4824      	ldr	r0, [pc, #144]	@ (8002838 <HAL_TIM_Base_MspInit+0x124>)
 80027a8:	f001 f914 	bl	80039d4 <HAL_GPIO_Init>
}
 80027ac:	e03c      	b.n	8002828 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a22      	ldr	r2, [pc, #136]	@ (800283c <HAL_TIM_Base_MspInit+0x128>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d10c      	bne.n	80027d2 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002834 <HAL_TIM_Base_MspInit+0x120>)
 80027ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002834 <HAL_TIM_Base_MspInit+0x120>)
 80027be:	f043 0308 	orr.w	r3, r3, #8
 80027c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80027c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002834 <HAL_TIM_Base_MspInit+0x120>)
 80027c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	697b      	ldr	r3, [r7, #20]
}
 80027d0:	e02a      	b.n	8002828 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM6)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002840 <HAL_TIM_Base_MspInit+0x12c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d114      	bne.n	8002806 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80027dc:	4b15      	ldr	r3, [pc, #84]	@ (8002834 <HAL_TIM_Base_MspInit+0x120>)
 80027de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e0:	4a14      	ldr	r2, [pc, #80]	@ (8002834 <HAL_TIM_Base_MspInit+0x120>)
 80027e2:	f043 0310 	orr.w	r3, r3, #16
 80027e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80027e8:	4b12      	ldr	r3, [pc, #72]	@ (8002834 <HAL_TIM_Base_MspInit+0x120>)
 80027ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80027f4:	2200      	movs	r2, #0
 80027f6:	2101      	movs	r1, #1
 80027f8:	2036      	movs	r0, #54	@ 0x36
 80027fa:	f001 f8a6 	bl	800394a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80027fe:	2036      	movs	r0, #54	@ 0x36
 8002800:	f001 f8bf 	bl	8003982 <HAL_NVIC_EnableIRQ>
}
 8002804:	e010      	b.n	8002828 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a0e      	ldr	r2, [pc, #56]	@ (8002844 <HAL_TIM_Base_MspInit+0x130>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d10b      	bne.n	8002828 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002810:	4b08      	ldr	r3, [pc, #32]	@ (8002834 <HAL_TIM_Base_MspInit+0x120>)
 8002812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002814:	4a07      	ldr	r2, [pc, #28]	@ (8002834 <HAL_TIM_Base_MspInit+0x120>)
 8002816:	f043 0302 	orr.w	r3, r3, #2
 800281a:	6453      	str	r3, [r2, #68]	@ 0x44
 800281c:	4b05      	ldr	r3, [pc, #20]	@ (8002834 <HAL_TIM_Base_MspInit+0x120>)
 800281e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	68fb      	ldr	r3, [r7, #12]
}
 8002828:	bf00      	nop
 800282a:	3738      	adds	r7, #56	@ 0x38
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40010000 	.word	0x40010000
 8002834:	40023800 	.word	0x40023800
 8002838:	40020400 	.word	0x40020400
 800283c:	40000c00 	.word	0x40000c00
 8002840:	40001000 	.word	0x40001000
 8002844:	40010400 	.word	0x40010400

08002848 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08c      	sub	sp, #48	@ 0x30
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	f107 031c 	add.w	r3, r7, #28
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a2e      	ldr	r2, [pc, #184]	@ (8002920 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d128      	bne.n	80028bc <HAL_TIM_Encoder_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800286a:	4b2e      	ldr	r3, [pc, #184]	@ (8002924 <HAL_TIM_Encoder_MspInit+0xdc>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	4a2d      	ldr	r2, [pc, #180]	@ (8002924 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002870:	f043 0302 	orr.w	r3, r3, #2
 8002874:	6413      	str	r3, [r2, #64]	@ 0x40
 8002876:	4b2b      	ldr	r3, [pc, #172]	@ (8002924 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	61bb      	str	r3, [r7, #24]
 8002880:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002882:	4b28      	ldr	r3, [pc, #160]	@ (8002924 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	4a27      	ldr	r2, [pc, #156]	@ (8002924 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	6313      	str	r3, [r2, #48]	@ 0x30
 800288e:	4b25      	ldr	r3, [pc, #148]	@ (8002924 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 800289a:	2330      	movs	r3, #48	@ 0x30
 800289c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289e:	2302      	movs	r3, #2
 80028a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a6:	2300      	movs	r3, #0
 80028a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028aa:	2302      	movs	r3, #2
 80028ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ae:	f107 031c 	add.w	r3, r7, #28
 80028b2:	4619      	mov	r1, r3
 80028b4:	481c      	ldr	r0, [pc, #112]	@ (8002928 <HAL_TIM_Encoder_MspInit+0xe0>)
 80028b6:	f001 f88d 	bl	80039d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80028ba:	e02d      	b.n	8002918 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a1a      	ldr	r2, [pc, #104]	@ (800292c <HAL_TIM_Encoder_MspInit+0xe4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d128      	bne.n	8002918 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028c6:	4b17      	ldr	r3, [pc, #92]	@ (8002924 <HAL_TIM_Encoder_MspInit+0xdc>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ca:	4a16      	ldr	r2, [pc, #88]	@ (8002924 <HAL_TIM_Encoder_MspInit+0xdc>)
 80028cc:	f043 0304 	orr.w	r3, r3, #4
 80028d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028d2:	4b14      	ldr	r3, [pc, #80]	@ (8002924 <HAL_TIM_Encoder_MspInit+0xdc>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028de:	4b11      	ldr	r3, [pc, #68]	@ (8002924 <HAL_TIM_Encoder_MspInit+0xdc>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	4a10      	ldr	r2, [pc, #64]	@ (8002924 <HAL_TIM_Encoder_MspInit+0xdc>)
 80028e4:	f043 0308 	orr.w	r3, r3, #8
 80028e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002924 <HAL_TIM_Encoder_MspInit+0xdc>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 80028f6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80028fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fc:	2302      	movs	r3, #2
 80028fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	2300      	movs	r3, #0
 8002902:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002904:	2300      	movs	r3, #0
 8002906:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002908:	2302      	movs	r3, #2
 800290a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800290c:	f107 031c 	add.w	r3, r7, #28
 8002910:	4619      	mov	r1, r3
 8002912:	4807      	ldr	r0, [pc, #28]	@ (8002930 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002914:	f001 f85e 	bl	80039d4 <HAL_GPIO_Init>
}
 8002918:	bf00      	nop
 800291a:	3730      	adds	r7, #48	@ 0x30
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40000400 	.word	0x40000400
 8002924:	40023800 	.word	0x40023800
 8002928:	40020400 	.word	0x40020400
 800292c:	40000800 	.word	0x40000800
 8002930:	40020c00 	.word	0x40020c00

08002934 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a0a      	ldr	r2, [pc, #40]	@ (800296c <HAL_TIM_PWM_MspInit+0x38>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d10b      	bne.n	800295e <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM9_MspInit 0 */

    /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002946:	4b0a      	ldr	r3, [pc, #40]	@ (8002970 <HAL_TIM_PWM_MspInit+0x3c>)
 8002948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294a:	4a09      	ldr	r2, [pc, #36]	@ (8002970 <HAL_TIM_PWM_MspInit+0x3c>)
 800294c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002950:	6453      	str	r3, [r2, #68]	@ 0x44
 8002952:	4b07      	ldr	r3, [pc, #28]	@ (8002970 <HAL_TIM_PWM_MspInit+0x3c>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002956:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM9_MspInit 1 */

  }

}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40014000 	.word	0x40014000
 8002970:	40023800 	.word	0x40023800

08002974 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08c      	sub	sp, #48	@ 0x30
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	f107 031c 	add.w	r3, r7, #28
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a56      	ldr	r2, [pc, #344]	@ (8002aec <HAL_TIM_MspPostInit+0x178>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d11d      	bne.n	80029d2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002996:	4b56      	ldr	r3, [pc, #344]	@ (8002af0 <HAL_TIM_MspPostInit+0x17c>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299a:	4a55      	ldr	r2, [pc, #340]	@ (8002af0 <HAL_TIM_MspPostInit+0x17c>)
 800299c:	f043 0310 	orr.w	r3, r3, #16
 80029a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029a2:	4b53      	ldr	r3, [pc, #332]	@ (8002af0 <HAL_TIM_MspPostInit+0x17c>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	61bb      	str	r3, [r7, #24]
 80029ac:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 80029ae:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80029b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b4:	2302      	movs	r3, #2
 80029b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029bc:	2300      	movs	r3, #0
 80029be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029c0:	2301      	movs	r3, #1
 80029c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029c4:	f107 031c 	add.w	r3, r7, #28
 80029c8:	4619      	mov	r1, r3
 80029ca:	484a      	ldr	r0, [pc, #296]	@ (8002af4 <HAL_TIM_MspPostInit+0x180>)
 80029cc:	f001 f802 	bl	80039d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM9_MspPostInit 1 */

    /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80029d0:	e088      	b.n	8002ae4 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029da:	d11d      	bne.n	8002a18 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029dc:	4b44      	ldr	r3, [pc, #272]	@ (8002af0 <HAL_TIM_MspPostInit+0x17c>)
 80029de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e0:	4a43      	ldr	r2, [pc, #268]	@ (8002af0 <HAL_TIM_MspPostInit+0x17c>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e8:	4b41      	ldr	r3, [pc, #260]	@ (8002af0 <HAL_TIM_MspPostInit+0x17c>)
 80029ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 80029f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fa:	2302      	movs	r3, #2
 80029fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a02:	2300      	movs	r3, #0
 8002a04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a06:	2301      	movs	r3, #1
 8002a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8002a0a:	f107 031c 	add.w	r3, r7, #28
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4839      	ldr	r0, [pc, #228]	@ (8002af8 <HAL_TIM_MspPostInit+0x184>)
 8002a12:	f000 ffdf 	bl	80039d4 <HAL_GPIO_Init>
}
 8002a16:	e065      	b.n	8002ae4 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a37      	ldr	r2, [pc, #220]	@ (8002afc <HAL_TIM_MspPostInit+0x188>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d11c      	bne.n	8002a5c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a22:	4b33      	ldr	r3, [pc, #204]	@ (8002af0 <HAL_TIM_MspPostInit+0x17c>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	4a32      	ldr	r2, [pc, #200]	@ (8002af0 <HAL_TIM_MspPostInit+0x17c>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2e:	4b30      	ldr	r3, [pc, #192]	@ (8002af0 <HAL_TIM_MspPostInit+0x17c>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a46:	2300      	movs	r3, #0
 8002a48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 8002a4e:	f107 031c 	add.w	r3, r7, #28
 8002a52:	4619      	mov	r1, r3
 8002a54:	4828      	ldr	r0, [pc, #160]	@ (8002af8 <HAL_TIM_MspPostInit+0x184>)
 8002a56:	f000 ffbd 	bl	80039d4 <HAL_GPIO_Init>
}
 8002a5a:	e043      	b.n	8002ae4 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a27      	ldr	r2, [pc, #156]	@ (8002b00 <HAL_TIM_MspPostInit+0x18c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d11d      	bne.n	8002aa2 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a66:	4b22      	ldr	r3, [pc, #136]	@ (8002af0 <HAL_TIM_MspPostInit+0x17c>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	4a21      	ldr	r2, [pc, #132]	@ (8002af0 <HAL_TIM_MspPostInit+0x17c>)
 8002a6c:	f043 0304 	orr.w	r3, r3, #4
 8002a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a72:	4b1f      	ldr	r3, [pc, #124]	@ (8002af0 <HAL_TIM_MspPostInit+0x17c>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 8002a7e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a84:	2302      	movs	r3, #2
 8002a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002a90:	2303      	movs	r3, #3
 8002a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a94:	f107 031c 	add.w	r3, r7, #28
 8002a98:	4619      	mov	r1, r3
 8002a9a:	481a      	ldr	r0, [pc, #104]	@ (8002b04 <HAL_TIM_MspPostInit+0x190>)
 8002a9c:	f000 ff9a 	bl	80039d4 <HAL_GPIO_Init>
}
 8002aa0:	e020      	b.n	8002ae4 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a18      	ldr	r2, [pc, #96]	@ (8002b08 <HAL_TIM_MspPostInit+0x194>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d11b      	bne.n	8002ae4 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aac:	4b10      	ldr	r3, [pc, #64]	@ (8002af0 <HAL_TIM_MspPostInit+0x17c>)
 8002aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8002af0 <HAL_TIM_MspPostInit+0x17c>)
 8002ab2:	f043 0310 	orr.w	r3, r3, #16
 8002ab6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8002af0 <HAL_TIM_MspPostInit+0x17c>)
 8002aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 8002ac4:	2360      	movs	r3, #96	@ 0x60
 8002ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ad8:	f107 031c 	add.w	r3, r7, #28
 8002adc:	4619      	mov	r1, r3
 8002ade:	4805      	ldr	r0, [pc, #20]	@ (8002af4 <HAL_TIM_MspPostInit+0x180>)
 8002ae0:	f000 ff78 	bl	80039d4 <HAL_GPIO_Init>
}
 8002ae4:	bf00      	nop
 8002ae6:	3730      	adds	r7, #48	@ 0x30
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40010000 	.word	0x40010000
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40020000 	.word	0x40020000
 8002afc:	40000c00 	.word	0x40000c00
 8002b00:	40010400 	.word	0x40010400
 8002b04:	40020800 	.word	0x40020800
 8002b08:	40014000 	.word	0x40014000

08002b0c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b0b6      	sub	sp, #216	@ 0xd8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b14:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	60da      	str	r2, [r3, #12]
 8002b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b24:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002b28:	2290      	movs	r2, #144	@ 0x90
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f006 fd17 	bl	8009560 <memset>
  if(huart->Instance==UART4)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4aa0      	ldr	r2, [pc, #640]	@ (8002db8 <HAL_UART_MspInit+0x2ac>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d13e      	bne.n	8002bba <HAL_UART_MspInit+0xae>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002b3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b40:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002b42:	2300      	movs	r3, #0
 8002b44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b48:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f002 fc79 	bl	8005444 <HAL_RCCEx_PeriphCLKConfig>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002b58:	f7ff face 	bl	80020f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002b5c:	4b97      	ldr	r3, [pc, #604]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b60:	4a96      	ldr	r2, [pc, #600]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002b62:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002b66:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b68:	4b94      	ldr	r3, [pc, #592]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b70:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b74:	4b91      	ldr	r3, [pc, #580]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b78:	4a90      	ldr	r2, [pc, #576]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002b7a:	f043 0304 	orr.w	r3, r3, #4
 8002b7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b80:	4b8e      	ldr	r3, [pc, #568]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 8002b8c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002b90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b94:	2302      	movs	r3, #2
 8002b96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002ba6:	2308      	movs	r3, #8
 8002ba8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bac:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4883      	ldr	r0, [pc, #524]	@ (8002dc0 <HAL_UART_MspInit+0x2b4>)
 8002bb4:	f000 ff0e 	bl	80039d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002bb8:	e151      	b.n	8002e5e <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a81      	ldr	r2, [pc, #516]	@ (8002dc4 <HAL_UART_MspInit+0x2b8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d160      	bne.n	8002c86 <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002bc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bc8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bd0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f002 fc35 	bl	8005444 <HAL_RCCEx_PeriphCLKConfig>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002be0:	f7ff fa8a 	bl	80020f8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002be4:	4b75      	ldr	r3, [pc, #468]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be8:	4a74      	ldr	r2, [pc, #464]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002bea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bee:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bf0:	4b72      	ldr	r3, [pc, #456]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfc:	4b6f      	ldr	r3, [pc, #444]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c00:	4a6e      	ldr	r2, [pc, #440]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002c02:	f043 0302 	orr.w	r3, r3, #2
 8002c06:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c08:	4b6c      	ldr	r3, [pc, #432]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c14:	4b69      	ldr	r3, [pc, #420]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c18:	4a68      	ldr	r2, [pc, #416]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002c1a:	f043 0304 	orr.w	r3, r3, #4
 8002c1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c20:	4b66      	ldr	r3, [pc, #408]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	623b      	str	r3, [r7, #32]
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c34:	2302      	movs	r3, #2
 8002c36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c40:	2303      	movs	r3, #3
 8002c42:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002c46:	2308      	movs	r3, #8
 8002c48:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002c50:	4619      	mov	r1, r3
 8002c52:	485d      	ldr	r0, [pc, #372]	@ (8002dc8 <HAL_UART_MspInit+0x2bc>)
 8002c54:	f000 febe 	bl	80039d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c5c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c60:	2302      	movs	r3, #2
 8002c62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002c72:	2308      	movs	r3, #8
 8002c74:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c78:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4850      	ldr	r0, [pc, #320]	@ (8002dc0 <HAL_UART_MspInit+0x2b4>)
 8002c80:	f000 fea8 	bl	80039d4 <HAL_GPIO_Init>
}
 8002c84:	e0eb      	b.n	8002e5e <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a50      	ldr	r2, [pc, #320]	@ (8002dcc <HAL_UART_MspInit+0x2c0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d151      	bne.n	8002d34 <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c90:	2340      	movs	r3, #64	@ 0x40
 8002c92:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c94:	2300      	movs	r3, #0
 8002c96:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c98:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f002 fbd1 	bl	8005444 <HAL_RCCEx_PeriphCLKConfig>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8002ca8:	f7ff fa26 	bl	80020f8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cac:	4b43      	ldr	r3, [pc, #268]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb0:	4a42      	ldr	r2, [pc, #264]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002cb2:	f043 0310 	orr.w	r3, r3, #16
 8002cb6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cb8:	4b40      	ldr	r3, [pc, #256]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	61fb      	str	r3, [r7, #28]
 8002cc2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc4:	4b3d      	ldr	r3, [pc, #244]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc8:	4a3c      	ldr	r2, [pc, #240]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002cca:	f043 0302 	orr.w	r3, r3, #2
 8002cce:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cd0:	4b3a      	ldr	r3, [pc, #232]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	61bb      	str	r3, [r7, #24]
 8002cda:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002cdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ce0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cfc:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002d00:	4619      	mov	r1, r3
 8002d02:	4831      	ldr	r0, [pc, #196]	@ (8002dc8 <HAL_UART_MspInit+0x2bc>)
 8002d04:	f000 fe66 	bl	80039d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d08:	2340      	movs	r3, #64	@ 0x40
 8002d0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d20:	2307      	movs	r3, #7
 8002d22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d26:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4826      	ldr	r0, [pc, #152]	@ (8002dc8 <HAL_UART_MspInit+0x2bc>)
 8002d2e:	f000 fe51 	bl	80039d4 <HAL_GPIO_Init>
}
 8002d32:	e094      	b.n	8002e5e <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a25      	ldr	r2, [pc, #148]	@ (8002dd0 <HAL_UART_MspInit+0x2c4>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d14c      	bne.n	8002dd8 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d3e:	2380      	movs	r3, #128	@ 0x80
 8002d40:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002d42:	2300      	movs	r3, #0
 8002d44:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d46:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f002 fb7a 	bl	8005444 <HAL_RCCEx_PeriphCLKConfig>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_UART_MspInit+0x24e>
      Error_Handler();
 8002d56:	f7ff f9cf 	bl	80020f8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d5a:	4b18      	ldr	r3, [pc, #96]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	4a17      	ldr	r2, [pc, #92]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d66:	4b15      	ldr	r3, [pc, #84]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d72:	4b12      	ldr	r3, [pc, #72]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d76:	4a11      	ldr	r2, [pc, #68]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002d78:	f043 0308 	orr.w	r3, r3, #8
 8002d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8002dbc <HAL_UART_MspInit+0x2b0>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002d8a:	2360      	movs	r3, #96	@ 0x60
 8002d8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d90:	2302      	movs	r3, #2
 8002d92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002da2:	2307      	movs	r3, #7
 8002da4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002da8:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002dac:	4619      	mov	r1, r3
 8002dae:	4809      	ldr	r0, [pc, #36]	@ (8002dd4 <HAL_UART_MspInit+0x2c8>)
 8002db0:	f000 fe10 	bl	80039d4 <HAL_GPIO_Init>
}
 8002db4:	e053      	b.n	8002e5e <HAL_UART_MspInit+0x352>
 8002db6:	bf00      	nop
 8002db8:	40004c00 	.word	0x40004c00
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	40020800 	.word	0x40020800
 8002dc4:	40005000 	.word	0x40005000
 8002dc8:	40020400 	.word	0x40020400
 8002dcc:	40011000 	.word	0x40011000
 8002dd0:	40004400 	.word	0x40004400
 8002dd4:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a22      	ldr	r2, [pc, #136]	@ (8002e68 <HAL_UART_MspInit+0x35c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d13d      	bne.n	8002e5e <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002de2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002de6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002de8:	2300      	movs	r3, #0
 8002dea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002df2:	4618      	mov	r0, r3
 8002df4:	f002 fb26 	bl	8005444 <HAL_RCCEx_PeriphCLKConfig>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8002dfe:	f7ff f97b 	bl	80020f8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e02:	4b1a      	ldr	r3, [pc, #104]	@ (8002e6c <HAL_UART_MspInit+0x360>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e06:	4a19      	ldr	r2, [pc, #100]	@ (8002e6c <HAL_UART_MspInit+0x360>)
 8002e08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e0e:	4b17      	ldr	r3, [pc, #92]	@ (8002e6c <HAL_UART_MspInit+0x360>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e1a:	4b14      	ldr	r3, [pc, #80]	@ (8002e6c <HAL_UART_MspInit+0x360>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1e:	4a13      	ldr	r2, [pc, #76]	@ (8002e6c <HAL_UART_MspInit+0x360>)
 8002e20:	f043 0308 	orr.w	r3, r3, #8
 8002e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e26:	4b11      	ldr	r3, [pc, #68]	@ (8002e6c <HAL_UART_MspInit+0x360>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002e32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e36:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e46:	2303      	movs	r3, #3
 8002e48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e4c:	2307      	movs	r3, #7
 8002e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e52:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002e56:	4619      	mov	r1, r3
 8002e58:	4805      	ldr	r0, [pc, #20]	@ (8002e70 <HAL_UART_MspInit+0x364>)
 8002e5a:	f000 fdbb 	bl	80039d4 <HAL_GPIO_Init>
}
 8002e5e:	bf00      	nop
 8002e60:	37d8      	adds	r7, #216	@ 0xd8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40004800 	.word	0x40004800
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40020c00 	.word	0x40020c00

08002e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e78:	bf00      	nop
 8002e7a:	e7fd      	b.n	8002e78 <NMI_Handler+0x4>

08002e7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  static uint32_t kLed = 0;
	  if(++kLed >= 100000)
 8002e80:	4b09      	ldr	r3, [pc, #36]	@ (8002ea8 <HardFault_Handler+0x2c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3301      	adds	r3, #1
 8002e86:	4a08      	ldr	r2, [pc, #32]	@ (8002ea8 <HardFault_Handler+0x2c>)
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	4b07      	ldr	r3, [pc, #28]	@ (8002ea8 <HardFault_Handler+0x2c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a07      	ldr	r2, [pc, #28]	@ (8002eac <HardFault_Handler+0x30>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d9f5      	bls.n	8002e80 <HardFault_Handler+0x4>
	  {
		  kLed = 0;
 8002e94:	4b04      	ldr	r3, [pc, #16]	@ (8002ea8 <HardFault_Handler+0x2c>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002e9a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002e9e:	4804      	ldr	r0, [pc, #16]	@ (8002eb0 <HardFault_Handler+0x34>)
 8002ea0:	f000 ff5d 	bl	8003d5e <HAL_GPIO_TogglePin>
  {
 8002ea4:	e7ec      	b.n	8002e80 <HardFault_Handler+0x4>
 8002ea6:	bf00      	nop
 8002ea8:	20000958 	.word	0x20000958
 8002eac:	0001869f 	.word	0x0001869f
 8002eb0:	40020400 	.word	0x40020400

08002eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002eb8:	bf00      	nop
 8002eba:	e7fd      	b.n	8002eb8 <MemManage_Handler+0x4>

08002ebc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ec0:	bf00      	nop
 8002ec2:	e7fd      	b.n	8002ec0 <BusFault_Handler+0x4>

08002ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ec8:	bf00      	nop
 8002eca:	e7fd      	b.n	8002ec8 <UsageFault_Handler+0x4>

08002ecc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ed0:	bf00      	nop
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eda:	b480      	push	{r7}
 8002edc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002efa:	f000 f94f 	bl	800319c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002efe:	bf00      	nop
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f08:	4802      	ldr	r0, [pc, #8]	@ (8002f14 <TIM6_DAC_IRQHandler+0x10>)
 8002f0a:	f003 fb85 	bl	8006618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	200004e0 	.word	0x200004e0

08002f18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
	return 1;
 8002f1c:	2301      	movs	r3, #1
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <_kill>:

int _kill(int pid, int sig)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f32:	f006 fb75 	bl	8009620 <__errno>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2216      	movs	r2, #22
 8002f3a:	601a      	str	r2, [r3, #0]
	return -1;
 8002f3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <_exit>:

void _exit (int status)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f50:	f04f 31ff 	mov.w	r1, #4294967295
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff ffe7 	bl	8002f28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f5a:	bf00      	nop
 8002f5c:	e7fd      	b.n	8002f5a <_exit+0x12>

08002f5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b086      	sub	sp, #24
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	e00a      	b.n	8002f86 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f70:	f3af 8000 	nop.w
 8002f74:	4601      	mov	r1, r0
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	60ba      	str	r2, [r7, #8]
 8002f7c:	b2ca      	uxtb	r2, r1
 8002f7e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	3301      	adds	r3, #1
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	dbf0      	blt.n	8002f70 <_read+0x12>
	}

return len;
 8002f8e:	687b      	ldr	r3, [r7, #4]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	e009      	b.n	8002fbe <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	60ba      	str	r2, [r7, #8]
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	dbf1      	blt.n	8002faa <_write+0x12>
	}
	return len;
 8002fc6:	687b      	ldr	r3, [r7, #4]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <_close>:

int _close(int file)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	return -1;
 8002fd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ff8:	605a      	str	r2, [r3, #4]
	return 0;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <_isatty>:

int _isatty(int file)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
	return 1;
 8003010:	2301      	movs	r3, #1
}
 8003012:	4618      	mov	r0, r3
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800301e:	b480      	push	{r7}
 8003020:	b085      	sub	sp, #20
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
	return 0;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003040:	4a14      	ldr	r2, [pc, #80]	@ (8003094 <_sbrk+0x5c>)
 8003042:	4b15      	ldr	r3, [pc, #84]	@ (8003098 <_sbrk+0x60>)
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800304c:	4b13      	ldr	r3, [pc, #76]	@ (800309c <_sbrk+0x64>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d102      	bne.n	800305a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003054:	4b11      	ldr	r3, [pc, #68]	@ (800309c <_sbrk+0x64>)
 8003056:	4a12      	ldr	r2, [pc, #72]	@ (80030a0 <_sbrk+0x68>)
 8003058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800305a:	4b10      	ldr	r3, [pc, #64]	@ (800309c <_sbrk+0x64>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4413      	add	r3, r2
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	429a      	cmp	r2, r3
 8003066:	d207      	bcs.n	8003078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003068:	f006 fada 	bl	8009620 <__errno>
 800306c:	4603      	mov	r3, r0
 800306e:	220c      	movs	r2, #12
 8003070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003072:	f04f 33ff 	mov.w	r3, #4294967295
 8003076:	e009      	b.n	800308c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003078:	4b08      	ldr	r3, [pc, #32]	@ (800309c <_sbrk+0x64>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800307e:	4b07      	ldr	r3, [pc, #28]	@ (800309c <_sbrk+0x64>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	4a05      	ldr	r2, [pc, #20]	@ (800309c <_sbrk+0x64>)
 8003088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800308a:	68fb      	ldr	r3, [r7, #12]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20080000 	.word	0x20080000
 8003098:	00000400 	.word	0x00000400
 800309c:	2000095c 	.word	0x2000095c
 80030a0:	20000ab0 	.word	0x20000ab0

080030a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030a8:	4b08      	ldr	r3, [pc, #32]	@ (80030cc <SystemInit+0x28>)
 80030aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ae:	4a07      	ldr	r2, [pc, #28]	@ (80030cc <SystemInit+0x28>)
 80030b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030b8:	4b04      	ldr	r3, [pc, #16]	@ (80030cc <SystemInit+0x28>)
 80030ba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80030be:	609a      	str	r2, [r3, #8]
#endif
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	e000ed00 	.word	0xe000ed00

080030d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80030d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003108 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80030d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80030d6:	e003      	b.n	80030e0 <LoopCopyDataInit>

080030d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80030d8:	4b0c      	ldr	r3, [pc, #48]	@ (800310c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80030da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80030dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80030de:	3104      	adds	r1, #4

080030e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80030e0:	480b      	ldr	r0, [pc, #44]	@ (8003110 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80030e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003114 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80030e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80030e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80030e8:	d3f6      	bcc.n	80030d8 <CopyDataInit>
  ldr  r2, =_sbss
 80030ea:	4a0b      	ldr	r2, [pc, #44]	@ (8003118 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80030ec:	e002      	b.n	80030f4 <LoopFillZerobss>

080030ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80030ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80030f0:	f842 3b04 	str.w	r3, [r2], #4

080030f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80030f4:	4b09      	ldr	r3, [pc, #36]	@ (800311c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80030f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80030f8:	d3f9      	bcc.n	80030ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80030fa:	f7ff ffd3 	bl	80030a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030fe:	f006 fa95 	bl	800962c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003102:	f7fd fdfd 	bl	8000d00 <main>
  bx  lr    
 8003106:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003108:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800310c:	0800b64c 	.word	0x0800b64c
  ldr  r0, =_sdata
 8003110:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003114:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8003118:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 800311c:	20000ab0 	.word	0x20000ab0

08003120 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003120:	e7fe      	b.n	8003120 <ADC_IRQHandler>

08003122 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003126:	2003      	movs	r0, #3
 8003128:	f000 fc04 	bl	8003934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800312c:	2000      	movs	r0, #0
 800312e:	f000 f805 	bl	800313c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003132:	f7ff f963 	bl	80023fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003144:	4b12      	ldr	r3, [pc, #72]	@ (8003190 <HAL_InitTick+0x54>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4b12      	ldr	r3, [pc, #72]	@ (8003194 <HAL_InitTick+0x58>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	4619      	mov	r1, r3
 800314e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003152:	fbb3 f3f1 	udiv	r3, r3, r1
 8003156:	fbb2 f3f3 	udiv	r3, r2, r3
 800315a:	4618      	mov	r0, r3
 800315c:	f000 fc2d 	bl	80039ba <HAL_SYSTICK_Config>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e00e      	b.n	8003188 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b0f      	cmp	r3, #15
 800316e:	d80a      	bhi.n	8003186 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003170:	2200      	movs	r2, #0
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	f04f 30ff 	mov.w	r0, #4294967295
 8003178:	f000 fbe7 	bl	800394a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800317c:	4a06      	ldr	r2, [pc, #24]	@ (8003198 <HAL_InitTick+0x5c>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	e000      	b.n	8003188 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
}
 8003188:	4618      	mov	r0, r3
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	20000020 	.word	0x20000020
 8003194:	20000028 	.word	0x20000028
 8003198:	20000024 	.word	0x20000024

0800319c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031a0:	4b06      	ldr	r3, [pc, #24]	@ (80031bc <HAL_IncTick+0x20>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <HAL_IncTick+0x24>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4413      	add	r3, r2
 80031ac:	4a04      	ldr	r2, [pc, #16]	@ (80031c0 <HAL_IncTick+0x24>)
 80031ae:	6013      	str	r3, [r2, #0]
}
 80031b0:	bf00      	nop
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	20000028 	.word	0x20000028
 80031c0:	20000960 	.word	0x20000960

080031c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  return uwTick;
 80031c8:	4b03      	ldr	r3, [pc, #12]	@ (80031d8 <HAL_GetTick+0x14>)
 80031ca:	681b      	ldr	r3, [r3, #0]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	20000960 	.word	0x20000960

080031dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031e4:	f7ff ffee 	bl	80031c4 <HAL_GetTick>
 80031e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f4:	d005      	beq.n	8003202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003220 <HAL_Delay+0x44>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4413      	add	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003202:	bf00      	nop
 8003204:	f7ff ffde 	bl	80031c4 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	429a      	cmp	r2, r3
 8003212:	d8f7      	bhi.n	8003204 <HAL_Delay+0x28>
  {
  }
}
 8003214:	bf00      	nop
 8003216:	bf00      	nop
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20000028 	.word	0x20000028

08003224 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800322c:	2300      	movs	r3, #0
 800322e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e031      	b.n	800329e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	2b00      	cmp	r3, #0
 8003240:	d109      	bne.n	8003256 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff f8fe 	bl	8002444 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b00      	cmp	r3, #0
 8003260:	d116      	bne.n	8003290 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003266:	4b10      	ldr	r3, [pc, #64]	@ (80032a8 <HAL_ADC_Init+0x84>)
 8003268:	4013      	ands	r3, r2
 800326a:	f043 0202 	orr.w	r2, r3, #2
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f970 	bl	8003558 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003282:	f023 0303 	bic.w	r3, r3, #3
 8003286:	f043 0201 	orr.w	r2, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	641a      	str	r2, [r3, #64]	@ 0x40
 800328e:	e001      	b.n	8003294 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800329c:	7bfb      	ldrb	r3, [r7, #15]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	ffffeefd 	.word	0xffffeefd

080032ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x1c>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e136      	b.n	8003536 <HAL_ADC_ConfigChannel+0x28a>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b09      	cmp	r3, #9
 80032d6:	d93a      	bls.n	800334e <HAL_ADC_ConfigChannel+0xa2>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80032e0:	d035      	beq.n	800334e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68d9      	ldr	r1, [r3, #12]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	461a      	mov	r2, r3
 80032f0:	4613      	mov	r3, r2
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	4413      	add	r3, r2
 80032f6:	3b1e      	subs	r3, #30
 80032f8:	2207      	movs	r2, #7
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43da      	mvns	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	400a      	ands	r2, r1
 8003306:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a8d      	ldr	r2, [pc, #564]	@ (8003544 <HAL_ADC_ConfigChannel+0x298>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d10a      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68d9      	ldr	r1, [r3, #12]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	061a      	lsls	r2, r3, #24
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003326:	e035      	b.n	8003394 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68d9      	ldr	r1, [r3, #12]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	b29b      	uxth	r3, r3
 8003338:	4618      	mov	r0, r3
 800333a:	4603      	mov	r3, r0
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	4403      	add	r3, r0
 8003340:	3b1e      	subs	r3, #30
 8003342:	409a      	lsls	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800334c:	e022      	b.n	8003394 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6919      	ldr	r1, [r3, #16]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	b29b      	uxth	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	4613      	mov	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4413      	add	r3, r2
 8003362:	2207      	movs	r2, #7
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43da      	mvns	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	400a      	ands	r2, r1
 8003370:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6919      	ldr	r1, [r3, #16]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	b29b      	uxth	r3, r3
 8003382:	4618      	mov	r0, r3
 8003384:	4603      	mov	r3, r0
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	4403      	add	r3, r0
 800338a:	409a      	lsls	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b06      	cmp	r3, #6
 800339a:	d824      	bhi.n	80033e6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	3b05      	subs	r3, #5
 80033ae:	221f      	movs	r2, #31
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43da      	mvns	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	400a      	ands	r2, r1
 80033bc:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	4618      	mov	r0, r3
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	3b05      	subs	r3, #5
 80033d8:	fa00 f203 	lsl.w	r2, r0, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80033e4:	e04c      	b.n	8003480 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b0c      	cmp	r3, #12
 80033ec:	d824      	bhi.n	8003438 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	3b23      	subs	r3, #35	@ 0x23
 8003400:	221f      	movs	r2, #31
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	43da      	mvns	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	400a      	ands	r2, r1
 800340e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	b29b      	uxth	r3, r3
 800341c:	4618      	mov	r0, r3
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	3b23      	subs	r3, #35	@ 0x23
 800342a:	fa00 f203 	lsl.w	r2, r0, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	631a      	str	r2, [r3, #48]	@ 0x30
 8003436:	e023      	b.n	8003480 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	3b41      	subs	r3, #65	@ 0x41
 800344a:	221f      	movs	r2, #31
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43da      	mvns	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	400a      	ands	r2, r1
 8003458:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	b29b      	uxth	r3, r3
 8003466:	4618      	mov	r0, r3
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	3b41      	subs	r3, #65	@ 0x41
 8003474:	fa00 f203 	lsl.w	r2, r0, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a30      	ldr	r2, [pc, #192]	@ (8003548 <HAL_ADC_ConfigChannel+0x29c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d10a      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x1f4>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003492:	d105      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003494:	4b2d      	ldr	r3, [pc, #180]	@ (800354c <HAL_ADC_ConfigChannel+0x2a0>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	4a2c      	ldr	r2, [pc, #176]	@ (800354c <HAL_ADC_ConfigChannel+0x2a0>)
 800349a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800349e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a28      	ldr	r2, [pc, #160]	@ (8003548 <HAL_ADC_ConfigChannel+0x29c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d10f      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x21e>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b12      	cmp	r3, #18
 80034b0:	d10b      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80034b2:	4b26      	ldr	r3, [pc, #152]	@ (800354c <HAL_ADC_ConfigChannel+0x2a0>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	4a25      	ldr	r2, [pc, #148]	@ (800354c <HAL_ADC_ConfigChannel+0x2a0>)
 80034b8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80034bc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80034be:	4b23      	ldr	r3, [pc, #140]	@ (800354c <HAL_ADC_ConfigChannel+0x2a0>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	4a22      	ldr	r2, [pc, #136]	@ (800354c <HAL_ADC_ConfigChannel+0x2a0>)
 80034c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034c8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003548 <HAL_ADC_ConfigChannel+0x29c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d12b      	bne.n	800352c <HAL_ADC_ConfigChannel+0x280>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003544 <HAL_ADC_ConfigChannel+0x298>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d003      	beq.n	80034e6 <HAL_ADC_ConfigChannel+0x23a>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b11      	cmp	r3, #17
 80034e4:	d122      	bne.n	800352c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80034e6:	4b19      	ldr	r3, [pc, #100]	@ (800354c <HAL_ADC_ConfigChannel+0x2a0>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	4a18      	ldr	r2, [pc, #96]	@ (800354c <HAL_ADC_ConfigChannel+0x2a0>)
 80034ec:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80034f0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80034f2:	4b16      	ldr	r3, [pc, #88]	@ (800354c <HAL_ADC_ConfigChannel+0x2a0>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	4a15      	ldr	r2, [pc, #84]	@ (800354c <HAL_ADC_ConfigChannel+0x2a0>)
 80034f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034fc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a10      	ldr	r2, [pc, #64]	@ (8003544 <HAL_ADC_ConfigChannel+0x298>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d111      	bne.n	800352c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003508:	4b11      	ldr	r3, [pc, #68]	@ (8003550 <HAL_ADC_ConfigChannel+0x2a4>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a11      	ldr	r2, [pc, #68]	@ (8003554 <HAL_ADC_ConfigChannel+0x2a8>)
 800350e:	fba2 2303 	umull	r2, r3, r2, r3
 8003512:	0c9a      	lsrs	r2, r3, #18
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800351e:	e002      	b.n	8003526 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	3b01      	subs	r3, #1
 8003524:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1f9      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	10000012 	.word	0x10000012
 8003548:	40012000 	.word	0x40012000
 800354c:	40012300 	.word	0x40012300
 8003550:	20000020 	.word	0x20000020
 8003554:	431bde83 	.word	0x431bde83

08003558 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003560:	4b78      	ldr	r3, [pc, #480]	@ (8003744 <ADC_Init+0x1ec>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	4a77      	ldr	r2, [pc, #476]	@ (8003744 <ADC_Init+0x1ec>)
 8003566:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800356a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800356c:	4b75      	ldr	r3, [pc, #468]	@ (8003744 <ADC_Init+0x1ec>)
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4973      	ldr	r1, [pc, #460]	@ (8003744 <ADC_Init+0x1ec>)
 8003576:	4313      	orrs	r3, r2
 8003578:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003588:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6859      	ldr	r1, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	021a      	lsls	r2, r3, #8
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80035ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6859      	ldr	r1, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6899      	ldr	r1, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e6:	4a58      	ldr	r2, [pc, #352]	@ (8003748 <ADC_Init+0x1f0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d022      	beq.n	8003632 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6899      	ldr	r1, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800361c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6899      	ldr	r1, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	e00f      	b.n	8003652 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003640:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003650:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0202 	bic.w	r2, r2, #2
 8003660:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6899      	ldr	r1, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	005a      	lsls	r2, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3020 	ldrb.w	r3, [r3, #32]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d01b      	beq.n	80036b8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800368e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800369e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6859      	ldr	r1, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036aa:	3b01      	subs	r3, #1
 80036ac:	035a      	lsls	r2, r3, #13
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	e007      	b.n	80036c8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80036d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	051a      	lsls	r2, r3, #20
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80036fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6899      	ldr	r1, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800370a:	025a      	lsls	r2, r3, #9
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003722:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6899      	ldr	r1, [r3, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	029a      	lsls	r2, r3, #10
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	609a      	str	r2, [r3, #8]
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	40012300 	.word	0x40012300
 8003748:	0f000001 	.word	0x0f000001

0800374c <__NVIC_SetPriorityGrouping>:
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800375c:	4b0b      	ldr	r3, [pc, #44]	@ (800378c <__NVIC_SetPriorityGrouping+0x40>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003768:	4013      	ands	r3, r2
 800376a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003774:	4b06      	ldr	r3, [pc, #24]	@ (8003790 <__NVIC_SetPriorityGrouping+0x44>)
 8003776:	4313      	orrs	r3, r2
 8003778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800377a:	4a04      	ldr	r2, [pc, #16]	@ (800378c <__NVIC_SetPriorityGrouping+0x40>)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	60d3      	str	r3, [r2, #12]
}
 8003780:	bf00      	nop
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	e000ed00 	.word	0xe000ed00
 8003790:	05fa0000 	.word	0x05fa0000

08003794 <__NVIC_GetPriorityGrouping>:
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003798:	4b04      	ldr	r3, [pc, #16]	@ (80037ac <__NVIC_GetPriorityGrouping+0x18>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	0a1b      	lsrs	r3, r3, #8
 800379e:	f003 0307 	and.w	r3, r3, #7
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	e000ed00 	.word	0xe000ed00

080037b0 <__NVIC_EnableIRQ>:
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	db0b      	blt.n	80037da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	f003 021f 	and.w	r2, r3, #31
 80037c8:	4907      	ldr	r1, [pc, #28]	@ (80037e8 <__NVIC_EnableIRQ+0x38>)
 80037ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	2001      	movs	r0, #1
 80037d2:	fa00 f202 	lsl.w	r2, r0, r2
 80037d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	e000e100 	.word	0xe000e100

080037ec <__NVIC_DisableIRQ>:
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	db12      	blt.n	8003824 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	f003 021f 	and.w	r2, r3, #31
 8003804:	490a      	ldr	r1, [pc, #40]	@ (8003830 <__NVIC_DisableIRQ+0x44>)
 8003806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	2001      	movs	r0, #1
 800380e:	fa00 f202 	lsl.w	r2, r0, r2
 8003812:	3320      	adds	r3, #32
 8003814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003818:	f3bf 8f4f 	dsb	sy
}
 800381c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800381e:	f3bf 8f6f 	isb	sy
}
 8003822:	bf00      	nop
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	e000e100 	.word	0xe000e100

08003834 <__NVIC_SetPriority>:
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	6039      	str	r1, [r7, #0]
 800383e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003844:	2b00      	cmp	r3, #0
 8003846:	db0a      	blt.n	800385e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	b2da      	uxtb	r2, r3
 800384c:	490c      	ldr	r1, [pc, #48]	@ (8003880 <__NVIC_SetPriority+0x4c>)
 800384e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003852:	0112      	lsls	r2, r2, #4
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	440b      	add	r3, r1
 8003858:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800385c:	e00a      	b.n	8003874 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	b2da      	uxtb	r2, r3
 8003862:	4908      	ldr	r1, [pc, #32]	@ (8003884 <__NVIC_SetPriority+0x50>)
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	3b04      	subs	r3, #4
 800386c:	0112      	lsls	r2, r2, #4
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	440b      	add	r3, r1
 8003872:	761a      	strb	r2, [r3, #24]
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	e000e100 	.word	0xe000e100
 8003884:	e000ed00 	.word	0xe000ed00

08003888 <NVIC_EncodePriority>:
{
 8003888:	b480      	push	{r7}
 800388a:	b089      	sub	sp, #36	@ 0x24
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f1c3 0307 	rsb	r3, r3, #7
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	bf28      	it	cs
 80038a6:	2304      	movcs	r3, #4
 80038a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	3304      	adds	r3, #4
 80038ae:	2b06      	cmp	r3, #6
 80038b0:	d902      	bls.n	80038b8 <NVIC_EncodePriority+0x30>
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3b03      	subs	r3, #3
 80038b6:	e000      	b.n	80038ba <NVIC_EncodePriority+0x32>
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038bc:	f04f 32ff 	mov.w	r2, #4294967295
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	43da      	mvns	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	401a      	ands	r2, r3
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038d0:	f04f 31ff 	mov.w	r1, #4294967295
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	fa01 f303 	lsl.w	r3, r1, r3
 80038da:	43d9      	mvns	r1, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e0:	4313      	orrs	r3, r2
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3724      	adds	r7, #36	@ 0x24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
	...

080038f0 <SysTick_Config>:
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003900:	d301      	bcc.n	8003906 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003902:	2301      	movs	r3, #1
 8003904:	e00f      	b.n	8003926 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003906:	4a0a      	ldr	r2, [pc, #40]	@ (8003930 <SysTick_Config+0x40>)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3b01      	subs	r3, #1
 800390c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800390e:	210f      	movs	r1, #15
 8003910:	f04f 30ff 	mov.w	r0, #4294967295
 8003914:	f7ff ff8e 	bl	8003834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003918:	4b05      	ldr	r3, [pc, #20]	@ (8003930 <SysTick_Config+0x40>)
 800391a:	2200      	movs	r2, #0
 800391c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800391e:	4b04      	ldr	r3, [pc, #16]	@ (8003930 <SysTick_Config+0x40>)
 8003920:	2207      	movs	r2, #7
 8003922:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	e000e010 	.word	0xe000e010

08003934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff ff05 	bl	800374c <__NVIC_SetPriorityGrouping>
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800394a:	b580      	push	{r7, lr}
 800394c:	b086      	sub	sp, #24
 800394e:	af00      	add	r7, sp, #0
 8003950:	4603      	mov	r3, r0
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
 8003956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800395c:	f7ff ff1a 	bl	8003794 <__NVIC_GetPriorityGrouping>
 8003960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	68b9      	ldr	r1, [r7, #8]
 8003966:	6978      	ldr	r0, [r7, #20]
 8003968:	f7ff ff8e 	bl	8003888 <NVIC_EncodePriority>
 800396c:	4602      	mov	r2, r0
 800396e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003972:	4611      	mov	r1, r2
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff ff5d 	bl	8003834 <__NVIC_SetPriority>
}
 800397a:	bf00      	nop
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	af00      	add	r7, sp, #0
 8003988:	4603      	mov	r3, r0
 800398a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800398c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff ff0d 	bl	80037b0 <__NVIC_EnableIRQ>
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	4603      	mov	r3, r0
 80039a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80039a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff ff1d 	bl	80037ec <__NVIC_DisableIRQ>
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff ff94 	bl	80038f0 <SysTick_Config>
 80039c8:	4603      	mov	r3, r0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b089      	sub	sp, #36	@ 0x24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80039de:	2300      	movs	r3, #0
 80039e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80039e6:	2300      	movs	r3, #0
 80039e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80039ee:	2300      	movs	r3, #0
 80039f0:	61fb      	str	r3, [r7, #28]
 80039f2:	e175      	b.n	8003ce0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80039f4:	2201      	movs	r2, #1
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4013      	ands	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	f040 8164 	bne.w	8003cda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d005      	beq.n	8003a2a <HAL_GPIO_Init+0x56>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d130      	bne.n	8003a8c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	2203      	movs	r2, #3
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a60:	2201      	movs	r2, #1
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	091b      	lsrs	r3, r3, #4
 8003a76:	f003 0201 	and.w	r2, r3, #1
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 0303 	and.w	r3, r3, #3
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d017      	beq.n	8003ac8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	2203      	movs	r2, #3
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4013      	ands	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d123      	bne.n	8003b1c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	08da      	lsrs	r2, r3, #3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3208      	adds	r2, #8
 8003adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	220f      	movs	r2, #15
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	43db      	mvns	r3, r3
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	4013      	ands	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	08da      	lsrs	r2, r3, #3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3208      	adds	r2, #8
 8003b16:	69b9      	ldr	r1, [r7, #24]
 8003b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	2203      	movs	r2, #3
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4013      	ands	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f003 0203 	and.w	r2, r3, #3
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80be 	beq.w	8003cda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b5e:	4b66      	ldr	r3, [pc, #408]	@ (8003cf8 <HAL_GPIO_Init+0x324>)
 8003b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b62:	4a65      	ldr	r2, [pc, #404]	@ (8003cf8 <HAL_GPIO_Init+0x324>)
 8003b64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b6a:	4b63      	ldr	r3, [pc, #396]	@ (8003cf8 <HAL_GPIO_Init+0x324>)
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003b76:	4a61      	ldr	r2, [pc, #388]	@ (8003cfc <HAL_GPIO_Init+0x328>)
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	089b      	lsrs	r3, r3, #2
 8003b7c:	3302      	adds	r3, #2
 8003b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	220f      	movs	r2, #15
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	43db      	mvns	r3, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4013      	ands	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a58      	ldr	r2, [pc, #352]	@ (8003d00 <HAL_GPIO_Init+0x32c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d037      	beq.n	8003c12 <HAL_GPIO_Init+0x23e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a57      	ldr	r2, [pc, #348]	@ (8003d04 <HAL_GPIO_Init+0x330>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d031      	beq.n	8003c0e <HAL_GPIO_Init+0x23a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a56      	ldr	r2, [pc, #344]	@ (8003d08 <HAL_GPIO_Init+0x334>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d02b      	beq.n	8003c0a <HAL_GPIO_Init+0x236>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a55      	ldr	r2, [pc, #340]	@ (8003d0c <HAL_GPIO_Init+0x338>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d025      	beq.n	8003c06 <HAL_GPIO_Init+0x232>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a54      	ldr	r2, [pc, #336]	@ (8003d10 <HAL_GPIO_Init+0x33c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d01f      	beq.n	8003c02 <HAL_GPIO_Init+0x22e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a53      	ldr	r2, [pc, #332]	@ (8003d14 <HAL_GPIO_Init+0x340>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d019      	beq.n	8003bfe <HAL_GPIO_Init+0x22a>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a52      	ldr	r2, [pc, #328]	@ (8003d18 <HAL_GPIO_Init+0x344>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d013      	beq.n	8003bfa <HAL_GPIO_Init+0x226>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a51      	ldr	r2, [pc, #324]	@ (8003d1c <HAL_GPIO_Init+0x348>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00d      	beq.n	8003bf6 <HAL_GPIO_Init+0x222>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a50      	ldr	r2, [pc, #320]	@ (8003d20 <HAL_GPIO_Init+0x34c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d007      	beq.n	8003bf2 <HAL_GPIO_Init+0x21e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a4f      	ldr	r2, [pc, #316]	@ (8003d24 <HAL_GPIO_Init+0x350>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d101      	bne.n	8003bee <HAL_GPIO_Init+0x21a>
 8003bea:	2309      	movs	r3, #9
 8003bec:	e012      	b.n	8003c14 <HAL_GPIO_Init+0x240>
 8003bee:	230a      	movs	r3, #10
 8003bf0:	e010      	b.n	8003c14 <HAL_GPIO_Init+0x240>
 8003bf2:	2308      	movs	r3, #8
 8003bf4:	e00e      	b.n	8003c14 <HAL_GPIO_Init+0x240>
 8003bf6:	2307      	movs	r3, #7
 8003bf8:	e00c      	b.n	8003c14 <HAL_GPIO_Init+0x240>
 8003bfa:	2306      	movs	r3, #6
 8003bfc:	e00a      	b.n	8003c14 <HAL_GPIO_Init+0x240>
 8003bfe:	2305      	movs	r3, #5
 8003c00:	e008      	b.n	8003c14 <HAL_GPIO_Init+0x240>
 8003c02:	2304      	movs	r3, #4
 8003c04:	e006      	b.n	8003c14 <HAL_GPIO_Init+0x240>
 8003c06:	2303      	movs	r3, #3
 8003c08:	e004      	b.n	8003c14 <HAL_GPIO_Init+0x240>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e002      	b.n	8003c14 <HAL_GPIO_Init+0x240>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <HAL_GPIO_Init+0x240>
 8003c12:	2300      	movs	r3, #0
 8003c14:	69fa      	ldr	r2, [r7, #28]
 8003c16:	f002 0203 	and.w	r2, r2, #3
 8003c1a:	0092      	lsls	r2, r2, #2
 8003c1c:	4093      	lsls	r3, r2
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c24:	4935      	ldr	r1, [pc, #212]	@ (8003cfc <HAL_GPIO_Init+0x328>)
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	089b      	lsrs	r3, r3, #2
 8003c2a:	3302      	adds	r3, #2
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c32:	4b3d      	ldr	r3, [pc, #244]	@ (8003d28 <HAL_GPIO_Init+0x354>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c56:	4a34      	ldr	r2, [pc, #208]	@ (8003d28 <HAL_GPIO_Init+0x354>)
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c5c:	4b32      	ldr	r3, [pc, #200]	@ (8003d28 <HAL_GPIO_Init+0x354>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	43db      	mvns	r3, r3
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c80:	4a29      	ldr	r2, [pc, #164]	@ (8003d28 <HAL_GPIO_Init+0x354>)
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c86:	4b28      	ldr	r3, [pc, #160]	@ (8003d28 <HAL_GPIO_Init+0x354>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	4013      	ands	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003caa:	4a1f      	ldr	r2, [pc, #124]	@ (8003d28 <HAL_GPIO_Init+0x354>)
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8003d28 <HAL_GPIO_Init+0x354>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cd4:	4a14      	ldr	r2, [pc, #80]	@ (8003d28 <HAL_GPIO_Init+0x354>)
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	61fb      	str	r3, [r7, #28]
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	2b0f      	cmp	r3, #15
 8003ce4:	f67f ae86 	bls.w	80039f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003ce8:	bf00      	nop
 8003cea:	bf00      	nop
 8003cec:	3724      	adds	r7, #36	@ 0x24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	40013800 	.word	0x40013800
 8003d00:	40020000 	.word	0x40020000
 8003d04:	40020400 	.word	0x40020400
 8003d08:	40020800 	.word	0x40020800
 8003d0c:	40020c00 	.word	0x40020c00
 8003d10:	40021000 	.word	0x40021000
 8003d14:	40021400 	.word	0x40021400
 8003d18:	40021800 	.word	0x40021800
 8003d1c:	40021c00 	.word	0x40021c00
 8003d20:	40022000 	.word	0x40022000
 8003d24:	40022400 	.word	0x40022400
 8003d28:	40013c00 	.word	0x40013c00

08003d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	807b      	strh	r3, [r7, #2]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d3c:	787b      	ldrb	r3, [r7, #1]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d42:	887a      	ldrh	r2, [r7, #2]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003d48:	e003      	b.n	8003d52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003d4a:	887b      	ldrh	r3, [r7, #2]
 8003d4c:	041a      	lsls	r2, r3, #16
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	619a      	str	r2, [r3, #24]
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b085      	sub	sp, #20
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	460b      	mov	r3, r1
 8003d68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d70:	887a      	ldrh	r2, [r7, #2]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4013      	ands	r3, r2
 8003d76:	041a      	lsls	r2, r3, #16
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	43d9      	mvns	r1, r3
 8003d7c:	887b      	ldrh	r3, [r7, #2]
 8003d7e:	400b      	ands	r3, r1
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	619a      	str	r2, [r3, #24]
}
 8003d86:	bf00      	nop
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e08b      	b.n	8003ebe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d106      	bne.n	8003dc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7fe fb82 	bl	80024c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2224      	movs	r2, #36	@ 0x24
 8003dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0201 	bic.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003de4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003df4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d107      	bne.n	8003e0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e0a:	609a      	str	r2, [r3, #8]
 8003e0c:	e006      	b.n	8003e1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003e1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d108      	bne.n	8003e36 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e32:	605a      	str	r2, [r3, #4]
 8003e34:	e007      	b.n	8003e46 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6859      	ldr	r1, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	4b1d      	ldr	r3, [pc, #116]	@ (8003ec8 <HAL_I2C_Init+0x134>)
 8003e52:	430b      	orrs	r3, r1
 8003e54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691a      	ldr	r2, [r3, #16]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	69d9      	ldr	r1, [r3, #28]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1a      	ldr	r2, [r3, #32]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0201 	orr.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	02008000 	.word	0x02008000

08003ecc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b088      	sub	sp, #32
 8003ed0:	af02      	add	r7, sp, #8
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	4608      	mov	r0, r1
 8003ed6:	4611      	mov	r1, r2
 8003ed8:	461a      	mov	r2, r3
 8003eda:	4603      	mov	r3, r0
 8003edc:	817b      	strh	r3, [r7, #10]
 8003ede:	460b      	mov	r3, r1
 8003ee0:	813b      	strh	r3, [r7, #8]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b20      	cmp	r3, #32
 8003ef0:	f040 80f9 	bne.w	80040e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d002      	beq.n	8003f00 <HAL_I2C_Mem_Write+0x34>
 8003efa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d105      	bne.n	8003f0c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f06:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e0ed      	b.n	80040e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_I2C_Mem_Write+0x4e>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e0e6      	b.n	80040e8 <HAL_I2C_Mem_Write+0x21c>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f22:	f7ff f94f 	bl	80031c4 <HAL_GetTick>
 8003f26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	2319      	movs	r3, #25
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 fac3 	bl	80044c0 <I2C_WaitOnFlagUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e0d1      	b.n	80040e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2221      	movs	r2, #33	@ 0x21
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2240      	movs	r2, #64	@ 0x40
 8003f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a3a      	ldr	r2, [r7, #32]
 8003f5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f6c:	88f8      	ldrh	r0, [r7, #6]
 8003f6e:	893a      	ldrh	r2, [r7, #8]
 8003f70:	8979      	ldrh	r1, [r7, #10]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	9301      	str	r3, [sp, #4]
 8003f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f9d3 	bl	8004328 <I2C_RequestMemoryWrite>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0a9      	b.n	80040e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2bff      	cmp	r3, #255	@ 0xff
 8003f9c:	d90e      	bls.n	8003fbc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	22ff      	movs	r2, #255	@ 0xff
 8003fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	8979      	ldrh	r1, [r7, #10]
 8003fac:	2300      	movs	r3, #0
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 fc47 	bl	8004848 <I2C_TransferConfig>
 8003fba:	e00f      	b.n	8003fdc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	8979      	ldrh	r1, [r7, #10]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 fc36 	bl	8004848 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 fac6 	bl	8004572 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e07b      	b.n	80040e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff4:	781a      	ldrb	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800400a:	b29b      	uxth	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d034      	beq.n	8004094 <HAL_I2C_Mem_Write+0x1c8>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800402e:	2b00      	cmp	r3, #0
 8004030:	d130      	bne.n	8004094 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004038:	2200      	movs	r2, #0
 800403a:	2180      	movs	r1, #128	@ 0x80
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 fa3f 	bl	80044c0 <I2C_WaitOnFlagUntilTimeout>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e04d      	b.n	80040e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004050:	b29b      	uxth	r3, r3
 8004052:	2bff      	cmp	r3, #255	@ 0xff
 8004054:	d90e      	bls.n	8004074 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	22ff      	movs	r2, #255	@ 0xff
 800405a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004060:	b2da      	uxtb	r2, r3
 8004062:	8979      	ldrh	r1, [r7, #10]
 8004064:	2300      	movs	r3, #0
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 fbeb 	bl	8004848 <I2C_TransferConfig>
 8004072:	e00f      	b.n	8004094 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004082:	b2da      	uxtb	r2, r3
 8004084:	8979      	ldrh	r1, [r7, #10]
 8004086:	2300      	movs	r3, #0
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 fbda 	bl	8004848 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d19e      	bne.n	8003fdc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 faac 	bl	8004600 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e01a      	b.n	80040e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2220      	movs	r2, #32
 80040b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6859      	ldr	r1, [r3, #4]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	4b0a      	ldr	r3, [pc, #40]	@ (80040f0 <HAL_I2C_Mem_Write+0x224>)
 80040c6:	400b      	ands	r3, r1
 80040c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	e000      	b.n	80040e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80040e6:	2302      	movs	r3, #2
  }
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	fe00e800 	.word	0xfe00e800

080040f4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	4608      	mov	r0, r1
 80040fe:	4611      	mov	r1, r2
 8004100:	461a      	mov	r2, r3
 8004102:	4603      	mov	r3, r0
 8004104:	817b      	strh	r3, [r7, #10]
 8004106:	460b      	mov	r3, r1
 8004108:	813b      	strh	r3, [r7, #8]
 800410a:	4613      	mov	r3, r2
 800410c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b20      	cmp	r3, #32
 8004118:	f040 80fd 	bne.w	8004316 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <HAL_I2C_Mem_Read+0x34>
 8004122:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004124:	2b00      	cmp	r3, #0
 8004126:	d105      	bne.n	8004134 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800412e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0f1      	b.n	8004318 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_I2C_Mem_Read+0x4e>
 800413e:	2302      	movs	r3, #2
 8004140:	e0ea      	b.n	8004318 <HAL_I2C_Mem_Read+0x224>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800414a:	f7ff f83b 	bl	80031c4 <HAL_GetTick>
 800414e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	2319      	movs	r3, #25
 8004156:	2201      	movs	r2, #1
 8004158:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 f9af 	bl	80044c0 <I2C_WaitOnFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0d5      	b.n	8004318 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2222      	movs	r2, #34	@ 0x22
 8004170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2240      	movs	r2, #64	@ 0x40
 8004178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a3a      	ldr	r2, [r7, #32]
 8004186:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800418c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004194:	88f8      	ldrh	r0, [r7, #6]
 8004196:	893a      	ldrh	r2, [r7, #8]
 8004198:	8979      	ldrh	r1, [r7, #10]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	9301      	str	r3, [sp, #4]
 800419e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	4603      	mov	r3, r0
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f913 	bl	80043d0 <I2C_RequestMemoryRead>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0ad      	b.n	8004318 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2bff      	cmp	r3, #255	@ 0xff
 80041c4:	d90e      	bls.n	80041e4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	8979      	ldrh	r1, [r7, #10]
 80041d4:	4b52      	ldr	r3, [pc, #328]	@ (8004320 <HAL_I2C_Mem_Read+0x22c>)
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fb33 	bl	8004848 <I2C_TransferConfig>
 80041e2:	e00f      	b.n	8004204 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	8979      	ldrh	r1, [r7, #10]
 80041f6:	4b4a      	ldr	r3, [pc, #296]	@ (8004320 <HAL_I2C_Mem_Read+0x22c>)
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 fb22 	bl	8004848 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420a:	2200      	movs	r2, #0
 800420c:	2104      	movs	r1, #4
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 f956 	bl	80044c0 <I2C_WaitOnFlagUntilTimeout>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e07c      	b.n	8004318 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800423a:	3b01      	subs	r3, #1
 800423c:	b29a      	uxth	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d034      	beq.n	80042c4 <HAL_I2C_Mem_Read+0x1d0>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800425e:	2b00      	cmp	r3, #0
 8004260:	d130      	bne.n	80042c4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004268:	2200      	movs	r2, #0
 800426a:	2180      	movs	r1, #128	@ 0x80
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 f927 	bl	80044c0 <I2C_WaitOnFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e04d      	b.n	8004318 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004280:	b29b      	uxth	r3, r3
 8004282:	2bff      	cmp	r3, #255	@ 0xff
 8004284:	d90e      	bls.n	80042a4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004290:	b2da      	uxtb	r2, r3
 8004292:	8979      	ldrh	r1, [r7, #10]
 8004294:	2300      	movs	r3, #0
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 fad3 	bl	8004848 <I2C_TransferConfig>
 80042a2:	e00f      	b.n	80042c4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	8979      	ldrh	r1, [r7, #10]
 80042b6:	2300      	movs	r3, #0
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 fac2 	bl	8004848 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d19a      	bne.n	8004204 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 f994 	bl	8004600 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e01a      	b.n	8004318 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2220      	movs	r2, #32
 80042e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6859      	ldr	r1, [r3, #4]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004324 <HAL_I2C_Mem_Read+0x230>)
 80042f6:	400b      	ands	r3, r1
 80042f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	e000      	b.n	8004318 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004316:	2302      	movs	r3, #2
  }
}
 8004318:	4618      	mov	r0, r3
 800431a:	3718      	adds	r7, #24
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	80002400 	.word	0x80002400
 8004324:	fe00e800 	.word	0xfe00e800

08004328 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af02      	add	r7, sp, #8
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	4608      	mov	r0, r1
 8004332:	4611      	mov	r1, r2
 8004334:	461a      	mov	r2, r3
 8004336:	4603      	mov	r3, r0
 8004338:	817b      	strh	r3, [r7, #10]
 800433a:	460b      	mov	r3, r1
 800433c:	813b      	strh	r3, [r7, #8]
 800433e:	4613      	mov	r3, r2
 8004340:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004342:	88fb      	ldrh	r3, [r7, #6]
 8004344:	b2da      	uxtb	r2, r3
 8004346:	8979      	ldrh	r1, [r7, #10]
 8004348:	4b20      	ldr	r3, [pc, #128]	@ (80043cc <I2C_RequestMemoryWrite+0xa4>)
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 fa79 	bl	8004848 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004356:	69fa      	ldr	r2, [r7, #28]
 8004358:	69b9      	ldr	r1, [r7, #24]
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 f909 	bl	8004572 <I2C_WaitOnTXISFlagUntilTimeout>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e02c      	b.n	80043c4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800436a:	88fb      	ldrh	r3, [r7, #6]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d105      	bne.n	800437c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004370:	893b      	ldrh	r3, [r7, #8]
 8004372:	b2da      	uxtb	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	629a      	str	r2, [r3, #40]	@ 0x28
 800437a:	e015      	b.n	80043a8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800437c:	893b      	ldrh	r3, [r7, #8]
 800437e:	0a1b      	lsrs	r3, r3, #8
 8004380:	b29b      	uxth	r3, r3
 8004382:	b2da      	uxtb	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800438a:	69fa      	ldr	r2, [r7, #28]
 800438c:	69b9      	ldr	r1, [r7, #24]
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 f8ef 	bl	8004572 <I2C_WaitOnTXISFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e012      	b.n	80043c4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800439e:	893b      	ldrh	r3, [r7, #8]
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	2200      	movs	r2, #0
 80043b0:	2180      	movs	r1, #128	@ 0x80
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f884 	bl	80044c0 <I2C_WaitOnFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e000      	b.n	80043c4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	80002000 	.word	0x80002000

080043d0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af02      	add	r7, sp, #8
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	4608      	mov	r0, r1
 80043da:	4611      	mov	r1, r2
 80043dc:	461a      	mov	r2, r3
 80043de:	4603      	mov	r3, r0
 80043e0:	817b      	strh	r3, [r7, #10]
 80043e2:	460b      	mov	r3, r1
 80043e4:	813b      	strh	r3, [r7, #8]
 80043e6:	4613      	mov	r3, r2
 80043e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	8979      	ldrh	r1, [r7, #10]
 80043f0:	4b20      	ldr	r3, [pc, #128]	@ (8004474 <I2C_RequestMemoryRead+0xa4>)
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	2300      	movs	r3, #0
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 fa26 	bl	8004848 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043fc:	69fa      	ldr	r2, [r7, #28]
 80043fe:	69b9      	ldr	r1, [r7, #24]
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 f8b6 	bl	8004572 <I2C_WaitOnTXISFlagUntilTimeout>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e02c      	b.n	800446a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004410:	88fb      	ldrh	r3, [r7, #6]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d105      	bne.n	8004422 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004416:	893b      	ldrh	r3, [r7, #8]
 8004418:	b2da      	uxtb	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004420:	e015      	b.n	800444e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004422:	893b      	ldrh	r3, [r7, #8]
 8004424:	0a1b      	lsrs	r3, r3, #8
 8004426:	b29b      	uxth	r3, r3
 8004428:	b2da      	uxtb	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004430:	69fa      	ldr	r2, [r7, #28]
 8004432:	69b9      	ldr	r1, [r7, #24]
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f89c 	bl	8004572 <I2C_WaitOnTXISFlagUntilTimeout>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e012      	b.n	800446a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004444:	893b      	ldrh	r3, [r7, #8]
 8004446:	b2da      	uxtb	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	2200      	movs	r2, #0
 8004456:	2140      	movs	r1, #64	@ 0x40
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f831 	bl	80044c0 <I2C_WaitOnFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e000      	b.n	800446a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	80002000 	.word	0x80002000

08004478 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b02      	cmp	r3, #2
 800448c:	d103      	bne.n	8004496 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2200      	movs	r2, #0
 8004494:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d007      	beq.n	80044b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699a      	ldr	r2, [r3, #24]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	619a      	str	r2, [r3, #24]
  }
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	4613      	mov	r3, r2
 80044ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044d0:	e03b      	b.n	800454a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	6839      	ldr	r1, [r7, #0]
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 f8d6 	bl	8004688 <I2C_IsErrorOccurred>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e041      	b.n	800456a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ec:	d02d      	beq.n	800454a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ee:	f7fe fe69 	bl	80031c4 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d302      	bcc.n	8004504 <I2C_WaitOnFlagUntilTimeout+0x44>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d122      	bne.n	800454a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699a      	ldr	r2, [r3, #24]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	4013      	ands	r3, r2
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	429a      	cmp	r2, r3
 8004512:	bf0c      	ite	eq
 8004514:	2301      	moveq	r3, #1
 8004516:	2300      	movne	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	461a      	mov	r2, r3
 800451c:	79fb      	ldrb	r3, [r7, #7]
 800451e:	429a      	cmp	r2, r3
 8004520:	d113      	bne.n	800454a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004526:	f043 0220 	orr.w	r2, r3, #32
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e00f      	b.n	800456a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	699a      	ldr	r2, [r3, #24]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4013      	ands	r3, r2
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	429a      	cmp	r2, r3
 8004558:	bf0c      	ite	eq
 800455a:	2301      	moveq	r3, #1
 800455c:	2300      	movne	r3, #0
 800455e:	b2db      	uxtb	r3, r3
 8004560:	461a      	mov	r2, r3
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	429a      	cmp	r2, r3
 8004566:	d0b4      	beq.n	80044d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b084      	sub	sp, #16
 8004576:	af00      	add	r7, sp, #0
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800457e:	e033      	b.n	80045e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	68b9      	ldr	r1, [r7, #8]
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 f87f 	bl	8004688 <I2C_IsErrorOccurred>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e031      	b.n	80045f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459a:	d025      	beq.n	80045e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459c:	f7fe fe12 	bl	80031c4 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d302      	bcc.n	80045b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d11a      	bne.n	80045e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d013      	beq.n	80045e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c4:	f043 0220 	orr.w	r2, r3, #32
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e007      	b.n	80045f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d1c4      	bne.n	8004580 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800460c:	e02f      	b.n	800466e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f838 	bl	8004688 <I2C_IsErrorOccurred>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e02d      	b.n	800467e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004622:	f7fe fdcf 	bl	80031c4 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	429a      	cmp	r2, r3
 8004630:	d302      	bcc.n	8004638 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d11a      	bne.n	800466e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f003 0320 	and.w	r3, r3, #32
 8004642:	2b20      	cmp	r3, #32
 8004644:	d013      	beq.n	800466e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800464a:	f043 0220 	orr.w	r2, r3, #32
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e007      	b.n	800467e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	f003 0320 	and.w	r3, r3, #32
 8004678:	2b20      	cmp	r3, #32
 800467a:	d1c8      	bne.n	800460e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b08a      	sub	sp, #40	@ 0x28
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004694:	2300      	movs	r3, #0
 8004696:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d068      	beq.n	8004786 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2210      	movs	r2, #16
 80046ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046bc:	e049      	b.n	8004752 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c4:	d045      	beq.n	8004752 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046c6:	f7fe fd7d 	bl	80031c4 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d302      	bcc.n	80046dc <I2C_IsErrorOccurred+0x54>
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d13a      	bne.n	8004752 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046fe:	d121      	bne.n	8004744 <I2C_IsErrorOccurred+0xbc>
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004706:	d01d      	beq.n	8004744 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004708:	7cfb      	ldrb	r3, [r7, #19]
 800470a:	2b20      	cmp	r3, #32
 800470c:	d01a      	beq.n	8004744 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800471c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800471e:	f7fe fd51 	bl	80031c4 <HAL_GetTick>
 8004722:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004724:	e00e      	b.n	8004744 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004726:	f7fe fd4d 	bl	80031c4 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b19      	cmp	r3, #25
 8004732:	d907      	bls.n	8004744 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	f043 0320 	orr.w	r3, r3, #32
 800473a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004742:	e006      	b.n	8004752 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b20      	cmp	r3, #32
 8004750:	d1e9      	bne.n	8004726 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b20      	cmp	r3, #32
 800475e:	d003      	beq.n	8004768 <I2C_IsErrorOccurred+0xe0>
 8004760:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0aa      	beq.n	80046be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004768:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800476c:	2b00      	cmp	r3, #0
 800476e:	d103      	bne.n	8004778 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2220      	movs	r2, #32
 8004776:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	f043 0304 	orr.w	r3, r3, #4
 800477e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00b      	beq.n	80047b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	f043 0301 	orr.w	r3, r3, #1
 800479e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80047a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00b      	beq.n	80047d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	f043 0308 	orr.w	r3, r3, #8
 80047c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00b      	beq.n	80047f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	f043 0302 	orr.w	r3, r3, #2
 80047e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80047f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d01c      	beq.n	8004836 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f7ff fe3b 	bl	8004478 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6859      	ldr	r1, [r3, #4]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	4b0d      	ldr	r3, [pc, #52]	@ (8004844 <I2C_IsErrorOccurred+0x1bc>)
 800480e:	400b      	ands	r3, r1
 8004810:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	431a      	orrs	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004836:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800483a:	4618      	mov	r0, r3
 800483c:	3728      	adds	r7, #40	@ 0x28
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	fe00e800 	.word	0xfe00e800

08004848 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004848:	b480      	push	{r7}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	607b      	str	r3, [r7, #4]
 8004852:	460b      	mov	r3, r1
 8004854:	817b      	strh	r3, [r7, #10]
 8004856:	4613      	mov	r3, r2
 8004858:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800485a:	897b      	ldrh	r3, [r7, #10]
 800485c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004860:	7a7b      	ldrb	r3, [r7, #9]
 8004862:	041b      	lsls	r3, r3, #16
 8004864:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004868:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	4313      	orrs	r3, r2
 8004872:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004876:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	0d5b      	lsrs	r3, r3, #21
 8004882:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004886:	4b08      	ldr	r3, [pc, #32]	@ (80048a8 <I2C_TransferConfig+0x60>)
 8004888:	430b      	orrs	r3, r1
 800488a:	43db      	mvns	r3, r3
 800488c:	ea02 0103 	and.w	r1, r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	430a      	orrs	r2, r1
 8004898:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800489a:	bf00      	nop
 800489c:	371c      	adds	r7, #28
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	03ff63ff 	.word	0x03ff63ff

080048ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b20      	cmp	r3, #32
 80048c0:	d138      	bne.n	8004934 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e032      	b.n	8004936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2224      	movs	r2, #36	@ 0x24
 80048dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0201 	bic.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80048fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6819      	ldr	r1, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004930:	2300      	movs	r3, #0
 8004932:	e000      	b.n	8004936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004934:	2302      	movs	r3, #2
  }
}
 8004936:	4618      	mov	r0, r3
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004942:	b480      	push	{r7}
 8004944:	b085      	sub	sp, #20
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
 800494a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b20      	cmp	r3, #32
 8004956:	d139      	bne.n	80049cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004962:	2302      	movs	r3, #2
 8004964:	e033      	b.n	80049ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2224      	movs	r2, #36	@ 0x24
 8004972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0201 	bic.w	r2, r2, #1
 8004984:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004994:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	021b      	lsls	r3, r3, #8
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	4313      	orrs	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0201 	orr.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	e000      	b.n	80049ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049cc:	2302      	movs	r3, #2
  }
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
	...

080049dc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049e0:	4b05      	ldr	r3, [pc, #20]	@ (80049f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a04      	ldr	r2, [pc, #16]	@ (80049f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049ea:	6013      	str	r3, [r2, #0]
}
 80049ec:	bf00      	nop
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40007000 	.word	0x40007000

080049fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a06:	4b23      	ldr	r3, [pc, #140]	@ (8004a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0a:	4a22      	ldr	r2, [pc, #136]	@ (8004a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a12:	4b20      	ldr	r3, [pc, #128]	@ (8004a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a1d      	ldr	r2, [pc, #116]	@ (8004a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a28:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a2a:	f7fe fbcb 	bl	80031c4 <HAL_GetTick>
 8004a2e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a30:	e009      	b.n	8004a46 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a32:	f7fe fbc7 	bl	80031c4 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a40:	d901      	bls.n	8004a46 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e022      	b.n	8004a8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a46:	4b14      	ldr	r3, [pc, #80]	@ (8004a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a52:	d1ee      	bne.n	8004a32 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004a54:	4b10      	ldr	r3, [pc, #64]	@ (8004a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a0f      	ldr	r2, [pc, #60]	@ (8004a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a60:	f7fe fbb0 	bl	80031c4 <HAL_GetTick>
 8004a64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a66:	e009      	b.n	8004a7c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a68:	f7fe fbac 	bl	80031c4 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a76:	d901      	bls.n	8004a7c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e007      	b.n	8004a8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a7c:	4b06      	ldr	r3, [pc, #24]	@ (8004a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a88:	d1ee      	bne.n	8004a68 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40023800 	.word	0x40023800
 8004a98:	40007000 	.word	0x40007000

08004a9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e29b      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 8087 	beq.w	8004bce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ac0:	4b96      	ldr	r3, [pc, #600]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 030c 	and.w	r3, r3, #12
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d00c      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004acc:	4b93      	ldr	r3, [pc, #588]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 030c 	and.w	r3, r3, #12
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d112      	bne.n	8004afe <HAL_RCC_OscConfig+0x62>
 8004ad8:	4b90      	ldr	r3, [pc, #576]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ae0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ae4:	d10b      	bne.n	8004afe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae6:	4b8d      	ldr	r3, [pc, #564]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d06c      	beq.n	8004bcc <HAL_RCC_OscConfig+0x130>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d168      	bne.n	8004bcc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e275      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b06:	d106      	bne.n	8004b16 <HAL_RCC_OscConfig+0x7a>
 8004b08:	4b84      	ldr	r3, [pc, #528]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a83      	ldr	r2, [pc, #524]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	e02e      	b.n	8004b74 <HAL_RCC_OscConfig+0xd8>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10c      	bne.n	8004b38 <HAL_RCC_OscConfig+0x9c>
 8004b1e:	4b7f      	ldr	r3, [pc, #508]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a7e      	ldr	r2, [pc, #504]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	4b7c      	ldr	r3, [pc, #496]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a7b      	ldr	r2, [pc, #492]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	e01d      	b.n	8004b74 <HAL_RCC_OscConfig+0xd8>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b40:	d10c      	bne.n	8004b5c <HAL_RCC_OscConfig+0xc0>
 8004b42:	4b76      	ldr	r3, [pc, #472]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a75      	ldr	r2, [pc, #468]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	4b73      	ldr	r3, [pc, #460]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a72      	ldr	r2, [pc, #456]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	e00b      	b.n	8004b74 <HAL_RCC_OscConfig+0xd8>
 8004b5c:	4b6f      	ldr	r3, [pc, #444]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a6e      	ldr	r2, [pc, #440]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	4b6c      	ldr	r3, [pc, #432]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a6b      	ldr	r2, [pc, #428]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d013      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7c:	f7fe fb22 	bl	80031c4 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b84:	f7fe fb1e 	bl	80031c4 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b64      	cmp	r3, #100	@ 0x64
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e229      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b96:	4b61      	ldr	r3, [pc, #388]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f0      	beq.n	8004b84 <HAL_RCC_OscConfig+0xe8>
 8004ba2:	e014      	b.n	8004bce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba4:	f7fe fb0e 	bl	80031c4 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bac:	f7fe fb0a 	bl	80031c4 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b64      	cmp	r3, #100	@ 0x64
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e215      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bbe:	4b57      	ldr	r3, [pc, #348]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1f0      	bne.n	8004bac <HAL_RCC_OscConfig+0x110>
 8004bca:	e000      	b.n	8004bce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d069      	beq.n	8004cae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bda:	4b50      	ldr	r3, [pc, #320]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 030c 	and.w	r3, r3, #12
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00b      	beq.n	8004bfe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004be6:	4b4d      	ldr	r3, [pc, #308]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 030c 	and.w	r3, r3, #12
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d11c      	bne.n	8004c2c <HAL_RCC_OscConfig+0x190>
 8004bf2:	4b4a      	ldr	r3, [pc, #296]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d116      	bne.n	8004c2c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bfe:	4b47      	ldr	r3, [pc, #284]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d005      	beq.n	8004c16 <HAL_RCC_OscConfig+0x17a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d001      	beq.n	8004c16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e1e9      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c16:	4b41      	ldr	r3, [pc, #260]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	493d      	ldr	r1, [pc, #244]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c2a:	e040      	b.n	8004cae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d023      	beq.n	8004c7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c34:	4b39      	ldr	r3, [pc, #228]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a38      	ldr	r2, [pc, #224]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c3a:	f043 0301 	orr.w	r3, r3, #1
 8004c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c40:	f7fe fac0 	bl	80031c4 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c48:	f7fe fabc 	bl	80031c4 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e1c7      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5a:	4b30      	ldr	r3, [pc, #192]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0f0      	beq.n	8004c48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c66:	4b2d      	ldr	r3, [pc, #180]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	4929      	ldr	r1, [pc, #164]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	600b      	str	r3, [r1, #0]
 8004c7a:	e018      	b.n	8004cae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c7c:	4b27      	ldr	r3, [pc, #156]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a26      	ldr	r2, [pc, #152]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c82:	f023 0301 	bic.w	r3, r3, #1
 8004c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c88:	f7fe fa9c 	bl	80031c4 <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c90:	f7fe fa98 	bl	80031c4 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e1a3      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f0      	bne.n	8004c90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d038      	beq.n	8004d2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d019      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cc2:	4b16      	ldr	r3, [pc, #88]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cc6:	4a15      	ldr	r2, [pc, #84]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004cc8:	f043 0301 	orr.w	r3, r3, #1
 8004ccc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cce:	f7fe fa79 	bl	80031c4 <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cd6:	f7fe fa75 	bl	80031c4 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e180      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x23a>
 8004cf4:	e01a      	b.n	8004d2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cf6:	4b09      	ldr	r3, [pc, #36]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cfa:	4a08      	ldr	r2, [pc, #32]	@ (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004cfc:	f023 0301 	bic.w	r3, r3, #1
 8004d00:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d02:	f7fe fa5f 	bl	80031c4 <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d08:	e00a      	b.n	8004d20 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d0a:	f7fe fa5b 	bl	80031c4 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d903      	bls.n	8004d20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e166      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
 8004d1c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d20:	4b92      	ldr	r3, [pc, #584]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004d22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1ee      	bne.n	8004d0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 80a4 	beq.w	8004e82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d3a:	4b8c      	ldr	r3, [pc, #560]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10d      	bne.n	8004d62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d46:	4b89      	ldr	r3, [pc, #548]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4a:	4a88      	ldr	r2, [pc, #544]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d52:	4b86      	ldr	r3, [pc, #536]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d5a:	60bb      	str	r3, [r7, #8]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d62:	4b83      	ldr	r3, [pc, #524]	@ (8004f70 <HAL_RCC_OscConfig+0x4d4>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d118      	bne.n	8004da0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004d6e:	4b80      	ldr	r3, [pc, #512]	@ (8004f70 <HAL_RCC_OscConfig+0x4d4>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a7f      	ldr	r2, [pc, #508]	@ (8004f70 <HAL_RCC_OscConfig+0x4d4>)
 8004d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d7a:	f7fe fa23 	bl	80031c4 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d82:	f7fe fa1f 	bl	80031c4 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b64      	cmp	r3, #100	@ 0x64
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e12a      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d94:	4b76      	ldr	r3, [pc, #472]	@ (8004f70 <HAL_RCC_OscConfig+0x4d4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d106      	bne.n	8004db6 <HAL_RCC_OscConfig+0x31a>
 8004da8:	4b70      	ldr	r3, [pc, #448]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dac:	4a6f      	ldr	r2, [pc, #444]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004db4:	e02d      	b.n	8004e12 <HAL_RCC_OscConfig+0x376>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x33c>
 8004dbe:	4b6b      	ldr	r3, [pc, #428]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dc2:	4a6a      	ldr	r2, [pc, #424]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004dc4:	f023 0301 	bic.w	r3, r3, #1
 8004dc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dca:	4b68      	ldr	r3, [pc, #416]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dce:	4a67      	ldr	r2, [pc, #412]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004dd0:	f023 0304 	bic.w	r3, r3, #4
 8004dd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dd6:	e01c      	b.n	8004e12 <HAL_RCC_OscConfig+0x376>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	2b05      	cmp	r3, #5
 8004dde:	d10c      	bne.n	8004dfa <HAL_RCC_OscConfig+0x35e>
 8004de0:	4b62      	ldr	r3, [pc, #392]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de4:	4a61      	ldr	r2, [pc, #388]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004de6:	f043 0304 	orr.w	r3, r3, #4
 8004dea:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dec:	4b5f      	ldr	r3, [pc, #380]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df0:	4a5e      	ldr	r2, [pc, #376]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004df2:	f043 0301 	orr.w	r3, r3, #1
 8004df6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004df8:	e00b      	b.n	8004e12 <HAL_RCC_OscConfig+0x376>
 8004dfa:	4b5c      	ldr	r3, [pc, #368]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dfe:	4a5b      	ldr	r2, [pc, #364]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e06:	4b59      	ldr	r3, [pc, #356]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e0a:	4a58      	ldr	r2, [pc, #352]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004e0c:	f023 0304 	bic.w	r3, r3, #4
 8004e10:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d015      	beq.n	8004e46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1a:	f7fe f9d3 	bl	80031c4 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e20:	e00a      	b.n	8004e38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e22:	f7fe f9cf 	bl	80031c4 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e0d8      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e38:	4b4c      	ldr	r3, [pc, #304]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0ee      	beq.n	8004e22 <HAL_RCC_OscConfig+0x386>
 8004e44:	e014      	b.n	8004e70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e46:	f7fe f9bd 	bl	80031c4 <HAL_GetTick>
 8004e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e4c:	e00a      	b.n	8004e64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e4e:	f7fe f9b9 	bl	80031c4 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e0c2      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e64:	4b41      	ldr	r3, [pc, #260]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1ee      	bne.n	8004e4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e70:	7dfb      	ldrb	r3, [r7, #23]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d105      	bne.n	8004e82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e76:	4b3d      	ldr	r3, [pc, #244]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7a:	4a3c      	ldr	r2, [pc, #240]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004e7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e80:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 80ae 	beq.w	8004fe8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e8c:	4b37      	ldr	r3, [pc, #220]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 030c 	and.w	r3, r3, #12
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d06d      	beq.n	8004f74 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d14b      	bne.n	8004f38 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea0:	4b32      	ldr	r3, [pc, #200]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a31      	ldr	r2, [pc, #196]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004ea6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eac:	f7fe f98a 	bl	80031c4 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb4:	f7fe f986 	bl	80031c4 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e091      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ec6:	4b29      	ldr	r3, [pc, #164]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1f0      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69da      	ldr	r2, [r3, #28]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee0:	019b      	lsls	r3, r3, #6
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee8:	085b      	lsrs	r3, r3, #1
 8004eea:	3b01      	subs	r3, #1
 8004eec:	041b      	lsls	r3, r3, #16
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef4:	061b      	lsls	r3, r3, #24
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efc:	071b      	lsls	r3, r3, #28
 8004efe:	491b      	ldr	r1, [pc, #108]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f04:	4b19      	ldr	r3, [pc, #100]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a18      	ldr	r2, [pc, #96]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004f0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fe f958 	bl	80031c4 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f18:	f7fe f954 	bl	80031c4 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e05f      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f2a:	4b10      	ldr	r3, [pc, #64]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f0      	beq.n	8004f18 <HAL_RCC_OscConfig+0x47c>
 8004f36:	e057      	b.n	8004fe8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f38:	4b0c      	ldr	r3, [pc, #48]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a0b      	ldr	r2, [pc, #44]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004f3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f44:	f7fe f93e 	bl	80031c4 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f4c:	f7fe f93a 	bl	80031c4 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e045      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5e:	4b03      	ldr	r3, [pc, #12]	@ (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f0      	bne.n	8004f4c <HAL_RCC_OscConfig+0x4b0>
 8004f6a:	e03d      	b.n	8004fe8 <HAL_RCC_OscConfig+0x54c>
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004f74:	4b1f      	ldr	r3, [pc, #124]	@ (8004ff4 <HAL_RCC_OscConfig+0x558>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d030      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d129      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d122      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004faa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d119      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fba:	085b      	lsrs	r3, r3, #1
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d10f      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d107      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fde:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d001      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e000      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40023800 	.word	0x40023800

08004ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e0d0      	b.n	80051b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005010:	4b6a      	ldr	r3, [pc, #424]	@ (80051bc <HAL_RCC_ClockConfig+0x1c4>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 030f 	and.w	r3, r3, #15
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d910      	bls.n	8005040 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501e:	4b67      	ldr	r3, [pc, #412]	@ (80051bc <HAL_RCC_ClockConfig+0x1c4>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f023 020f 	bic.w	r2, r3, #15
 8005026:	4965      	ldr	r1, [pc, #404]	@ (80051bc <HAL_RCC_ClockConfig+0x1c4>)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	4313      	orrs	r3, r2
 800502c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800502e:	4b63      	ldr	r3, [pc, #396]	@ (80051bc <HAL_RCC_ClockConfig+0x1c4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d001      	beq.n	8005040 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e0b8      	b.n	80051b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d020      	beq.n	800508e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b00      	cmp	r3, #0
 8005056:	d005      	beq.n	8005064 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005058:	4b59      	ldr	r3, [pc, #356]	@ (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	4a58      	ldr	r2, [pc, #352]	@ (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 800505e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005062:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0308 	and.w	r3, r3, #8
 800506c:	2b00      	cmp	r3, #0
 800506e:	d005      	beq.n	800507c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005070:	4b53      	ldr	r3, [pc, #332]	@ (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	4a52      	ldr	r2, [pc, #328]	@ (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 8005076:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800507a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800507c:	4b50      	ldr	r3, [pc, #320]	@ (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	494d      	ldr	r1, [pc, #308]	@ (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 800508a:	4313      	orrs	r3, r2
 800508c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d040      	beq.n	800511c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d107      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050a2:	4b47      	ldr	r3, [pc, #284]	@ (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d115      	bne.n	80050da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e07f      	b.n	80051b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d107      	bne.n	80050ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ba:	4b41      	ldr	r3, [pc, #260]	@ (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e073      	b.n	80051b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ca:	4b3d      	ldr	r3, [pc, #244]	@ (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e06b      	b.n	80051b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050da:	4b39      	ldr	r3, [pc, #228]	@ (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f023 0203 	bic.w	r2, r3, #3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	4936      	ldr	r1, [pc, #216]	@ (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ec:	f7fe f86a 	bl	80031c4 <HAL_GetTick>
 80050f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f2:	e00a      	b.n	800510a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f4:	f7fe f866 	bl	80031c4 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e053      	b.n	80051b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510a:	4b2d      	ldr	r3, [pc, #180]	@ (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 020c 	and.w	r2, r3, #12
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	429a      	cmp	r2, r3
 800511a:	d1eb      	bne.n	80050f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800511c:	4b27      	ldr	r3, [pc, #156]	@ (80051bc <HAL_RCC_ClockConfig+0x1c4>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 030f 	and.w	r3, r3, #15
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d210      	bcs.n	800514c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512a:	4b24      	ldr	r3, [pc, #144]	@ (80051bc <HAL_RCC_ClockConfig+0x1c4>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f023 020f 	bic.w	r2, r3, #15
 8005132:	4922      	ldr	r1, [pc, #136]	@ (80051bc <HAL_RCC_ClockConfig+0x1c4>)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	4313      	orrs	r3, r2
 8005138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800513a:	4b20      	ldr	r3, [pc, #128]	@ (80051bc <HAL_RCC_ClockConfig+0x1c4>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	429a      	cmp	r2, r3
 8005146:	d001      	beq.n	800514c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e032      	b.n	80051b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	d008      	beq.n	800516a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005158:	4b19      	ldr	r3, [pc, #100]	@ (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	4916      	ldr	r1, [pc, #88]	@ (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 8005166:	4313      	orrs	r3, r2
 8005168:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b00      	cmp	r3, #0
 8005174:	d009      	beq.n	800518a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005176:	4b12      	ldr	r3, [pc, #72]	@ (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	490e      	ldr	r1, [pc, #56]	@ (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 8005186:	4313      	orrs	r3, r2
 8005188:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800518a:	f000 f821 	bl	80051d0 <HAL_RCC_GetSysClockFreq>
 800518e:	4602      	mov	r2, r0
 8005190:	4b0b      	ldr	r3, [pc, #44]	@ (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	091b      	lsrs	r3, r3, #4
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	490a      	ldr	r1, [pc, #40]	@ (80051c4 <HAL_RCC_ClockConfig+0x1cc>)
 800519c:	5ccb      	ldrb	r3, [r1, r3]
 800519e:	fa22 f303 	lsr.w	r3, r2, r3
 80051a2:	4a09      	ldr	r2, [pc, #36]	@ (80051c8 <HAL_RCC_ClockConfig+0x1d0>)
 80051a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051a6:	4b09      	ldr	r3, [pc, #36]	@ (80051cc <HAL_RCC_ClockConfig+0x1d4>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fd ffc6 	bl	800313c <HAL_InitTick>

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	40023c00 	.word	0x40023c00
 80051c0:	40023800 	.word	0x40023800
 80051c4:	0800b268 	.word	0x0800b268
 80051c8:	20000020 	.word	0x20000020
 80051cc:	20000024 	.word	0x20000024

080051d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051d4:	b094      	sub	sp, #80	@ 0x50
 80051d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80051d8:	2300      	movs	r3, #0
 80051da:	647b      	str	r3, [r7, #68]	@ 0x44
 80051dc:	2300      	movs	r3, #0
 80051de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051e0:	2300      	movs	r3, #0
 80051e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80051e4:	2300      	movs	r3, #0
 80051e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051e8:	4b79      	ldr	r3, [pc, #484]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f003 030c 	and.w	r3, r3, #12
 80051f0:	2b08      	cmp	r3, #8
 80051f2:	d00d      	beq.n	8005210 <HAL_RCC_GetSysClockFreq+0x40>
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	f200 80e1 	bhi.w	80053bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <HAL_RCC_GetSysClockFreq+0x34>
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d003      	beq.n	800520a <HAL_RCC_GetSysClockFreq+0x3a>
 8005202:	e0db      	b.n	80053bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005204:	4b73      	ldr	r3, [pc, #460]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005206:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005208:	e0db      	b.n	80053c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800520a:	4b73      	ldr	r3, [pc, #460]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800520c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800520e:	e0d8      	b.n	80053c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005210:	4b6f      	ldr	r3, [pc, #444]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005218:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800521a:	4b6d      	ldr	r3, [pc, #436]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d063      	beq.n	80052ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005226:	4b6a      	ldr	r3, [pc, #424]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	099b      	lsrs	r3, r3, #6
 800522c:	2200      	movs	r2, #0
 800522e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005230:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005238:	633b      	str	r3, [r7, #48]	@ 0x30
 800523a:	2300      	movs	r3, #0
 800523c:	637b      	str	r3, [r7, #52]	@ 0x34
 800523e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005242:	4622      	mov	r2, r4
 8005244:	462b      	mov	r3, r5
 8005246:	f04f 0000 	mov.w	r0, #0
 800524a:	f04f 0100 	mov.w	r1, #0
 800524e:	0159      	lsls	r1, r3, #5
 8005250:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005254:	0150      	lsls	r0, r2, #5
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	4621      	mov	r1, r4
 800525c:	1a51      	subs	r1, r2, r1
 800525e:	6139      	str	r1, [r7, #16]
 8005260:	4629      	mov	r1, r5
 8005262:	eb63 0301 	sbc.w	r3, r3, r1
 8005266:	617b      	str	r3, [r7, #20]
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005274:	4659      	mov	r1, fp
 8005276:	018b      	lsls	r3, r1, #6
 8005278:	4651      	mov	r1, sl
 800527a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800527e:	4651      	mov	r1, sl
 8005280:	018a      	lsls	r2, r1, #6
 8005282:	4651      	mov	r1, sl
 8005284:	ebb2 0801 	subs.w	r8, r2, r1
 8005288:	4659      	mov	r1, fp
 800528a:	eb63 0901 	sbc.w	r9, r3, r1
 800528e:	f04f 0200 	mov.w	r2, #0
 8005292:	f04f 0300 	mov.w	r3, #0
 8005296:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800529a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800529e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052a2:	4690      	mov	r8, r2
 80052a4:	4699      	mov	r9, r3
 80052a6:	4623      	mov	r3, r4
 80052a8:	eb18 0303 	adds.w	r3, r8, r3
 80052ac:	60bb      	str	r3, [r7, #8]
 80052ae:	462b      	mov	r3, r5
 80052b0:	eb49 0303 	adc.w	r3, r9, r3
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052c2:	4629      	mov	r1, r5
 80052c4:	024b      	lsls	r3, r1, #9
 80052c6:	4621      	mov	r1, r4
 80052c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052cc:	4621      	mov	r1, r4
 80052ce:	024a      	lsls	r2, r1, #9
 80052d0:	4610      	mov	r0, r2
 80052d2:	4619      	mov	r1, r3
 80052d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052d6:	2200      	movs	r2, #0
 80052d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052e0:	f7fb f9ba 	bl	8000658 <__aeabi_uldivmod>
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	4613      	mov	r3, r2
 80052ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052ec:	e058      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052ee:	4b38      	ldr	r3, [pc, #224]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	099b      	lsrs	r3, r3, #6
 80052f4:	2200      	movs	r2, #0
 80052f6:	4618      	mov	r0, r3
 80052f8:	4611      	mov	r1, r2
 80052fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052fe:	623b      	str	r3, [r7, #32]
 8005300:	2300      	movs	r3, #0
 8005302:	627b      	str	r3, [r7, #36]	@ 0x24
 8005304:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005308:	4642      	mov	r2, r8
 800530a:	464b      	mov	r3, r9
 800530c:	f04f 0000 	mov.w	r0, #0
 8005310:	f04f 0100 	mov.w	r1, #0
 8005314:	0159      	lsls	r1, r3, #5
 8005316:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800531a:	0150      	lsls	r0, r2, #5
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	4641      	mov	r1, r8
 8005322:	ebb2 0a01 	subs.w	sl, r2, r1
 8005326:	4649      	mov	r1, r9
 8005328:	eb63 0b01 	sbc.w	fp, r3, r1
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	f04f 0300 	mov.w	r3, #0
 8005334:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005338:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800533c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005340:	ebb2 040a 	subs.w	r4, r2, sl
 8005344:	eb63 050b 	sbc.w	r5, r3, fp
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	00eb      	lsls	r3, r5, #3
 8005352:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005356:	00e2      	lsls	r2, r4, #3
 8005358:	4614      	mov	r4, r2
 800535a:	461d      	mov	r5, r3
 800535c:	4643      	mov	r3, r8
 800535e:	18e3      	adds	r3, r4, r3
 8005360:	603b      	str	r3, [r7, #0]
 8005362:	464b      	mov	r3, r9
 8005364:	eb45 0303 	adc.w	r3, r5, r3
 8005368:	607b      	str	r3, [r7, #4]
 800536a:	f04f 0200 	mov.w	r2, #0
 800536e:	f04f 0300 	mov.w	r3, #0
 8005372:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005376:	4629      	mov	r1, r5
 8005378:	028b      	lsls	r3, r1, #10
 800537a:	4621      	mov	r1, r4
 800537c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005380:	4621      	mov	r1, r4
 8005382:	028a      	lsls	r2, r1, #10
 8005384:	4610      	mov	r0, r2
 8005386:	4619      	mov	r1, r3
 8005388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800538a:	2200      	movs	r2, #0
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	61fa      	str	r2, [r7, #28]
 8005390:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005394:	f7fb f960 	bl	8000658 <__aeabi_uldivmod>
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	4613      	mov	r3, r2
 800539e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80053a0:	4b0b      	ldr	r3, [pc, #44]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	0c1b      	lsrs	r3, r3, #16
 80053a6:	f003 0303 	and.w	r3, r3, #3
 80053aa:	3301      	adds	r3, #1
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80053b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053ba:	e002      	b.n	80053c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053bc:	4b05      	ldr	r3, [pc, #20]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80053be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3750      	adds	r7, #80	@ 0x50
 80053c8:	46bd      	mov	sp, r7
 80053ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ce:	bf00      	nop
 80053d0:	40023800 	.word	0x40023800
 80053d4:	00f42400 	.word	0x00f42400
 80053d8:	007a1200 	.word	0x007a1200

080053dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053e0:	4b03      	ldr	r3, [pc, #12]	@ (80053f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80053e2:	681b      	ldr	r3, [r3, #0]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	20000020 	.word	0x20000020

080053f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053f8:	f7ff fff0 	bl	80053dc <HAL_RCC_GetHCLKFreq>
 80053fc:	4602      	mov	r2, r0
 80053fe:	4b05      	ldr	r3, [pc, #20]	@ (8005414 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	0a9b      	lsrs	r3, r3, #10
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	4903      	ldr	r1, [pc, #12]	@ (8005418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800540a:	5ccb      	ldrb	r3, [r1, r3]
 800540c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005410:	4618      	mov	r0, r3
 8005412:	bd80      	pop	{r7, pc}
 8005414:	40023800 	.word	0x40023800
 8005418:	0800b278 	.word	0x0800b278

0800541c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005420:	f7ff ffdc 	bl	80053dc <HAL_RCC_GetHCLKFreq>
 8005424:	4602      	mov	r2, r0
 8005426:	4b05      	ldr	r3, [pc, #20]	@ (800543c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	0b5b      	lsrs	r3, r3, #13
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	4903      	ldr	r1, [pc, #12]	@ (8005440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005432:	5ccb      	ldrb	r3, [r1, r3]
 8005434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005438:	4618      	mov	r0, r3
 800543a:	bd80      	pop	{r7, pc}
 800543c:	40023800 	.word	0x40023800
 8005440:	0800b278 	.word	0x0800b278

08005444 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b088      	sub	sp, #32
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800544c:	2300      	movs	r3, #0
 800544e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005450:	2300      	movs	r3, #0
 8005452:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005454:	2300      	movs	r3, #0
 8005456:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005458:	2300      	movs	r3, #0
 800545a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800545c:	2300      	movs	r3, #0
 800545e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d012      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800546c:	4b69      	ldr	r3, [pc, #420]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	4a68      	ldr	r2, [pc, #416]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005472:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005476:	6093      	str	r3, [r2, #8]
 8005478:	4b66      	ldr	r3, [pc, #408]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005480:	4964      	ldr	r1, [pc, #400]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005482:	4313      	orrs	r3, r2
 8005484:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800548e:	2301      	movs	r3, #1
 8005490:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d017      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800549e:	4b5d      	ldr	r3, [pc, #372]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054a4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ac:	4959      	ldr	r1, [pc, #356]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054bc:	d101      	bne.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80054be:	2301      	movs	r3, #1
 80054c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80054ca:	2301      	movs	r3, #1
 80054cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d017      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054da:	4b4e      	ldr	r3, [pc, #312]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e8:	494a      	ldr	r1, [pc, #296]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054f8:	d101      	bne.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80054fa:	2301      	movs	r3, #1
 80054fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005506:	2301      	movs	r3, #1
 8005508:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005516:	2301      	movs	r3, #1
 8005518:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0320 	and.w	r3, r3, #32
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 808b 	beq.w	800563e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005528:	4b3a      	ldr	r3, [pc, #232]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800552a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552c:	4a39      	ldr	r2, [pc, #228]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800552e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005532:	6413      	str	r3, [r2, #64]	@ 0x40
 8005534:	4b37      	ldr	r3, [pc, #220]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800553c:	60bb      	str	r3, [r7, #8]
 800553e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005540:	4b35      	ldr	r3, [pc, #212]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a34      	ldr	r2, [pc, #208]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800554a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800554c:	f7fd fe3a 	bl	80031c4 <HAL_GetTick>
 8005550:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005552:	e008      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005554:	f7fd fe36 	bl	80031c4 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b64      	cmp	r3, #100	@ 0x64
 8005560:	d901      	bls.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e38f      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005566:	4b2c      	ldr	r3, [pc, #176]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0f0      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005572:	4b28      	ldr	r3, [pc, #160]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005576:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800557a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d035      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005586:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	429a      	cmp	r2, r3
 800558e:	d02e      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005590:	4b20      	ldr	r3, [pc, #128]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005594:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005598:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800559a:	4b1e      	ldr	r3, [pc, #120]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800559c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800559e:	4a1d      	ldr	r2, [pc, #116]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055a4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055aa:	4a1a      	ldr	r2, [pc, #104]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055b0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80055b2:	4a18      	ldr	r2, [pc, #96]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055b8:	4b16      	ldr	r3, [pc, #88]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d114      	bne.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c4:	f7fd fdfe 	bl	80031c4 <HAL_GetTick>
 80055c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ca:	e00a      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055cc:	f7fd fdfa 	bl	80031c4 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055da:	4293      	cmp	r3, r2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e351      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0ee      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055fa:	d111      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80055fc:	4b05      	ldr	r3, [pc, #20]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005608:	4b04      	ldr	r3, [pc, #16]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800560a:	400b      	ands	r3, r1
 800560c:	4901      	ldr	r1, [pc, #4]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800560e:	4313      	orrs	r3, r2
 8005610:	608b      	str	r3, [r1, #8]
 8005612:	e00b      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005614:	40023800 	.word	0x40023800
 8005618:	40007000 	.word	0x40007000
 800561c:	0ffffcff 	.word	0x0ffffcff
 8005620:	4bac      	ldr	r3, [pc, #688]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	4aab      	ldr	r2, [pc, #684]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005626:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800562a:	6093      	str	r3, [r2, #8]
 800562c:	4ba9      	ldr	r3, [pc, #676]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800562e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005638:	49a6      	ldr	r1, [pc, #664]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800563a:	4313      	orrs	r3, r2
 800563c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0310 	and.w	r3, r3, #16
 8005646:	2b00      	cmp	r3, #0
 8005648:	d010      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800564a:	4ba2      	ldr	r3, [pc, #648]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800564c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005650:	4aa0      	ldr	r2, [pc, #640]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005652:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005656:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800565a:	4b9e      	ldr	r3, [pc, #632]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800565c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005664:	499b      	ldr	r1, [pc, #620]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005678:	4b96      	ldr	r3, [pc, #600]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800567a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800567e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005686:	4993      	ldr	r1, [pc, #588]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005688:	4313      	orrs	r3, r2
 800568a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800569a:	4b8e      	ldr	r3, [pc, #568]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800569c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056a8:	498a      	ldr	r1, [pc, #552]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056bc:	4b85      	ldr	r3, [pc, #532]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056ca:	4982      	ldr	r1, [pc, #520]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056de:	4b7d      	ldr	r3, [pc, #500]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056e4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ec:	4979      	ldr	r1, [pc, #484]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005700:	4b74      	ldr	r3, [pc, #464]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005706:	f023 0203 	bic.w	r2, r3, #3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570e:	4971      	ldr	r1, [pc, #452]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005722:	4b6c      	ldr	r3, [pc, #432]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005728:	f023 020c 	bic.w	r2, r3, #12
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005730:	4968      	ldr	r1, [pc, #416]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00a      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005744:	4b63      	ldr	r3, [pc, #396]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800574a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005752:	4960      	ldr	r1, [pc, #384]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005754:	4313      	orrs	r3, r2
 8005756:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005766:	4b5b      	ldr	r3, [pc, #364]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800576c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005774:	4957      	ldr	r1, [pc, #348]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00a      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005788:	4b52      	ldr	r3, [pc, #328]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800578a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800578e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005796:	494f      	ldr	r1, [pc, #316]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005798:	4313      	orrs	r3, r2
 800579a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80057aa:	4b4a      	ldr	r3, [pc, #296]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b8:	4946      	ldr	r1, [pc, #280]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80057cc:	4b41      	ldr	r3, [pc, #260]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057d2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057da:	493e      	ldr	r1, [pc, #248]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80057ee:	4b39      	ldr	r3, [pc, #228]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057fc:	4935      	ldr	r1, [pc, #212]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00a      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005810:	4b30      	ldr	r3, [pc, #192]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005816:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800581e:	492d      	ldr	r1, [pc, #180]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005820:	4313      	orrs	r3, r2
 8005822:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d011      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005832:	4b28      	ldr	r3, [pc, #160]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005838:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005840:	4924      	ldr	r1, [pc, #144]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005842:	4313      	orrs	r3, r2
 8005844:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800584c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005850:	d101      	bne.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005852:	2301      	movs	r3, #1
 8005854:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0308 	and.w	r3, r3, #8
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005862:	2301      	movs	r3, #1
 8005864:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005872:	4b18      	ldr	r3, [pc, #96]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005878:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005880:	4914      	ldr	r1, [pc, #80]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005882:	4313      	orrs	r3, r2
 8005884:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00b      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005894:	4b0f      	ldr	r3, [pc, #60]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800589a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058a4:	490b      	ldr	r1, [pc, #44]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00f      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80058b8:	4b06      	ldr	r3, [pc, #24]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058be:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058c8:	4902      	ldr	r1, [pc, #8]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80058d0:	e002      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80058d2:	bf00      	nop
 80058d4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00b      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058e4:	4b8a      	ldr	r3, [pc, #552]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f4:	4986      	ldr	r1, [pc, #536]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00b      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005908:	4b81      	ldr	r3, [pc, #516]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800590a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800590e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005918:	497d      	ldr	r1, [pc, #500]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800591a:	4313      	orrs	r3, r2
 800591c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d006      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 80d6 	beq.w	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005934:	4b76      	ldr	r3, [pc, #472]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a75      	ldr	r2, [pc, #468]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800593a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800593e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005940:	f7fd fc40 	bl	80031c4 <HAL_GetTick>
 8005944:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005946:	e008      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005948:	f7fd fc3c 	bl	80031c4 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b64      	cmp	r3, #100	@ 0x64
 8005954:	d901      	bls.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e195      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800595a:	4b6d      	ldr	r3, [pc, #436]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1f0      	bne.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b00      	cmp	r3, #0
 8005970:	d021      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005976:	2b00      	cmp	r3, #0
 8005978:	d11d      	bne.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800597a:	4b65      	ldr	r3, [pc, #404]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800597c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005980:	0c1b      	lsrs	r3, r3, #16
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005988:	4b61      	ldr	r3, [pc, #388]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800598a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800598e:	0e1b      	lsrs	r3, r3, #24
 8005990:	f003 030f 	and.w	r3, r3, #15
 8005994:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	019a      	lsls	r2, r3, #6
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	041b      	lsls	r3, r3, #16
 80059a0:	431a      	orrs	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	061b      	lsls	r3, r3, #24
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	071b      	lsls	r3, r3, #28
 80059ae:	4958      	ldr	r1, [pc, #352]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d004      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059ca:	d00a      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d02e      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059e0:	d129      	bne.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80059e2:	4b4b      	ldr	r3, [pc, #300]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059e8:	0c1b      	lsrs	r3, r3, #16
 80059ea:	f003 0303 	and.w	r3, r3, #3
 80059ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059f0:	4b47      	ldr	r3, [pc, #284]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059f6:	0f1b      	lsrs	r3, r3, #28
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	019a      	lsls	r2, r3, #6
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	041b      	lsls	r3, r3, #16
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	061b      	lsls	r3, r3, #24
 8005a10:	431a      	orrs	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	071b      	lsls	r3, r3, #28
 8005a16:	493e      	ldr	r1, [pc, #248]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005a1e:	4b3c      	ldr	r3, [pc, #240]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a24:	f023 021f 	bic.w	r2, r3, #31
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	4938      	ldr	r1, [pc, #224]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d01d      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a42:	4b33      	ldr	r3, [pc, #204]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a48:	0e1b      	lsrs	r3, r3, #24
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a50:	4b2f      	ldr	r3, [pc, #188]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a56:	0f1b      	lsrs	r3, r3, #28
 8005a58:	f003 0307 	and.w	r3, r3, #7
 8005a5c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	019a      	lsls	r2, r3, #6
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	041b      	lsls	r3, r3, #16
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	061b      	lsls	r3, r3, #24
 8005a70:	431a      	orrs	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	071b      	lsls	r3, r3, #28
 8005a76:	4926      	ldr	r1, [pc, #152]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d011      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	019a      	lsls	r2, r3, #6
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	041b      	lsls	r3, r3, #16
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	061b      	lsls	r3, r3, #24
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	071b      	lsls	r3, r3, #28
 8005aa6:	491a      	ldr	r1, [pc, #104]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005aae:	4b18      	ldr	r3, [pc, #96]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a17      	ldr	r2, [pc, #92]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ab4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ab8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aba:	f7fd fb83 	bl	80031c4 <HAL_GetTick>
 8005abe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ac2:	f7fd fb7f 	bl	80031c4 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b64      	cmp	r3, #100	@ 0x64
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e0d8      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0f0      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	f040 80ce 	bne.w	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005ae8:	4b09      	ldr	r3, [pc, #36]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a08      	ldr	r2, [pc, #32]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005af2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005af4:	f7fd fb66 	bl	80031c4 <HAL_GetTick>
 8005af8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005afa:	e00b      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005afc:	f7fd fb62 	bl	80031c4 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b64      	cmp	r3, #100	@ 0x64
 8005b08:	d904      	bls.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e0bb      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005b0e:	bf00      	nop
 8005b10:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b14:	4b5e      	ldr	r3, [pc, #376]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b20:	d0ec      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d009      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d02e      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d12a      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b4a:	4b51      	ldr	r3, [pc, #324]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b50:	0c1b      	lsrs	r3, r3, #16
 8005b52:	f003 0303 	and.w	r3, r3, #3
 8005b56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b58:	4b4d      	ldr	r3, [pc, #308]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b5e:	0f1b      	lsrs	r3, r3, #28
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	019a      	lsls	r2, r3, #6
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	041b      	lsls	r3, r3, #16
 8005b70:	431a      	orrs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	061b      	lsls	r3, r3, #24
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	071b      	lsls	r3, r3, #28
 8005b7e:	4944      	ldr	r1, [pc, #272]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b86:	4b42      	ldr	r3, [pc, #264]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b8c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b94:	3b01      	subs	r3, #1
 8005b96:	021b      	lsls	r3, r3, #8
 8005b98:	493d      	ldr	r1, [pc, #244]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d022      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bb4:	d11d      	bne.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005bb6:	4b36      	ldr	r3, [pc, #216]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bbc:	0e1b      	lsrs	r3, r3, #24
 8005bbe:	f003 030f 	and.w	r3, r3, #15
 8005bc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005bc4:	4b32      	ldr	r3, [pc, #200]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bca:	0f1b      	lsrs	r3, r3, #28
 8005bcc:	f003 0307 	and.w	r3, r3, #7
 8005bd0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	019a      	lsls	r2, r3, #6
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	041b      	lsls	r3, r3, #16
 8005bde:	431a      	orrs	r2, r3
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	061b      	lsls	r3, r3, #24
 8005be4:	431a      	orrs	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	071b      	lsls	r3, r3, #28
 8005bea:	4929      	ldr	r1, [pc, #164]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0308 	and.w	r3, r3, #8
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d028      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005bfe:	4b24      	ldr	r3, [pc, #144]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c04:	0e1b      	lsrs	r3, r3, #24
 8005c06:	f003 030f 	and.w	r3, r3, #15
 8005c0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c0c:	4b20      	ldr	r3, [pc, #128]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c12:	0c1b      	lsrs	r3, r3, #16
 8005c14:	f003 0303 	and.w	r3, r3, #3
 8005c18:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	019a      	lsls	r2, r3, #6
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	041b      	lsls	r3, r3, #16
 8005c24:	431a      	orrs	r2, r3
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	061b      	lsls	r3, r3, #24
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	071b      	lsls	r3, r3, #28
 8005c32:	4917      	ldr	r1, [pc, #92]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005c3a:	4b15      	ldr	r3, [pc, #84]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c48:	4911      	ldr	r1, [pc, #68]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005c50:	4b0f      	ldr	r3, [pc, #60]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a0e      	ldr	r2, [pc, #56]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c5c:	f7fd fab2 	bl	80031c4 <HAL_GetTick>
 8005c60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c62:	e008      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c64:	f7fd faae 	bl	80031c4 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b64      	cmp	r3, #100	@ 0x64
 8005c70:	d901      	bls.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e007      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c76:	4b06      	ldr	r3, [pc, #24]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c82:	d1ef      	bne.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3720      	adds	r7, #32
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	40023800 	.word	0x40023800

08005c94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e09d      	b.n	8005de2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d108      	bne.n	8005cc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cb6:	d009      	beq.n	8005ccc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	61da      	str	r2, [r3, #28]
 8005cbe:	e005      	b.n	8005ccc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d106      	bne.n	8005cec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fc fc94 	bl	8002614 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d0c:	d902      	bls.n	8005d14 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	e002      	b.n	8005d1a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005d18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005d22:	d007      	beq.n	8005d34 <HAL_SPI_Init+0xa0>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d2c:	d002      	beq.n	8005d34 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d44:	431a      	orrs	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d76:	ea42 0103 	orr.w	r1, r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	0c1b      	lsrs	r3, r3, #16
 8005d90:	f003 0204 	and.w	r2, r3, #4
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d98:	f003 0310 	and.w	r3, r3, #16
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005da2:	f003 0308 	and.w	r3, r3, #8
 8005da6:	431a      	orrs	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005db0:	ea42 0103 	orr.w	r1, r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	69da      	ldr	r2, [r3, #28]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005dd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b082      	sub	sp, #8
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e049      	b.n	8005e90 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d106      	bne.n	8005e16 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7fc fc7f 	bl	8002714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2202      	movs	r2, #2
 8005e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	3304      	adds	r3, #4
 8005e26:	4619      	mov	r1, r3
 8005e28:	4610      	mov	r0, r2
 8005e2a:	f001 f819 	bl	8006e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d001      	beq.n	8005eb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e054      	b.n	8005f5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0201 	orr.w	r2, r2, #1
 8005ec6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a26      	ldr	r2, [pc, #152]	@ (8005f68 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d022      	beq.n	8005f18 <HAL_TIM_Base_Start_IT+0x80>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eda:	d01d      	beq.n	8005f18 <HAL_TIM_Base_Start_IT+0x80>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a22      	ldr	r2, [pc, #136]	@ (8005f6c <HAL_TIM_Base_Start_IT+0xd4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d018      	beq.n	8005f18 <HAL_TIM_Base_Start_IT+0x80>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a21      	ldr	r2, [pc, #132]	@ (8005f70 <HAL_TIM_Base_Start_IT+0xd8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d013      	beq.n	8005f18 <HAL_TIM_Base_Start_IT+0x80>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1f      	ldr	r2, [pc, #124]	@ (8005f74 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00e      	beq.n	8005f18 <HAL_TIM_Base_Start_IT+0x80>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1e      	ldr	r2, [pc, #120]	@ (8005f78 <HAL_TIM_Base_Start_IT+0xe0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d009      	beq.n	8005f18 <HAL_TIM_Base_Start_IT+0x80>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a1c      	ldr	r2, [pc, #112]	@ (8005f7c <HAL_TIM_Base_Start_IT+0xe4>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d004      	beq.n	8005f18 <HAL_TIM_Base_Start_IT+0x80>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a1b      	ldr	r2, [pc, #108]	@ (8005f80 <HAL_TIM_Base_Start_IT+0xe8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d115      	bne.n	8005f44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689a      	ldr	r2, [r3, #8]
 8005f1e:	4b19      	ldr	r3, [pc, #100]	@ (8005f84 <HAL_TIM_Base_Start_IT+0xec>)
 8005f20:	4013      	ands	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2b06      	cmp	r3, #6
 8005f28:	d015      	beq.n	8005f56 <HAL_TIM_Base_Start_IT+0xbe>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f30:	d011      	beq.n	8005f56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f042 0201 	orr.w	r2, r2, #1
 8005f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f42:	e008      	b.n	8005f56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f042 0201 	orr.w	r2, r2, #1
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	e000      	b.n	8005f58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	40010000 	.word	0x40010000
 8005f6c:	40000400 	.word	0x40000400
 8005f70:	40000800 	.word	0x40000800
 8005f74:	40000c00 	.word	0x40000c00
 8005f78:	40010400 	.word	0x40010400
 8005f7c:	40014000 	.word	0x40014000
 8005f80:	40001800 	.word	0x40001800
 8005f84:	00010007 	.word	0x00010007

08005f88 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e049      	b.n	800602e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d106      	bne.n	8005fb4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f841 	bl	8006036 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4610      	mov	r0, r2
 8005fc8:	f000 ff4a 	bl	8006e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006036:	b480      	push	{r7}
 8006038:	b083      	sub	sp, #12
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800603e:	bf00      	nop
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b082      	sub	sp, #8
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e049      	b.n	80060f0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	d106      	bne.n	8006076 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7fc fc5f 	bl	8002934 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2202      	movs	r2, #2
 800607a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	3304      	adds	r3, #4
 8006086:	4619      	mov	r1, r3
 8006088:	4610      	mov	r0, r2
 800608a:	f000 fee9 	bl	8006e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d109      	bne.n	800611c <HAL_TIM_PWM_Start+0x24>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b01      	cmp	r3, #1
 8006112:	bf14      	ite	ne
 8006114:	2301      	movne	r3, #1
 8006116:	2300      	moveq	r3, #0
 8006118:	b2db      	uxtb	r3, r3
 800611a:	e03c      	b.n	8006196 <HAL_TIM_PWM_Start+0x9e>
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2b04      	cmp	r3, #4
 8006120:	d109      	bne.n	8006136 <HAL_TIM_PWM_Start+0x3e>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b01      	cmp	r3, #1
 800612c:	bf14      	ite	ne
 800612e:	2301      	movne	r3, #1
 8006130:	2300      	moveq	r3, #0
 8006132:	b2db      	uxtb	r3, r3
 8006134:	e02f      	b.n	8006196 <HAL_TIM_PWM_Start+0x9e>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b08      	cmp	r3, #8
 800613a:	d109      	bne.n	8006150 <HAL_TIM_PWM_Start+0x58>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b01      	cmp	r3, #1
 8006146:	bf14      	ite	ne
 8006148:	2301      	movne	r3, #1
 800614a:	2300      	moveq	r3, #0
 800614c:	b2db      	uxtb	r3, r3
 800614e:	e022      	b.n	8006196 <HAL_TIM_PWM_Start+0x9e>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b0c      	cmp	r3, #12
 8006154:	d109      	bne.n	800616a <HAL_TIM_PWM_Start+0x72>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b01      	cmp	r3, #1
 8006160:	bf14      	ite	ne
 8006162:	2301      	movne	r3, #1
 8006164:	2300      	moveq	r3, #0
 8006166:	b2db      	uxtb	r3, r3
 8006168:	e015      	b.n	8006196 <HAL_TIM_PWM_Start+0x9e>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b10      	cmp	r3, #16
 800616e:	d109      	bne.n	8006184 <HAL_TIM_PWM_Start+0x8c>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b01      	cmp	r3, #1
 800617a:	bf14      	ite	ne
 800617c:	2301      	movne	r3, #1
 800617e:	2300      	moveq	r3, #0
 8006180:	b2db      	uxtb	r3, r3
 8006182:	e008      	b.n	8006196 <HAL_TIM_PWM_Start+0x9e>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b01      	cmp	r3, #1
 800618e:	bf14      	ite	ne
 8006190:	2301      	movne	r3, #1
 8006192:	2300      	moveq	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e092      	b.n	80062c4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d104      	bne.n	80061ae <HAL_TIM_PWM_Start+0xb6>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2202      	movs	r2, #2
 80061a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061ac:	e023      	b.n	80061f6 <HAL_TIM_PWM_Start+0xfe>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b04      	cmp	r3, #4
 80061b2:	d104      	bne.n	80061be <HAL_TIM_PWM_Start+0xc6>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061bc:	e01b      	b.n	80061f6 <HAL_TIM_PWM_Start+0xfe>
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	d104      	bne.n	80061ce <HAL_TIM_PWM_Start+0xd6>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061cc:	e013      	b.n	80061f6 <HAL_TIM_PWM_Start+0xfe>
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b0c      	cmp	r3, #12
 80061d2:	d104      	bne.n	80061de <HAL_TIM_PWM_Start+0xe6>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061dc:	e00b      	b.n	80061f6 <HAL_TIM_PWM_Start+0xfe>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b10      	cmp	r3, #16
 80061e2:	d104      	bne.n	80061ee <HAL_TIM_PWM_Start+0xf6>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061ec:	e003      	b.n	80061f6 <HAL_TIM_PWM_Start+0xfe>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2202      	movs	r2, #2
 80061f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2201      	movs	r2, #1
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	4618      	mov	r0, r3
 8006200:	f001 fafc 	bl	80077fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a30      	ldr	r2, [pc, #192]	@ (80062cc <HAL_TIM_PWM_Start+0x1d4>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d004      	beq.n	8006218 <HAL_TIM_PWM_Start+0x120>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a2f      	ldr	r2, [pc, #188]	@ (80062d0 <HAL_TIM_PWM_Start+0x1d8>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d101      	bne.n	800621c <HAL_TIM_PWM_Start+0x124>
 8006218:	2301      	movs	r3, #1
 800621a:	e000      	b.n	800621e <HAL_TIM_PWM_Start+0x126>
 800621c:	2300      	movs	r3, #0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d007      	beq.n	8006232 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006230:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a25      	ldr	r2, [pc, #148]	@ (80062cc <HAL_TIM_PWM_Start+0x1d4>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d022      	beq.n	8006282 <HAL_TIM_PWM_Start+0x18a>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006244:	d01d      	beq.n	8006282 <HAL_TIM_PWM_Start+0x18a>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a22      	ldr	r2, [pc, #136]	@ (80062d4 <HAL_TIM_PWM_Start+0x1dc>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d018      	beq.n	8006282 <HAL_TIM_PWM_Start+0x18a>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a20      	ldr	r2, [pc, #128]	@ (80062d8 <HAL_TIM_PWM_Start+0x1e0>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d013      	beq.n	8006282 <HAL_TIM_PWM_Start+0x18a>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a1f      	ldr	r2, [pc, #124]	@ (80062dc <HAL_TIM_PWM_Start+0x1e4>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d00e      	beq.n	8006282 <HAL_TIM_PWM_Start+0x18a>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a19      	ldr	r2, [pc, #100]	@ (80062d0 <HAL_TIM_PWM_Start+0x1d8>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d009      	beq.n	8006282 <HAL_TIM_PWM_Start+0x18a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a1b      	ldr	r2, [pc, #108]	@ (80062e0 <HAL_TIM_PWM_Start+0x1e8>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d004      	beq.n	8006282 <HAL_TIM_PWM_Start+0x18a>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a19      	ldr	r2, [pc, #100]	@ (80062e4 <HAL_TIM_PWM_Start+0x1ec>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d115      	bne.n	80062ae <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	4b17      	ldr	r3, [pc, #92]	@ (80062e8 <HAL_TIM_PWM_Start+0x1f0>)
 800628a:	4013      	ands	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b06      	cmp	r3, #6
 8006292:	d015      	beq.n	80062c0 <HAL_TIM_PWM_Start+0x1c8>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800629a:	d011      	beq.n	80062c0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f042 0201 	orr.w	r2, r2, #1
 80062aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ac:	e008      	b.n	80062c0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f042 0201 	orr.w	r2, r2, #1
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	e000      	b.n	80062c2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	40010000 	.word	0x40010000
 80062d0:	40010400 	.word	0x40010400
 80062d4:	40000400 	.word	0x40000400
 80062d8:	40000800 	.word	0x40000800
 80062dc:	40000c00 	.word	0x40000c00
 80062e0:	40014000 	.word	0x40014000
 80062e4:	40001800 	.word	0x40001800
 80062e8:	00010007 	.word	0x00010007

080062ec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e049      	b.n	8006392 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d106      	bne.n	8006318 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f841 	bl	800639a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2202      	movs	r2, #2
 800631c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	3304      	adds	r3, #4
 8006328:	4619      	mov	r1, r3
 800632a:	4610      	mov	r0, r2
 800632c:	f000 fd98 	bl	8006e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800639a:	b480      	push	{r7}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80063a2:	bf00      	nop
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
	...

080063b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d101      	bne.n	80063c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e08f      	b.n	80064e4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d106      	bne.n	80063de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7fc fa35 	bl	8002848 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2202      	movs	r2, #2
 80063e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6899      	ldr	r1, [r3, #8]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	4b3e      	ldr	r3, [pc, #248]	@ (80064ec <HAL_TIM_Encoder_Init+0x13c>)
 80063f2:	400b      	ands	r3, r1
 80063f4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	3304      	adds	r3, #4
 80063fe:	4619      	mov	r1, r3
 8006400:	4610      	mov	r0, r2
 8006402:	f000 fd2d 	bl	8006e60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	4313      	orrs	r3, r2
 8006426:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	4b31      	ldr	r3, [pc, #196]	@ (80064f0 <HAL_TIM_Encoder_Init+0x140>)
 800642c:	4013      	ands	r3, r2
 800642e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	021b      	lsls	r3, r3, #8
 800643a:	4313      	orrs	r3, r2
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	4313      	orrs	r3, r2
 8006440:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	4b2b      	ldr	r3, [pc, #172]	@ (80064f4 <HAL_TIM_Encoder_Init+0x144>)
 8006446:	4013      	ands	r3, r2
 8006448:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	4b2a      	ldr	r3, [pc, #168]	@ (80064f8 <HAL_TIM_Encoder_Init+0x148>)
 800644e:	4013      	ands	r3, r2
 8006450:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	021b      	lsls	r3, r3, #8
 800645c:	4313      	orrs	r3, r2
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4313      	orrs	r3, r2
 8006462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	011a      	lsls	r2, r3, #4
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	031b      	lsls	r3, r3, #12
 8006470:	4313      	orrs	r3, r2
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	4313      	orrs	r3, r2
 8006476:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800647e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006486:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	4313      	orrs	r3, r2
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4313      	orrs	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3718      	adds	r7, #24
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	fffebff8 	.word	0xfffebff8
 80064f0:	fffffcfc 	.word	0xfffffcfc
 80064f4:	fffff3f3 	.word	0xfffff3f3
 80064f8:	ffff0f0f 	.word	0xffff0f0f

080064fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800650c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006514:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800651c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006524:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d110      	bne.n	800654e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800652c:	7bfb      	ldrb	r3, [r7, #15]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d102      	bne.n	8006538 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006532:	7b7b      	ldrb	r3, [r7, #13]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d001      	beq.n	800653c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e069      	b.n	8006610 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2202      	movs	r2, #2
 8006540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2202      	movs	r2, #2
 8006548:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800654c:	e031      	b.n	80065b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b04      	cmp	r3, #4
 8006552:	d110      	bne.n	8006576 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006554:	7bbb      	ldrb	r3, [r7, #14]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d102      	bne.n	8006560 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800655a:	7b3b      	ldrb	r3, [r7, #12]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d001      	beq.n	8006564 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e055      	b.n	8006610 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006574:	e01d      	b.n	80065b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006576:	7bfb      	ldrb	r3, [r7, #15]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d108      	bne.n	800658e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800657c:	7bbb      	ldrb	r3, [r7, #14]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d105      	bne.n	800658e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006582:	7b7b      	ldrb	r3, [r7, #13]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d102      	bne.n	800658e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006588:	7b3b      	ldrb	r3, [r7, #12]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d001      	beq.n	8006592 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e03e      	b.n	8006610 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2202      	movs	r2, #2
 8006596:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2202      	movs	r2, #2
 800659e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2202      	movs	r2, #2
 80065a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2202      	movs	r2, #2
 80065ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d003      	beq.n	80065c0 <HAL_TIM_Encoder_Start+0xc4>
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	2b04      	cmp	r3, #4
 80065bc:	d008      	beq.n	80065d0 <HAL_TIM_Encoder_Start+0xd4>
 80065be:	e00f      	b.n	80065e0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2201      	movs	r2, #1
 80065c6:	2100      	movs	r1, #0
 80065c8:	4618      	mov	r0, r3
 80065ca:	f001 f917 	bl	80077fc <TIM_CCxChannelCmd>
      break;
 80065ce:	e016      	b.n	80065fe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2201      	movs	r2, #1
 80065d6:	2104      	movs	r1, #4
 80065d8:	4618      	mov	r0, r3
 80065da:	f001 f90f 	bl	80077fc <TIM_CCxChannelCmd>
      break;
 80065de:	e00e      	b.n	80065fe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2201      	movs	r2, #1
 80065e6:	2100      	movs	r1, #0
 80065e8:	4618      	mov	r0, r3
 80065ea:	f001 f907 	bl	80077fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2201      	movs	r2, #1
 80065f4:	2104      	movs	r1, #4
 80065f6:	4618      	mov	r0, r3
 80065f8:	f001 f900 	bl	80077fc <TIM_CCxChannelCmd>
      break;
 80065fc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f042 0201 	orr.w	r2, r2, #1
 800660c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	2b00      	cmp	r3, #0
 8006638:	d020      	beq.n	800667c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	2b00      	cmp	r3, #0
 8006642:	d01b      	beq.n	800667c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f06f 0202 	mvn.w	r2, #2
 800664c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	f003 0303 	and.w	r3, r3, #3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d003      	beq.n	800666a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fbde 	bl	8006e24 <HAL_TIM_IC_CaptureCallback>
 8006668:	e005      	b.n	8006676 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fbd0 	bl	8006e10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fbe1 	bl	8006e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f003 0304 	and.w	r3, r3, #4
 8006682:	2b00      	cmp	r3, #0
 8006684:	d020      	beq.n	80066c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01b      	beq.n	80066c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f06f 0204 	mvn.w	r2, #4
 8006698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2202      	movs	r2, #2
 800669e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fbb8 	bl	8006e24 <HAL_TIM_IC_CaptureCallback>
 80066b4:	e005      	b.n	80066c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fbaa 	bl	8006e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fbbb 	bl	8006e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f003 0308 	and.w	r3, r3, #8
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d020      	beq.n	8006714 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f003 0308 	and.w	r3, r3, #8
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d01b      	beq.n	8006714 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f06f 0208 	mvn.w	r2, #8
 80066e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2204      	movs	r2, #4
 80066ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	f003 0303 	and.w	r3, r3, #3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fb92 	bl	8006e24 <HAL_TIM_IC_CaptureCallback>
 8006700:	e005      	b.n	800670e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fb84 	bl	8006e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fb95 	bl	8006e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	f003 0310 	and.w	r3, r3, #16
 800671a:	2b00      	cmp	r3, #0
 800671c:	d020      	beq.n	8006760 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f003 0310 	and.w	r3, r3, #16
 8006724:	2b00      	cmp	r3, #0
 8006726:	d01b      	beq.n	8006760 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f06f 0210 	mvn.w	r2, #16
 8006730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2208      	movs	r2, #8
 8006736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fb6c 	bl	8006e24 <HAL_TIM_IC_CaptureCallback>
 800674c:	e005      	b.n	800675a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fb5e 	bl	8006e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fb6f 	bl	8006e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00c      	beq.n	8006784 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b00      	cmp	r3, #0
 8006772:	d007      	beq.n	8006784 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f06f 0201 	mvn.w	r2, #1
 800677c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7fa fa5c 	bl	8000c3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800678a:	2b00      	cmp	r3, #0
 800678c:	d104      	bne.n	8006798 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00c      	beq.n	80067b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d007      	beq.n	80067b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80067aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f001 f961 	bl	8007a74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00c      	beq.n	80067d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d007      	beq.n	80067d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80067ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f001 f959 	bl	8007a88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00c      	beq.n	80067fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d007      	beq.n	80067fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80067f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fb29 	bl	8006e4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f003 0320 	and.w	r3, r3, #32
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00c      	beq.n	800681e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f003 0320 	and.w	r3, r3, #32
 800680a:	2b00      	cmp	r3, #0
 800680c:	d007      	beq.n	800681e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f06f 0220 	mvn.w	r2, #32
 8006816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f001 f921 	bl	8007a60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800681e:	bf00      	nop
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
	...

08006828 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800683e:	2b01      	cmp	r3, #1
 8006840:	d101      	bne.n	8006846 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006842:	2302      	movs	r3, #2
 8006844:	e066      	b.n	8006914 <HAL_TIM_OC_ConfigChannel+0xec>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b14      	cmp	r3, #20
 8006852:	d857      	bhi.n	8006904 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006854:	a201      	add	r2, pc, #4	@ (adr r2, 800685c <HAL_TIM_OC_ConfigChannel+0x34>)
 8006856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685a:	bf00      	nop
 800685c:	080068b1 	.word	0x080068b1
 8006860:	08006905 	.word	0x08006905
 8006864:	08006905 	.word	0x08006905
 8006868:	08006905 	.word	0x08006905
 800686c:	080068bf 	.word	0x080068bf
 8006870:	08006905 	.word	0x08006905
 8006874:	08006905 	.word	0x08006905
 8006878:	08006905 	.word	0x08006905
 800687c:	080068cd 	.word	0x080068cd
 8006880:	08006905 	.word	0x08006905
 8006884:	08006905 	.word	0x08006905
 8006888:	08006905 	.word	0x08006905
 800688c:	080068db 	.word	0x080068db
 8006890:	08006905 	.word	0x08006905
 8006894:	08006905 	.word	0x08006905
 8006898:	08006905 	.word	0x08006905
 800689c:	080068e9 	.word	0x080068e9
 80068a0:	08006905 	.word	0x08006905
 80068a4:	08006905 	.word	0x08006905
 80068a8:	08006905 	.word	0x08006905
 80068ac:	080068f7 	.word	0x080068f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68b9      	ldr	r1, [r7, #8]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 fb7e 	bl	8006fb8 <TIM_OC1_SetConfig>
      break;
 80068bc:	e025      	b.n	800690a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68b9      	ldr	r1, [r7, #8]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 fbe9 	bl	800709c <TIM_OC2_SetConfig>
      break;
 80068ca:	e01e      	b.n	800690a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68b9      	ldr	r1, [r7, #8]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fc5a 	bl	800718c <TIM_OC3_SetConfig>
      break;
 80068d8:	e017      	b.n	800690a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68b9      	ldr	r1, [r7, #8]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f000 fcc9 	bl	8007278 <TIM_OC4_SetConfig>
      break;
 80068e6:	e010      	b.n	800690a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68b9      	ldr	r1, [r7, #8]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 fd1a 	bl	8007328 <TIM_OC5_SetConfig>
      break;
 80068f4:	e009      	b.n	800690a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68b9      	ldr	r1, [r7, #8]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 fd65 	bl	80073cc <TIM_OC6_SetConfig>
      break;
 8006902:	e002      	b.n	800690a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	75fb      	strb	r3, [r7, #23]
      break;
 8006908:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006912:	7dfb      	ldrb	r3, [r7, #23]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3718      	adds	r7, #24
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006928:	2300      	movs	r3, #0
 800692a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006932:	2b01      	cmp	r3, #1
 8006934:	d101      	bne.n	800693a <HAL_TIM_IC_ConfigChannel+0x1e>
 8006936:	2302      	movs	r3, #2
 8006938:	e088      	b.n	8006a4c <HAL_TIM_IC_ConfigChannel+0x130>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d11b      	bne.n	8006980 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006958:	f000 fd8c 	bl	8007474 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699a      	ldr	r2, [r3, #24]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f022 020c 	bic.w	r2, r2, #12
 800696a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6999      	ldr	r1, [r3, #24]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	619a      	str	r2, [r3, #24]
 800697e:	e060      	b.n	8006a42 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b04      	cmp	r3, #4
 8006984:	d11c      	bne.n	80069c0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006996:	f000 fe10 	bl	80075ba <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	699a      	ldr	r2, [r3, #24]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80069a8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6999      	ldr	r1, [r3, #24]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	021a      	lsls	r2, r3, #8
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	619a      	str	r2, [r3, #24]
 80069be:	e040      	b.n	8006a42 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b08      	cmp	r3, #8
 80069c4:	d11b      	bne.n	80069fe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80069d6:	f000 fe5d 	bl	8007694 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	69da      	ldr	r2, [r3, #28]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f022 020c 	bic.w	r2, r2, #12
 80069e8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	69d9      	ldr	r1, [r3, #28]
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	689a      	ldr	r2, [r3, #8]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	61da      	str	r2, [r3, #28]
 80069fc:	e021      	b.n	8006a42 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b0c      	cmp	r3, #12
 8006a02:	d11c      	bne.n	8006a3e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006a14:	f000 fe7a 	bl	800770c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	69da      	ldr	r2, [r3, #28]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006a26:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	69d9      	ldr	r1, [r3, #28]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	021a      	lsls	r2, r3, #8
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	61da      	str	r2, [r3, #28]
 8006a3c:	e001      	b.n	8006a42 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3718      	adds	r7, #24
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a60:	2300      	movs	r3, #0
 8006a62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d101      	bne.n	8006a72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a6e:	2302      	movs	r3, #2
 8006a70:	e0ff      	b.n	8006c72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b14      	cmp	r3, #20
 8006a7e:	f200 80f0 	bhi.w	8006c62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006a82:	a201      	add	r2, pc, #4	@ (adr r2, 8006a88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a88:	08006add 	.word	0x08006add
 8006a8c:	08006c63 	.word	0x08006c63
 8006a90:	08006c63 	.word	0x08006c63
 8006a94:	08006c63 	.word	0x08006c63
 8006a98:	08006b1d 	.word	0x08006b1d
 8006a9c:	08006c63 	.word	0x08006c63
 8006aa0:	08006c63 	.word	0x08006c63
 8006aa4:	08006c63 	.word	0x08006c63
 8006aa8:	08006b5f 	.word	0x08006b5f
 8006aac:	08006c63 	.word	0x08006c63
 8006ab0:	08006c63 	.word	0x08006c63
 8006ab4:	08006c63 	.word	0x08006c63
 8006ab8:	08006b9f 	.word	0x08006b9f
 8006abc:	08006c63 	.word	0x08006c63
 8006ac0:	08006c63 	.word	0x08006c63
 8006ac4:	08006c63 	.word	0x08006c63
 8006ac8:	08006be1 	.word	0x08006be1
 8006acc:	08006c63 	.word	0x08006c63
 8006ad0:	08006c63 	.word	0x08006c63
 8006ad4:	08006c63 	.word	0x08006c63
 8006ad8:	08006c21 	.word	0x08006c21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68b9      	ldr	r1, [r7, #8]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 fa68 	bl	8006fb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	699a      	ldr	r2, [r3, #24]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f042 0208 	orr.w	r2, r2, #8
 8006af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	699a      	ldr	r2, [r3, #24]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 0204 	bic.w	r2, r2, #4
 8006b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6999      	ldr	r1, [r3, #24]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	691a      	ldr	r2, [r3, #16]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	619a      	str	r2, [r3, #24]
      break;
 8006b1a:	e0a5      	b.n	8006c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68b9      	ldr	r1, [r7, #8]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 faba 	bl	800709c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699a      	ldr	r2, [r3, #24]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699a      	ldr	r2, [r3, #24]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6999      	ldr	r1, [r3, #24]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	021a      	lsls	r2, r3, #8
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	619a      	str	r2, [r3, #24]
      break;
 8006b5c:	e084      	b.n	8006c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68b9      	ldr	r1, [r7, #8]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 fb11 	bl	800718c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69da      	ldr	r2, [r3, #28]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f042 0208 	orr.w	r2, r2, #8
 8006b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69da      	ldr	r2, [r3, #28]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0204 	bic.w	r2, r2, #4
 8006b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	69d9      	ldr	r1, [r3, #28]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	691a      	ldr	r2, [r3, #16]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	61da      	str	r2, [r3, #28]
      break;
 8006b9c:	e064      	b.n	8006c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68b9      	ldr	r1, [r7, #8]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 fb67 	bl	8007278 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69da      	ldr	r2, [r3, #28]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69da      	ldr	r2, [r3, #28]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69d9      	ldr	r1, [r3, #28]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	021a      	lsls	r2, r3, #8
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	61da      	str	r2, [r3, #28]
      break;
 8006bde:	e043      	b.n	8006c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68b9      	ldr	r1, [r7, #8]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 fb9e 	bl	8007328 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0208 	orr.w	r2, r2, #8
 8006bfa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 0204 	bic.w	r2, r2, #4
 8006c0a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	691a      	ldr	r2, [r3, #16]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006c1e:	e023      	b.n	8006c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68b9      	ldr	r1, [r7, #8]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 fbd0 	bl	80073cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c3a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c4a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	021a      	lsls	r2, r3, #8
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006c60:	e002      	b.n	8006c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	75fb      	strb	r3, [r7, #23]
      break;
 8006c66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3718      	adds	r7, #24
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop

08006c7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d101      	bne.n	8006c98 <HAL_TIM_ConfigClockSource+0x1c>
 8006c94:	2302      	movs	r3, #2
 8006c96:	e0b4      	b.n	8006e02 <HAL_TIM_ConfigClockSource+0x186>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	4b56      	ldr	r3, [pc, #344]	@ (8006e0c <HAL_TIM_ConfigClockSource+0x190>)
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cd0:	d03e      	beq.n	8006d50 <HAL_TIM_ConfigClockSource+0xd4>
 8006cd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cd6:	f200 8087 	bhi.w	8006de8 <HAL_TIM_ConfigClockSource+0x16c>
 8006cda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cde:	f000 8086 	beq.w	8006dee <HAL_TIM_ConfigClockSource+0x172>
 8006ce2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ce6:	d87f      	bhi.n	8006de8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ce8:	2b70      	cmp	r3, #112	@ 0x70
 8006cea:	d01a      	beq.n	8006d22 <HAL_TIM_ConfigClockSource+0xa6>
 8006cec:	2b70      	cmp	r3, #112	@ 0x70
 8006cee:	d87b      	bhi.n	8006de8 <HAL_TIM_ConfigClockSource+0x16c>
 8006cf0:	2b60      	cmp	r3, #96	@ 0x60
 8006cf2:	d050      	beq.n	8006d96 <HAL_TIM_ConfigClockSource+0x11a>
 8006cf4:	2b60      	cmp	r3, #96	@ 0x60
 8006cf6:	d877      	bhi.n	8006de8 <HAL_TIM_ConfigClockSource+0x16c>
 8006cf8:	2b50      	cmp	r3, #80	@ 0x50
 8006cfa:	d03c      	beq.n	8006d76 <HAL_TIM_ConfigClockSource+0xfa>
 8006cfc:	2b50      	cmp	r3, #80	@ 0x50
 8006cfe:	d873      	bhi.n	8006de8 <HAL_TIM_ConfigClockSource+0x16c>
 8006d00:	2b40      	cmp	r3, #64	@ 0x40
 8006d02:	d058      	beq.n	8006db6 <HAL_TIM_ConfigClockSource+0x13a>
 8006d04:	2b40      	cmp	r3, #64	@ 0x40
 8006d06:	d86f      	bhi.n	8006de8 <HAL_TIM_ConfigClockSource+0x16c>
 8006d08:	2b30      	cmp	r3, #48	@ 0x30
 8006d0a:	d064      	beq.n	8006dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8006d0c:	2b30      	cmp	r3, #48	@ 0x30
 8006d0e:	d86b      	bhi.n	8006de8 <HAL_TIM_ConfigClockSource+0x16c>
 8006d10:	2b20      	cmp	r3, #32
 8006d12:	d060      	beq.n	8006dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8006d14:	2b20      	cmp	r3, #32
 8006d16:	d867      	bhi.n	8006de8 <HAL_TIM_ConfigClockSource+0x16c>
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d05c      	beq.n	8006dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8006d1c:	2b10      	cmp	r3, #16
 8006d1e:	d05a      	beq.n	8006dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8006d20:	e062      	b.n	8006de8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d32:	f000 fd43 	bl	80077bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006d44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	609a      	str	r2, [r3, #8]
      break;
 8006d4e:	e04f      	b.n	8006df0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d60:	f000 fd2c 	bl	80077bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689a      	ldr	r2, [r3, #8]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d72:	609a      	str	r2, [r3, #8]
      break;
 8006d74:	e03c      	b.n	8006df0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d82:	461a      	mov	r2, r3
 8006d84:	f000 fbea 	bl	800755c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2150      	movs	r1, #80	@ 0x50
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 fcf9 	bl	8007786 <TIM_ITRx_SetConfig>
      break;
 8006d94:	e02c      	b.n	8006df0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006da2:	461a      	mov	r2, r3
 8006da4:	f000 fc46 	bl	8007634 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2160      	movs	r1, #96	@ 0x60
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 fce9 	bl	8007786 <TIM_ITRx_SetConfig>
      break;
 8006db4:	e01c      	b.n	8006df0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f000 fbca 	bl	800755c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2140      	movs	r1, #64	@ 0x40
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 fcd9 	bl	8007786 <TIM_ITRx_SetConfig>
      break;
 8006dd4:	e00c      	b.n	8006df0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4619      	mov	r1, r3
 8006de0:	4610      	mov	r0, r2
 8006de2:	f000 fcd0 	bl	8007786 <TIM_ITRx_SetConfig>
      break;
 8006de6:	e003      	b.n	8006df0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	73fb      	strb	r3, [r7, #15]
      break;
 8006dec:	e000      	b.n	8006df0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006dee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	fffeff88 	.word	0xfffeff88

08006e10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a46      	ldr	r2, [pc, #280]	@ (8006f8c <TIM_Base_SetConfig+0x12c>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d013      	beq.n	8006ea0 <TIM_Base_SetConfig+0x40>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e7e:	d00f      	beq.n	8006ea0 <TIM_Base_SetConfig+0x40>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a43      	ldr	r2, [pc, #268]	@ (8006f90 <TIM_Base_SetConfig+0x130>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d00b      	beq.n	8006ea0 <TIM_Base_SetConfig+0x40>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a42      	ldr	r2, [pc, #264]	@ (8006f94 <TIM_Base_SetConfig+0x134>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d007      	beq.n	8006ea0 <TIM_Base_SetConfig+0x40>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a41      	ldr	r2, [pc, #260]	@ (8006f98 <TIM_Base_SetConfig+0x138>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d003      	beq.n	8006ea0 <TIM_Base_SetConfig+0x40>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a40      	ldr	r2, [pc, #256]	@ (8006f9c <TIM_Base_SetConfig+0x13c>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d108      	bne.n	8006eb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a35      	ldr	r2, [pc, #212]	@ (8006f8c <TIM_Base_SetConfig+0x12c>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d02b      	beq.n	8006f12 <TIM_Base_SetConfig+0xb2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ec0:	d027      	beq.n	8006f12 <TIM_Base_SetConfig+0xb2>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a32      	ldr	r2, [pc, #200]	@ (8006f90 <TIM_Base_SetConfig+0x130>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d023      	beq.n	8006f12 <TIM_Base_SetConfig+0xb2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a31      	ldr	r2, [pc, #196]	@ (8006f94 <TIM_Base_SetConfig+0x134>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d01f      	beq.n	8006f12 <TIM_Base_SetConfig+0xb2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a30      	ldr	r2, [pc, #192]	@ (8006f98 <TIM_Base_SetConfig+0x138>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d01b      	beq.n	8006f12 <TIM_Base_SetConfig+0xb2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a2f      	ldr	r2, [pc, #188]	@ (8006f9c <TIM_Base_SetConfig+0x13c>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d017      	beq.n	8006f12 <TIM_Base_SetConfig+0xb2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a2e      	ldr	r2, [pc, #184]	@ (8006fa0 <TIM_Base_SetConfig+0x140>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d013      	beq.n	8006f12 <TIM_Base_SetConfig+0xb2>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a2d      	ldr	r2, [pc, #180]	@ (8006fa4 <TIM_Base_SetConfig+0x144>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d00f      	beq.n	8006f12 <TIM_Base_SetConfig+0xb2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a2c      	ldr	r2, [pc, #176]	@ (8006fa8 <TIM_Base_SetConfig+0x148>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d00b      	beq.n	8006f12 <TIM_Base_SetConfig+0xb2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a2b      	ldr	r2, [pc, #172]	@ (8006fac <TIM_Base_SetConfig+0x14c>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d007      	beq.n	8006f12 <TIM_Base_SetConfig+0xb2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a2a      	ldr	r2, [pc, #168]	@ (8006fb0 <TIM_Base_SetConfig+0x150>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d003      	beq.n	8006f12 <TIM_Base_SetConfig+0xb2>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a29      	ldr	r2, [pc, #164]	@ (8006fb4 <TIM_Base_SetConfig+0x154>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d108      	bne.n	8006f24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	689a      	ldr	r2, [r3, #8]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a10      	ldr	r2, [pc, #64]	@ (8006f8c <TIM_Base_SetConfig+0x12c>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d003      	beq.n	8006f58 <TIM_Base_SetConfig+0xf8>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a12      	ldr	r2, [pc, #72]	@ (8006f9c <TIM_Base_SetConfig+0x13c>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d103      	bne.n	8006f60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	691a      	ldr	r2, [r3, #16]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d105      	bne.n	8006f7e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	f023 0201 	bic.w	r2, r3, #1
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	611a      	str	r2, [r3, #16]
  }
}
 8006f7e:	bf00      	nop
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	40010000 	.word	0x40010000
 8006f90:	40000400 	.word	0x40000400
 8006f94:	40000800 	.word	0x40000800
 8006f98:	40000c00 	.word	0x40000c00
 8006f9c:	40010400 	.word	0x40010400
 8006fa0:	40014000 	.word	0x40014000
 8006fa4:	40014400 	.word	0x40014400
 8006fa8:	40014800 	.word	0x40014800
 8006fac:	40001800 	.word	0x40001800
 8006fb0:	40001c00 	.word	0x40001c00
 8006fb4:	40002000 	.word	0x40002000

08006fb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a1b      	ldr	r3, [r3, #32]
 8006fcc:	f023 0201 	bic.w	r2, r3, #1
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	4b2b      	ldr	r3, [pc, #172]	@ (8007090 <TIM_OC1_SetConfig+0xd8>)
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 0303 	bic.w	r3, r3, #3
 8006fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f023 0302 	bic.w	r3, r3, #2
 8007000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	4313      	orrs	r3, r2
 800700a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a21      	ldr	r2, [pc, #132]	@ (8007094 <TIM_OC1_SetConfig+0xdc>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d003      	beq.n	800701c <TIM_OC1_SetConfig+0x64>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a20      	ldr	r2, [pc, #128]	@ (8007098 <TIM_OC1_SetConfig+0xe0>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d10c      	bne.n	8007036 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	f023 0308 	bic.w	r3, r3, #8
 8007022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	4313      	orrs	r3, r2
 800702c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f023 0304 	bic.w	r3, r3, #4
 8007034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a16      	ldr	r2, [pc, #88]	@ (8007094 <TIM_OC1_SetConfig+0xdc>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d003      	beq.n	8007046 <TIM_OC1_SetConfig+0x8e>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a15      	ldr	r2, [pc, #84]	@ (8007098 <TIM_OC1_SetConfig+0xe0>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d111      	bne.n	800706a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800704c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	695b      	ldr	r3, [r3, #20]
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	4313      	orrs	r3, r2
 800705e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	4313      	orrs	r3, r2
 8007068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	685a      	ldr	r2, [r3, #4]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	621a      	str	r2, [r3, #32]
}
 8007084:	bf00      	nop
 8007086:	371c      	adds	r7, #28
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	fffeff8f 	.word	0xfffeff8f
 8007094:	40010000 	.word	0x40010000
 8007098:	40010400 	.word	0x40010400

0800709c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800709c:	b480      	push	{r7}
 800709e:	b087      	sub	sp, #28
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a1b      	ldr	r3, [r3, #32]
 80070b0:	f023 0210 	bic.w	r2, r3, #16
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	4b2e      	ldr	r3, [pc, #184]	@ (8007180 <TIM_OC2_SetConfig+0xe4>)
 80070c8:	4013      	ands	r3, r2
 80070ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	021b      	lsls	r3, r3, #8
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	4313      	orrs	r3, r2
 80070de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f023 0320 	bic.w	r3, r3, #32
 80070e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	011b      	lsls	r3, r3, #4
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a23      	ldr	r2, [pc, #140]	@ (8007184 <TIM_OC2_SetConfig+0xe8>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d003      	beq.n	8007104 <TIM_OC2_SetConfig+0x68>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a22      	ldr	r2, [pc, #136]	@ (8007188 <TIM_OC2_SetConfig+0xec>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d10d      	bne.n	8007120 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800710a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	011b      	lsls	r3, r3, #4
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	4313      	orrs	r3, r2
 8007116:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800711e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a18      	ldr	r2, [pc, #96]	@ (8007184 <TIM_OC2_SetConfig+0xe8>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d003      	beq.n	8007130 <TIM_OC2_SetConfig+0x94>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a17      	ldr	r2, [pc, #92]	@ (8007188 <TIM_OC2_SetConfig+0xec>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d113      	bne.n	8007158 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800713e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	4313      	orrs	r3, r2
 800714a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	4313      	orrs	r3, r2
 8007156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	621a      	str	r2, [r3, #32]
}
 8007172:	bf00      	nop
 8007174:	371c      	adds	r7, #28
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	feff8fff 	.word	0xfeff8fff
 8007184:	40010000 	.word	0x40010000
 8007188:	40010400 	.word	0x40010400

0800718c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a1b      	ldr	r3, [r3, #32]
 80071a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	4b2d      	ldr	r3, [pc, #180]	@ (800726c <TIM_OC3_SetConfig+0xe0>)
 80071b8:	4013      	ands	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f023 0303 	bic.w	r3, r3, #3
 80071c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80071d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	021b      	lsls	r3, r3, #8
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	4313      	orrs	r3, r2
 80071e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a22      	ldr	r2, [pc, #136]	@ (8007270 <TIM_OC3_SetConfig+0xe4>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d003      	beq.n	80071f2 <TIM_OC3_SetConfig+0x66>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a21      	ldr	r2, [pc, #132]	@ (8007274 <TIM_OC3_SetConfig+0xe8>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d10d      	bne.n	800720e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80071f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	021b      	lsls	r3, r3, #8
 8007200:	697a      	ldr	r2, [r7, #20]
 8007202:	4313      	orrs	r3, r2
 8007204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800720c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a17      	ldr	r2, [pc, #92]	@ (8007270 <TIM_OC3_SetConfig+0xe4>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d003      	beq.n	800721e <TIM_OC3_SetConfig+0x92>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a16      	ldr	r2, [pc, #88]	@ (8007274 <TIM_OC3_SetConfig+0xe8>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d113      	bne.n	8007246 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800722c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	011b      	lsls	r3, r3, #4
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	4313      	orrs	r3, r2
 8007238:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	011b      	lsls	r3, r3, #4
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	4313      	orrs	r3, r2
 8007244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	621a      	str	r2, [r3, #32]
}
 8007260:	bf00      	nop
 8007262:	371c      	adds	r7, #28
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	fffeff8f 	.word	0xfffeff8f
 8007270:	40010000 	.word	0x40010000
 8007274:	40010400 	.word	0x40010400

08007278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	69db      	ldr	r3, [r3, #28]
 800729e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	4b1e      	ldr	r3, [pc, #120]	@ (800731c <TIM_OC4_SetConfig+0xa4>)
 80072a4:	4013      	ands	r3, r2
 80072a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	021b      	lsls	r3, r3, #8
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80072c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	031b      	lsls	r3, r3, #12
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a13      	ldr	r2, [pc, #76]	@ (8007320 <TIM_OC4_SetConfig+0xa8>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d003      	beq.n	80072e0 <TIM_OC4_SetConfig+0x68>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a12      	ldr	r2, [pc, #72]	@ (8007324 <TIM_OC4_SetConfig+0xac>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d109      	bne.n	80072f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80072e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	019b      	lsls	r3, r3, #6
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	621a      	str	r2, [r3, #32]
}
 800730e:	bf00      	nop
 8007310:	371c      	adds	r7, #28
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	feff8fff 	.word	0xfeff8fff
 8007320:	40010000 	.word	0x40010000
 8007324:	40010400 	.word	0x40010400

08007328 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800734e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	4b1b      	ldr	r3, [pc, #108]	@ (80073c0 <TIM_OC5_SetConfig+0x98>)
 8007354:	4013      	ands	r3, r2
 8007356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	4313      	orrs	r3, r2
 8007360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007368:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	041b      	lsls	r3, r3, #16
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	4313      	orrs	r3, r2
 8007374:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a12      	ldr	r2, [pc, #72]	@ (80073c4 <TIM_OC5_SetConfig+0x9c>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d003      	beq.n	8007386 <TIM_OC5_SetConfig+0x5e>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a11      	ldr	r2, [pc, #68]	@ (80073c8 <TIM_OC5_SetConfig+0xa0>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d109      	bne.n	800739a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800738c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	021b      	lsls	r3, r3, #8
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	4313      	orrs	r3, r2
 8007398:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	685a      	ldr	r2, [r3, #4]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	621a      	str	r2, [r3, #32]
}
 80073b4:	bf00      	nop
 80073b6:	371c      	adds	r7, #28
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	fffeff8f 	.word	0xfffeff8f
 80073c4:	40010000 	.word	0x40010000
 80073c8:	40010400 	.word	0x40010400

080073cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a1b      	ldr	r3, [r3, #32]
 80073e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	4b1c      	ldr	r3, [pc, #112]	@ (8007468 <TIM_OC6_SetConfig+0x9c>)
 80073f8:	4013      	ands	r3, r2
 80073fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	021b      	lsls	r3, r3, #8
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	4313      	orrs	r3, r2
 8007406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800740e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	051b      	lsls	r3, r3, #20
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	4313      	orrs	r3, r2
 800741a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a13      	ldr	r2, [pc, #76]	@ (800746c <TIM_OC6_SetConfig+0xa0>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d003      	beq.n	800742c <TIM_OC6_SetConfig+0x60>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a12      	ldr	r2, [pc, #72]	@ (8007470 <TIM_OC6_SetConfig+0xa4>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d109      	bne.n	8007440 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007432:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	029b      	lsls	r3, r3, #10
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	4313      	orrs	r3, r2
 800743e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	621a      	str	r2, [r3, #32]
}
 800745a:	bf00      	nop
 800745c:	371c      	adds	r7, #28
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	feff8fff 	.word	0xfeff8fff
 800746c:	40010000 	.word	0x40010000
 8007470:	40010400 	.word	0x40010400

08007474 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
 8007480:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6a1b      	ldr	r3, [r3, #32]
 8007486:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6a1b      	ldr	r3, [r3, #32]
 800748c:	f023 0201 	bic.w	r2, r3, #1
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	4a28      	ldr	r2, [pc, #160]	@ (8007540 <TIM_TI1_SetConfig+0xcc>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d01b      	beq.n	80074da <TIM_TI1_SetConfig+0x66>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074a8:	d017      	beq.n	80074da <TIM_TI1_SetConfig+0x66>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	4a25      	ldr	r2, [pc, #148]	@ (8007544 <TIM_TI1_SetConfig+0xd0>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d013      	beq.n	80074da <TIM_TI1_SetConfig+0x66>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	4a24      	ldr	r2, [pc, #144]	@ (8007548 <TIM_TI1_SetConfig+0xd4>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d00f      	beq.n	80074da <TIM_TI1_SetConfig+0x66>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	4a23      	ldr	r2, [pc, #140]	@ (800754c <TIM_TI1_SetConfig+0xd8>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d00b      	beq.n	80074da <TIM_TI1_SetConfig+0x66>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	4a22      	ldr	r2, [pc, #136]	@ (8007550 <TIM_TI1_SetConfig+0xdc>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d007      	beq.n	80074da <TIM_TI1_SetConfig+0x66>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	4a21      	ldr	r2, [pc, #132]	@ (8007554 <TIM_TI1_SetConfig+0xe0>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d003      	beq.n	80074da <TIM_TI1_SetConfig+0x66>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	4a20      	ldr	r2, [pc, #128]	@ (8007558 <TIM_TI1_SetConfig+0xe4>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d101      	bne.n	80074de <TIM_TI1_SetConfig+0x6a>
 80074da:	2301      	movs	r3, #1
 80074dc:	e000      	b.n	80074e0 <TIM_TI1_SetConfig+0x6c>
 80074de:	2300      	movs	r3, #0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d008      	beq.n	80074f6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f023 0303 	bic.w	r3, r3, #3
 80074ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]
 80074f4:	e003      	b.n	80074fe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f043 0301 	orr.w	r3, r3, #1
 80074fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007504:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	011b      	lsls	r3, r3, #4
 800750a:	b2db      	uxtb	r3, r3
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	4313      	orrs	r3, r2
 8007510:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	f023 030a 	bic.w	r3, r3, #10
 8007518:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	f003 030a 	and.w	r3, r3, #10
 8007520:	693a      	ldr	r2, [r7, #16]
 8007522:	4313      	orrs	r3, r2
 8007524:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	621a      	str	r2, [r3, #32]
}
 8007532:	bf00      	nop
 8007534:	371c      	adds	r7, #28
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	40010000 	.word	0x40010000
 8007544:	40000400 	.word	0x40000400
 8007548:	40000800 	.word	0x40000800
 800754c:	40000c00 	.word	0x40000c00
 8007550:	40010400 	.word	0x40010400
 8007554:	40014000 	.word	0x40014000
 8007558:	40001800 	.word	0x40001800

0800755c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800755c:	b480      	push	{r7}
 800755e:	b087      	sub	sp, #28
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6a1b      	ldr	r3, [r3, #32]
 8007572:	f023 0201 	bic.w	r2, r3, #1
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	011b      	lsls	r3, r3, #4
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	4313      	orrs	r3, r2
 8007590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f023 030a 	bic.w	r3, r3, #10
 8007598:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	4313      	orrs	r3, r2
 80075a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	693a      	ldr	r2, [r7, #16]
 80075a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	621a      	str	r2, [r3, #32]
}
 80075ae:	bf00      	nop
 80075b0:	371c      	adds	r7, #28
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b087      	sub	sp, #28
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	607a      	str	r2, [r7, #4]
 80075c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6a1b      	ldr	r3, [r3, #32]
 80075cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	f023 0210 	bic.w	r2, r3, #16
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	021b      	lsls	r3, r3, #8
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80075f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	031b      	lsls	r3, r3, #12
 80075fe:	b29b      	uxth	r3, r3
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	4313      	orrs	r3, r2
 8007604:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800760c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	011b      	lsls	r3, r3, #4
 8007612:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	4313      	orrs	r3, r2
 800761a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	621a      	str	r2, [r3, #32]
}
 8007628:	bf00      	nop
 800762a:	371c      	adds	r7, #28
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007634:	b480      	push	{r7}
 8007636:	b087      	sub	sp, #28
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6a1b      	ldr	r3, [r3, #32]
 8007644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	f023 0210 	bic.w	r2, r3, #16
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800765e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	031b      	lsls	r3, r3, #12
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	4313      	orrs	r3, r2
 8007668:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007670:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	011b      	lsls	r3, r3, #4
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	4313      	orrs	r3, r2
 800767a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	621a      	str	r2, [r3, #32]
}
 8007688:	bf00      	nop
 800768a:	371c      	adds	r7, #28
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007694:	b480      	push	{r7}
 8007696:	b087      	sub	sp, #28
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
 80076a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6a1b      	ldr	r3, [r3, #32]
 80076ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	69db      	ldr	r3, [r3, #28]
 80076b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f023 0303 	bic.w	r3, r3, #3
 80076c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	011b      	lsls	r3, r3, #4
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	4313      	orrs	r3, r2
 80076dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80076e4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	021b      	lsls	r3, r3, #8
 80076ea:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	621a      	str	r2, [r3, #32]
}
 8007700:	bf00      	nop
 8007702:	371c      	adds	r7, #28
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800770c:	b480      	push	{r7}
 800770e:	b087      	sub	sp, #28
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
 8007718:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6a1b      	ldr	r3, [r3, #32]
 8007724:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	69db      	ldr	r3, [r3, #28]
 8007730:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007738:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	021b      	lsls	r3, r3, #8
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	4313      	orrs	r3, r2
 8007742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800774a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	031b      	lsls	r3, r3, #12
 8007750:	b29b      	uxth	r3, r3
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	4313      	orrs	r3, r2
 8007756:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800775e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	031b      	lsls	r3, r3, #12
 8007764:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007768:	697a      	ldr	r2, [r7, #20]
 800776a:	4313      	orrs	r3, r2
 800776c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	693a      	ldr	r2, [r7, #16]
 8007772:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	621a      	str	r2, [r3, #32]
}
 800777a:	bf00      	nop
 800777c:	371c      	adds	r7, #28
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007786:	b480      	push	{r7}
 8007788:	b085      	sub	sp, #20
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800779c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	f043 0307 	orr.w	r3, r3, #7
 80077a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	609a      	str	r2, [r3, #8]
}
 80077b0:	bf00      	nop
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
 80077c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	021a      	lsls	r2, r3, #8
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	431a      	orrs	r2, r3
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	609a      	str	r2, [r3, #8]
}
 80077f0:	bf00      	nop
 80077f2:	371c      	adds	r7, #28
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b087      	sub	sp, #28
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	f003 031f 	and.w	r3, r3, #31
 800780e:	2201      	movs	r2, #1
 8007810:	fa02 f303 	lsl.w	r3, r2, r3
 8007814:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6a1a      	ldr	r2, [r3, #32]
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	43db      	mvns	r3, r3
 800781e:	401a      	ands	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6a1a      	ldr	r2, [r3, #32]
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	f003 031f 	and.w	r3, r3, #31
 800782e:	6879      	ldr	r1, [r7, #4]
 8007830:	fa01 f303 	lsl.w	r3, r1, r3
 8007834:	431a      	orrs	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	621a      	str	r2, [r3, #32]
}
 800783a:	bf00      	nop
 800783c:	371c      	adds	r7, #28
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
	...

08007848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007858:	2b01      	cmp	r3, #1
 800785a:	d101      	bne.n	8007860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800785c:	2302      	movs	r3, #2
 800785e:	e06d      	b.n	800793c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a30      	ldr	r2, [pc, #192]	@ (8007948 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d004      	beq.n	8007894 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a2f      	ldr	r2, [pc, #188]	@ (800794c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d108      	bne.n	80078a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800789a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a20      	ldr	r2, [pc, #128]	@ (8007948 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d022      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078d2:	d01d      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007950 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d018      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a1c      	ldr	r2, [pc, #112]	@ (8007954 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d013      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a1a      	ldr	r2, [pc, #104]	@ (8007958 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00e      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a15      	ldr	r2, [pc, #84]	@ (800794c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d009      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a16      	ldr	r2, [pc, #88]	@ (800795c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d004      	beq.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a15      	ldr	r2, [pc, #84]	@ (8007960 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d10c      	bne.n	800792a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007916:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	4313      	orrs	r3, r2
 8007920:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	40010000 	.word	0x40010000
 800794c:	40010400 	.word	0x40010400
 8007950:	40000400 	.word	0x40000400
 8007954:	40000800 	.word	0x40000800
 8007958:	40000c00 	.word	0x40000c00
 800795c:	40014000 	.word	0x40014000
 8007960:	40001800 	.word	0x40001800

08007964 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800796e:	2300      	movs	r3, #0
 8007970:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007978:	2b01      	cmp	r3, #1
 800797a:	d101      	bne.n	8007980 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800797c:	2302      	movs	r3, #2
 800797e:	e065      	b.n	8007a4c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	4313      	orrs	r3, r2
 8007994:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4313      	orrs	r3, r2
 80079be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	4313      	orrs	r3, r2
 80079da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e6:	4313      	orrs	r3, r2
 80079e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	699b      	ldr	r3, [r3, #24]
 80079f4:	041b      	lsls	r3, r3, #16
 80079f6:	4313      	orrs	r3, r2
 80079f8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a16      	ldr	r2, [pc, #88]	@ (8007a58 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d004      	beq.n	8007a0e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a14      	ldr	r2, [pc, #80]	@ (8007a5c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d115      	bne.n	8007a3a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a18:	051b      	lsls	r3, r3, #20
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	69db      	ldr	r3, [r3, #28]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3714      	adds	r7, #20
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr
 8007a58:	40010000 	.word	0x40010000
 8007a5c:	40010400 	.word	0x40010400

08007a60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d101      	bne.n	8007aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e040      	b.n	8007b30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d106      	bne.n	8007ac4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7fb f824 	bl	8002b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2224      	movs	r2, #36	@ 0x24
 8007ac8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f022 0201 	bic.w	r2, r2, #1
 8007ad8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fb54 	bl	8008190 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f8ed 	bl	8007cc8 <UART_SetConfig>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d101      	bne.n	8007af8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e01b      	b.n	8007b30 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689a      	ldr	r2, [r3, #8]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 0201 	orr.w	r2, r2, #1
 8007b26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 fbd3 	bl	80082d4 <UART_CheckIdleState>
 8007b2e:	4603      	mov	r3, r0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b08a      	sub	sp, #40	@ 0x28
 8007b3c:	af02      	add	r7, sp, #8
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	603b      	str	r3, [r7, #0]
 8007b44:	4613      	mov	r3, r2
 8007b46:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b4e:	2b20      	cmp	r3, #32
 8007b50:	f040 80b5 	bne.w	8007cbe <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d002      	beq.n	8007b60 <HAL_UART_Receive+0x28>
 8007b5a:	88fb      	ldrh	r3, [r7, #6]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e0ad      	b.n	8007cc0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2222      	movs	r2, #34	@ 0x22
 8007b70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b7a:	f7fb fb23 	bl	80031c4 <HAL_GetTick>
 8007b7e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	88fa      	ldrh	r2, [r7, #6]
 8007b84:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	88fa      	ldrh	r2, [r7, #6]
 8007b8c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b98:	d10e      	bne.n	8007bb8 <HAL_UART_Receive+0x80>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d105      	bne.n	8007bae <HAL_UART_Receive+0x76>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007ba8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007bac:	e02d      	b.n	8007c0a <HAL_UART_Receive+0xd2>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	22ff      	movs	r2, #255	@ 0xff
 8007bb2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007bb6:	e028      	b.n	8007c0a <HAL_UART_Receive+0xd2>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10d      	bne.n	8007bdc <HAL_UART_Receive+0xa4>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d104      	bne.n	8007bd2 <HAL_UART_Receive+0x9a>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	22ff      	movs	r2, #255	@ 0xff
 8007bcc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007bd0:	e01b      	b.n	8007c0a <HAL_UART_Receive+0xd2>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	227f      	movs	r2, #127	@ 0x7f
 8007bd6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007bda:	e016      	b.n	8007c0a <HAL_UART_Receive+0xd2>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007be4:	d10d      	bne.n	8007c02 <HAL_UART_Receive+0xca>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d104      	bne.n	8007bf8 <HAL_UART_Receive+0xc0>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	227f      	movs	r2, #127	@ 0x7f
 8007bf2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007bf6:	e008      	b.n	8007c0a <HAL_UART_Receive+0xd2>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	223f      	movs	r2, #63	@ 0x3f
 8007bfc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c00:	e003      	b.n	8007c0a <HAL_UART_Receive+0xd2>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c10:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c1a:	d108      	bne.n	8007c2e <HAL_UART_Receive+0xf6>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d104      	bne.n	8007c2e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007c24:	2300      	movs	r3, #0
 8007c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	61bb      	str	r3, [r7, #24]
 8007c2c:	e003      	b.n	8007c36 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c32:	2300      	movs	r3, #0
 8007c34:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007c36:	e036      	b.n	8007ca6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	2120      	movs	r1, #32
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f000 fbee 	bl	8008424 <UART_WaitOnFlagUntilTimeout>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d005      	beq.n	8007c5a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2220      	movs	r2, #32
 8007c52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e032      	b.n	8007cc0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10c      	bne.n	8007c7a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	8a7b      	ldrh	r3, [r7, #18]
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	3302      	adds	r3, #2
 8007c76:	61bb      	str	r3, [r7, #24]
 8007c78:	e00c      	b.n	8007c94 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c80:	b2da      	uxtb	r2, r3
 8007c82:	8a7b      	ldrh	r3, [r7, #18]
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	4013      	ands	r3, r2
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	3301      	adds	r3, #1
 8007c92:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1c2      	bne.n	8007c38 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2220      	movs	r2, #32
 8007cb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	e000      	b.n	8007cc0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8007cbe:	2302      	movs	r3, #2
  }
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3720      	adds	r7, #32
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b088      	sub	sp, #32
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	689a      	ldr	r2, [r3, #8]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	431a      	orrs	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	69db      	ldr	r3, [r3, #28]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	4ba6      	ldr	r3, [pc, #664]	@ (8007f8c <UART_SetConfig+0x2c4>)
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	6812      	ldr	r2, [r2, #0]
 8007cfa:	6979      	ldr	r1, [r7, #20]
 8007cfc:	430b      	orrs	r3, r1
 8007cfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68da      	ldr	r2, [r3, #12]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	430a      	orrs	r2, r1
 8007d14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	697a      	ldr	r2, [r7, #20]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a94      	ldr	r2, [pc, #592]	@ (8007f90 <UART_SetConfig+0x2c8>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d120      	bne.n	8007d86 <UART_SetConfig+0xbe>
 8007d44:	4b93      	ldr	r3, [pc, #588]	@ (8007f94 <UART_SetConfig+0x2cc>)
 8007d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d4a:	f003 0303 	and.w	r3, r3, #3
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d816      	bhi.n	8007d80 <UART_SetConfig+0xb8>
 8007d52:	a201      	add	r2, pc, #4	@ (adr r2, 8007d58 <UART_SetConfig+0x90>)
 8007d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d58:	08007d69 	.word	0x08007d69
 8007d5c:	08007d75 	.word	0x08007d75
 8007d60:	08007d6f 	.word	0x08007d6f
 8007d64:	08007d7b 	.word	0x08007d7b
 8007d68:	2301      	movs	r3, #1
 8007d6a:	77fb      	strb	r3, [r7, #31]
 8007d6c:	e150      	b.n	8008010 <UART_SetConfig+0x348>
 8007d6e:	2302      	movs	r3, #2
 8007d70:	77fb      	strb	r3, [r7, #31]
 8007d72:	e14d      	b.n	8008010 <UART_SetConfig+0x348>
 8007d74:	2304      	movs	r3, #4
 8007d76:	77fb      	strb	r3, [r7, #31]
 8007d78:	e14a      	b.n	8008010 <UART_SetConfig+0x348>
 8007d7a:	2308      	movs	r3, #8
 8007d7c:	77fb      	strb	r3, [r7, #31]
 8007d7e:	e147      	b.n	8008010 <UART_SetConfig+0x348>
 8007d80:	2310      	movs	r3, #16
 8007d82:	77fb      	strb	r3, [r7, #31]
 8007d84:	e144      	b.n	8008010 <UART_SetConfig+0x348>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a83      	ldr	r2, [pc, #524]	@ (8007f98 <UART_SetConfig+0x2d0>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d132      	bne.n	8007df6 <UART_SetConfig+0x12e>
 8007d90:	4b80      	ldr	r3, [pc, #512]	@ (8007f94 <UART_SetConfig+0x2cc>)
 8007d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d96:	f003 030c 	and.w	r3, r3, #12
 8007d9a:	2b0c      	cmp	r3, #12
 8007d9c:	d828      	bhi.n	8007df0 <UART_SetConfig+0x128>
 8007d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007da4 <UART_SetConfig+0xdc>)
 8007da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da4:	08007dd9 	.word	0x08007dd9
 8007da8:	08007df1 	.word	0x08007df1
 8007dac:	08007df1 	.word	0x08007df1
 8007db0:	08007df1 	.word	0x08007df1
 8007db4:	08007de5 	.word	0x08007de5
 8007db8:	08007df1 	.word	0x08007df1
 8007dbc:	08007df1 	.word	0x08007df1
 8007dc0:	08007df1 	.word	0x08007df1
 8007dc4:	08007ddf 	.word	0x08007ddf
 8007dc8:	08007df1 	.word	0x08007df1
 8007dcc:	08007df1 	.word	0x08007df1
 8007dd0:	08007df1 	.word	0x08007df1
 8007dd4:	08007deb 	.word	0x08007deb
 8007dd8:	2300      	movs	r3, #0
 8007dda:	77fb      	strb	r3, [r7, #31]
 8007ddc:	e118      	b.n	8008010 <UART_SetConfig+0x348>
 8007dde:	2302      	movs	r3, #2
 8007de0:	77fb      	strb	r3, [r7, #31]
 8007de2:	e115      	b.n	8008010 <UART_SetConfig+0x348>
 8007de4:	2304      	movs	r3, #4
 8007de6:	77fb      	strb	r3, [r7, #31]
 8007de8:	e112      	b.n	8008010 <UART_SetConfig+0x348>
 8007dea:	2308      	movs	r3, #8
 8007dec:	77fb      	strb	r3, [r7, #31]
 8007dee:	e10f      	b.n	8008010 <UART_SetConfig+0x348>
 8007df0:	2310      	movs	r3, #16
 8007df2:	77fb      	strb	r3, [r7, #31]
 8007df4:	e10c      	b.n	8008010 <UART_SetConfig+0x348>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a68      	ldr	r2, [pc, #416]	@ (8007f9c <UART_SetConfig+0x2d4>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d120      	bne.n	8007e42 <UART_SetConfig+0x17a>
 8007e00:	4b64      	ldr	r3, [pc, #400]	@ (8007f94 <UART_SetConfig+0x2cc>)
 8007e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e06:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007e0a:	2b30      	cmp	r3, #48	@ 0x30
 8007e0c:	d013      	beq.n	8007e36 <UART_SetConfig+0x16e>
 8007e0e:	2b30      	cmp	r3, #48	@ 0x30
 8007e10:	d814      	bhi.n	8007e3c <UART_SetConfig+0x174>
 8007e12:	2b20      	cmp	r3, #32
 8007e14:	d009      	beq.n	8007e2a <UART_SetConfig+0x162>
 8007e16:	2b20      	cmp	r3, #32
 8007e18:	d810      	bhi.n	8007e3c <UART_SetConfig+0x174>
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d002      	beq.n	8007e24 <UART_SetConfig+0x15c>
 8007e1e:	2b10      	cmp	r3, #16
 8007e20:	d006      	beq.n	8007e30 <UART_SetConfig+0x168>
 8007e22:	e00b      	b.n	8007e3c <UART_SetConfig+0x174>
 8007e24:	2300      	movs	r3, #0
 8007e26:	77fb      	strb	r3, [r7, #31]
 8007e28:	e0f2      	b.n	8008010 <UART_SetConfig+0x348>
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	77fb      	strb	r3, [r7, #31]
 8007e2e:	e0ef      	b.n	8008010 <UART_SetConfig+0x348>
 8007e30:	2304      	movs	r3, #4
 8007e32:	77fb      	strb	r3, [r7, #31]
 8007e34:	e0ec      	b.n	8008010 <UART_SetConfig+0x348>
 8007e36:	2308      	movs	r3, #8
 8007e38:	77fb      	strb	r3, [r7, #31]
 8007e3a:	e0e9      	b.n	8008010 <UART_SetConfig+0x348>
 8007e3c:	2310      	movs	r3, #16
 8007e3e:	77fb      	strb	r3, [r7, #31]
 8007e40:	e0e6      	b.n	8008010 <UART_SetConfig+0x348>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a56      	ldr	r2, [pc, #344]	@ (8007fa0 <UART_SetConfig+0x2d8>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d120      	bne.n	8007e8e <UART_SetConfig+0x1c6>
 8007e4c:	4b51      	ldr	r3, [pc, #324]	@ (8007f94 <UART_SetConfig+0x2cc>)
 8007e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007e56:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e58:	d013      	beq.n	8007e82 <UART_SetConfig+0x1ba>
 8007e5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e5c:	d814      	bhi.n	8007e88 <UART_SetConfig+0x1c0>
 8007e5e:	2b80      	cmp	r3, #128	@ 0x80
 8007e60:	d009      	beq.n	8007e76 <UART_SetConfig+0x1ae>
 8007e62:	2b80      	cmp	r3, #128	@ 0x80
 8007e64:	d810      	bhi.n	8007e88 <UART_SetConfig+0x1c0>
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d002      	beq.n	8007e70 <UART_SetConfig+0x1a8>
 8007e6a:	2b40      	cmp	r3, #64	@ 0x40
 8007e6c:	d006      	beq.n	8007e7c <UART_SetConfig+0x1b4>
 8007e6e:	e00b      	b.n	8007e88 <UART_SetConfig+0x1c0>
 8007e70:	2300      	movs	r3, #0
 8007e72:	77fb      	strb	r3, [r7, #31]
 8007e74:	e0cc      	b.n	8008010 <UART_SetConfig+0x348>
 8007e76:	2302      	movs	r3, #2
 8007e78:	77fb      	strb	r3, [r7, #31]
 8007e7a:	e0c9      	b.n	8008010 <UART_SetConfig+0x348>
 8007e7c:	2304      	movs	r3, #4
 8007e7e:	77fb      	strb	r3, [r7, #31]
 8007e80:	e0c6      	b.n	8008010 <UART_SetConfig+0x348>
 8007e82:	2308      	movs	r3, #8
 8007e84:	77fb      	strb	r3, [r7, #31]
 8007e86:	e0c3      	b.n	8008010 <UART_SetConfig+0x348>
 8007e88:	2310      	movs	r3, #16
 8007e8a:	77fb      	strb	r3, [r7, #31]
 8007e8c:	e0c0      	b.n	8008010 <UART_SetConfig+0x348>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a44      	ldr	r2, [pc, #272]	@ (8007fa4 <UART_SetConfig+0x2dc>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d125      	bne.n	8007ee4 <UART_SetConfig+0x21c>
 8007e98:	4b3e      	ldr	r3, [pc, #248]	@ (8007f94 <UART_SetConfig+0x2cc>)
 8007e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ea2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ea6:	d017      	beq.n	8007ed8 <UART_SetConfig+0x210>
 8007ea8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007eac:	d817      	bhi.n	8007ede <UART_SetConfig+0x216>
 8007eae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007eb2:	d00b      	beq.n	8007ecc <UART_SetConfig+0x204>
 8007eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007eb8:	d811      	bhi.n	8007ede <UART_SetConfig+0x216>
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <UART_SetConfig+0x1fe>
 8007ebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ec2:	d006      	beq.n	8007ed2 <UART_SetConfig+0x20a>
 8007ec4:	e00b      	b.n	8007ede <UART_SetConfig+0x216>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	77fb      	strb	r3, [r7, #31]
 8007eca:	e0a1      	b.n	8008010 <UART_SetConfig+0x348>
 8007ecc:	2302      	movs	r3, #2
 8007ece:	77fb      	strb	r3, [r7, #31]
 8007ed0:	e09e      	b.n	8008010 <UART_SetConfig+0x348>
 8007ed2:	2304      	movs	r3, #4
 8007ed4:	77fb      	strb	r3, [r7, #31]
 8007ed6:	e09b      	b.n	8008010 <UART_SetConfig+0x348>
 8007ed8:	2308      	movs	r3, #8
 8007eda:	77fb      	strb	r3, [r7, #31]
 8007edc:	e098      	b.n	8008010 <UART_SetConfig+0x348>
 8007ede:	2310      	movs	r3, #16
 8007ee0:	77fb      	strb	r3, [r7, #31]
 8007ee2:	e095      	b.n	8008010 <UART_SetConfig+0x348>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a2f      	ldr	r2, [pc, #188]	@ (8007fa8 <UART_SetConfig+0x2e0>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d125      	bne.n	8007f3a <UART_SetConfig+0x272>
 8007eee:	4b29      	ldr	r3, [pc, #164]	@ (8007f94 <UART_SetConfig+0x2cc>)
 8007ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ef4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007ef8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007efc:	d017      	beq.n	8007f2e <UART_SetConfig+0x266>
 8007efe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f02:	d817      	bhi.n	8007f34 <UART_SetConfig+0x26c>
 8007f04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f08:	d00b      	beq.n	8007f22 <UART_SetConfig+0x25a>
 8007f0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f0e:	d811      	bhi.n	8007f34 <UART_SetConfig+0x26c>
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d003      	beq.n	8007f1c <UART_SetConfig+0x254>
 8007f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f18:	d006      	beq.n	8007f28 <UART_SetConfig+0x260>
 8007f1a:	e00b      	b.n	8007f34 <UART_SetConfig+0x26c>
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	77fb      	strb	r3, [r7, #31]
 8007f20:	e076      	b.n	8008010 <UART_SetConfig+0x348>
 8007f22:	2302      	movs	r3, #2
 8007f24:	77fb      	strb	r3, [r7, #31]
 8007f26:	e073      	b.n	8008010 <UART_SetConfig+0x348>
 8007f28:	2304      	movs	r3, #4
 8007f2a:	77fb      	strb	r3, [r7, #31]
 8007f2c:	e070      	b.n	8008010 <UART_SetConfig+0x348>
 8007f2e:	2308      	movs	r3, #8
 8007f30:	77fb      	strb	r3, [r7, #31]
 8007f32:	e06d      	b.n	8008010 <UART_SetConfig+0x348>
 8007f34:	2310      	movs	r3, #16
 8007f36:	77fb      	strb	r3, [r7, #31]
 8007f38:	e06a      	b.n	8008010 <UART_SetConfig+0x348>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8007fac <UART_SetConfig+0x2e4>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d138      	bne.n	8007fb6 <UART_SetConfig+0x2ee>
 8007f44:	4b13      	ldr	r3, [pc, #76]	@ (8007f94 <UART_SetConfig+0x2cc>)
 8007f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f4a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007f4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007f52:	d017      	beq.n	8007f84 <UART_SetConfig+0x2bc>
 8007f54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007f58:	d82a      	bhi.n	8007fb0 <UART_SetConfig+0x2e8>
 8007f5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f5e:	d00b      	beq.n	8007f78 <UART_SetConfig+0x2b0>
 8007f60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f64:	d824      	bhi.n	8007fb0 <UART_SetConfig+0x2e8>
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <UART_SetConfig+0x2aa>
 8007f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f6e:	d006      	beq.n	8007f7e <UART_SetConfig+0x2b6>
 8007f70:	e01e      	b.n	8007fb0 <UART_SetConfig+0x2e8>
 8007f72:	2300      	movs	r3, #0
 8007f74:	77fb      	strb	r3, [r7, #31]
 8007f76:	e04b      	b.n	8008010 <UART_SetConfig+0x348>
 8007f78:	2302      	movs	r3, #2
 8007f7a:	77fb      	strb	r3, [r7, #31]
 8007f7c:	e048      	b.n	8008010 <UART_SetConfig+0x348>
 8007f7e:	2304      	movs	r3, #4
 8007f80:	77fb      	strb	r3, [r7, #31]
 8007f82:	e045      	b.n	8008010 <UART_SetConfig+0x348>
 8007f84:	2308      	movs	r3, #8
 8007f86:	77fb      	strb	r3, [r7, #31]
 8007f88:	e042      	b.n	8008010 <UART_SetConfig+0x348>
 8007f8a:	bf00      	nop
 8007f8c:	efff69f3 	.word	0xefff69f3
 8007f90:	40011000 	.word	0x40011000
 8007f94:	40023800 	.word	0x40023800
 8007f98:	40004400 	.word	0x40004400
 8007f9c:	40004800 	.word	0x40004800
 8007fa0:	40004c00 	.word	0x40004c00
 8007fa4:	40005000 	.word	0x40005000
 8007fa8:	40011400 	.word	0x40011400
 8007fac:	40007800 	.word	0x40007800
 8007fb0:	2310      	movs	r3, #16
 8007fb2:	77fb      	strb	r3, [r7, #31]
 8007fb4:	e02c      	b.n	8008010 <UART_SetConfig+0x348>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a72      	ldr	r2, [pc, #456]	@ (8008184 <UART_SetConfig+0x4bc>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d125      	bne.n	800800c <UART_SetConfig+0x344>
 8007fc0:	4b71      	ldr	r3, [pc, #452]	@ (8008188 <UART_SetConfig+0x4c0>)
 8007fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fc6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007fca:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007fce:	d017      	beq.n	8008000 <UART_SetConfig+0x338>
 8007fd0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007fd4:	d817      	bhi.n	8008006 <UART_SetConfig+0x33e>
 8007fd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fda:	d00b      	beq.n	8007ff4 <UART_SetConfig+0x32c>
 8007fdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fe0:	d811      	bhi.n	8008006 <UART_SetConfig+0x33e>
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d003      	beq.n	8007fee <UART_SetConfig+0x326>
 8007fe6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fea:	d006      	beq.n	8007ffa <UART_SetConfig+0x332>
 8007fec:	e00b      	b.n	8008006 <UART_SetConfig+0x33e>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	77fb      	strb	r3, [r7, #31]
 8007ff2:	e00d      	b.n	8008010 <UART_SetConfig+0x348>
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	77fb      	strb	r3, [r7, #31]
 8007ff8:	e00a      	b.n	8008010 <UART_SetConfig+0x348>
 8007ffa:	2304      	movs	r3, #4
 8007ffc:	77fb      	strb	r3, [r7, #31]
 8007ffe:	e007      	b.n	8008010 <UART_SetConfig+0x348>
 8008000:	2308      	movs	r3, #8
 8008002:	77fb      	strb	r3, [r7, #31]
 8008004:	e004      	b.n	8008010 <UART_SetConfig+0x348>
 8008006:	2310      	movs	r3, #16
 8008008:	77fb      	strb	r3, [r7, #31]
 800800a:	e001      	b.n	8008010 <UART_SetConfig+0x348>
 800800c:	2310      	movs	r3, #16
 800800e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	69db      	ldr	r3, [r3, #28]
 8008014:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008018:	d15b      	bne.n	80080d2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800801a:	7ffb      	ldrb	r3, [r7, #31]
 800801c:	2b08      	cmp	r3, #8
 800801e:	d828      	bhi.n	8008072 <UART_SetConfig+0x3aa>
 8008020:	a201      	add	r2, pc, #4	@ (adr r2, 8008028 <UART_SetConfig+0x360>)
 8008022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008026:	bf00      	nop
 8008028:	0800804d 	.word	0x0800804d
 800802c:	08008055 	.word	0x08008055
 8008030:	0800805d 	.word	0x0800805d
 8008034:	08008073 	.word	0x08008073
 8008038:	08008063 	.word	0x08008063
 800803c:	08008073 	.word	0x08008073
 8008040:	08008073 	.word	0x08008073
 8008044:	08008073 	.word	0x08008073
 8008048:	0800806b 	.word	0x0800806b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800804c:	f7fd f9d2 	bl	80053f4 <HAL_RCC_GetPCLK1Freq>
 8008050:	61b8      	str	r0, [r7, #24]
        break;
 8008052:	e013      	b.n	800807c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008054:	f7fd f9e2 	bl	800541c <HAL_RCC_GetPCLK2Freq>
 8008058:	61b8      	str	r0, [r7, #24]
        break;
 800805a:	e00f      	b.n	800807c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800805c:	4b4b      	ldr	r3, [pc, #300]	@ (800818c <UART_SetConfig+0x4c4>)
 800805e:	61bb      	str	r3, [r7, #24]
        break;
 8008060:	e00c      	b.n	800807c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008062:	f7fd f8b5 	bl	80051d0 <HAL_RCC_GetSysClockFreq>
 8008066:	61b8      	str	r0, [r7, #24]
        break;
 8008068:	e008      	b.n	800807c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800806a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800806e:	61bb      	str	r3, [r7, #24]
        break;
 8008070:	e004      	b.n	800807c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008072:	2300      	movs	r3, #0
 8008074:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	77bb      	strb	r3, [r7, #30]
        break;
 800807a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d074      	beq.n	800816c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	005a      	lsls	r2, r3, #1
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	085b      	lsrs	r3, r3, #1
 800808c:	441a      	add	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	fbb2 f3f3 	udiv	r3, r2, r3
 8008096:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	2b0f      	cmp	r3, #15
 800809c:	d916      	bls.n	80080cc <UART_SetConfig+0x404>
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080a4:	d212      	bcs.n	80080cc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	f023 030f 	bic.w	r3, r3, #15
 80080ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	085b      	lsrs	r3, r3, #1
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	f003 0307 	and.w	r3, r3, #7
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	89fb      	ldrh	r3, [r7, #14]
 80080be:	4313      	orrs	r3, r2
 80080c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	89fa      	ldrh	r2, [r7, #14]
 80080c8:	60da      	str	r2, [r3, #12]
 80080ca:	e04f      	b.n	800816c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	77bb      	strb	r3, [r7, #30]
 80080d0:	e04c      	b.n	800816c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080d2:	7ffb      	ldrb	r3, [r7, #31]
 80080d4:	2b08      	cmp	r3, #8
 80080d6:	d828      	bhi.n	800812a <UART_SetConfig+0x462>
 80080d8:	a201      	add	r2, pc, #4	@ (adr r2, 80080e0 <UART_SetConfig+0x418>)
 80080da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080de:	bf00      	nop
 80080e0:	08008105 	.word	0x08008105
 80080e4:	0800810d 	.word	0x0800810d
 80080e8:	08008115 	.word	0x08008115
 80080ec:	0800812b 	.word	0x0800812b
 80080f0:	0800811b 	.word	0x0800811b
 80080f4:	0800812b 	.word	0x0800812b
 80080f8:	0800812b 	.word	0x0800812b
 80080fc:	0800812b 	.word	0x0800812b
 8008100:	08008123 	.word	0x08008123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008104:	f7fd f976 	bl	80053f4 <HAL_RCC_GetPCLK1Freq>
 8008108:	61b8      	str	r0, [r7, #24]
        break;
 800810a:	e013      	b.n	8008134 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800810c:	f7fd f986 	bl	800541c <HAL_RCC_GetPCLK2Freq>
 8008110:	61b8      	str	r0, [r7, #24]
        break;
 8008112:	e00f      	b.n	8008134 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008114:	4b1d      	ldr	r3, [pc, #116]	@ (800818c <UART_SetConfig+0x4c4>)
 8008116:	61bb      	str	r3, [r7, #24]
        break;
 8008118:	e00c      	b.n	8008134 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800811a:	f7fd f859 	bl	80051d0 <HAL_RCC_GetSysClockFreq>
 800811e:	61b8      	str	r0, [r7, #24]
        break;
 8008120:	e008      	b.n	8008134 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008122:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008126:	61bb      	str	r3, [r7, #24]
        break;
 8008128:	e004      	b.n	8008134 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800812a:	2300      	movs	r3, #0
 800812c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	77bb      	strb	r3, [r7, #30]
        break;
 8008132:	bf00      	nop
    }

    if (pclk != 0U)
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d018      	beq.n	800816c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	085a      	lsrs	r2, r3, #1
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	441a      	add	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	fbb2 f3f3 	udiv	r3, r2, r3
 800814c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	2b0f      	cmp	r3, #15
 8008152:	d909      	bls.n	8008168 <UART_SetConfig+0x4a0>
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800815a:	d205      	bcs.n	8008168 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	b29a      	uxth	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	60da      	str	r2, [r3, #12]
 8008166:	e001      	b.n	800816c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008178:	7fbb      	ldrb	r3, [r7, #30]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3720      	adds	r7, #32
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	40007c00 	.word	0x40007c00
 8008188:	40023800 	.word	0x40023800
 800818c:	00f42400 	.word	0x00f42400

08008190 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800819c:	f003 0308 	and.w	r3, r3, #8
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00a      	beq.n	80081ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	430a      	orrs	r2, r1
 80081b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081be:	f003 0301 	and.w	r3, r3, #1
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00a      	beq.n	80081dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	430a      	orrs	r2, r1
 80081da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081e0:	f003 0302 	and.w	r3, r3, #2
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00a      	beq.n	80081fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	430a      	orrs	r2, r1
 80081fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008202:	f003 0304 	and.w	r3, r3, #4
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00a      	beq.n	8008220 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	430a      	orrs	r2, r1
 800821e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008224:	f003 0310 	and.w	r3, r3, #16
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00a      	beq.n	8008242 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	430a      	orrs	r2, r1
 8008240:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008246:	f003 0320 	and.w	r3, r3, #32
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00a      	beq.n	8008264 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	430a      	orrs	r2, r1
 8008262:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800826c:	2b00      	cmp	r3, #0
 800826e:	d01a      	beq.n	80082a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	430a      	orrs	r2, r1
 8008284:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800828a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800828e:	d10a      	bne.n	80082a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	430a      	orrs	r2, r1
 80082a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00a      	beq.n	80082c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	430a      	orrs	r2, r1
 80082c6:	605a      	str	r2, [r3, #4]
  }
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b098      	sub	sp, #96	@ 0x60
 80082d8:	af02      	add	r7, sp, #8
 80082da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082e4:	f7fa ff6e 	bl	80031c4 <HAL_GetTick>
 80082e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0308 	and.w	r3, r3, #8
 80082f4:	2b08      	cmp	r3, #8
 80082f6:	d12e      	bne.n	8008356 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008300:	2200      	movs	r2, #0
 8008302:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f88c 	bl	8008424 <UART_WaitOnFlagUntilTimeout>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d021      	beq.n	8008356 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831a:	e853 3f00 	ldrex	r3, [r3]
 800831e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008322:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008326:	653b      	str	r3, [r7, #80]	@ 0x50
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	461a      	mov	r2, r3
 800832e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008330:	647b      	str	r3, [r7, #68]	@ 0x44
 8008332:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008334:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008336:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008338:	e841 2300 	strex	r3, r2, [r1]
 800833c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800833e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008340:	2b00      	cmp	r3, #0
 8008342:	d1e6      	bne.n	8008312 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2220      	movs	r2, #32
 8008348:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008352:	2303      	movs	r3, #3
 8008354:	e062      	b.n	800841c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 0304 	and.w	r3, r3, #4
 8008360:	2b04      	cmp	r3, #4
 8008362:	d149      	bne.n	80083f8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008364:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800836c:	2200      	movs	r2, #0
 800836e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f856 	bl	8008424 <UART_WaitOnFlagUntilTimeout>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d03c      	beq.n	80083f8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008386:	e853 3f00 	ldrex	r3, [r3]
 800838a:	623b      	str	r3, [r7, #32]
   return(result);
 800838c:	6a3b      	ldr	r3, [r7, #32]
 800838e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008392:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	461a      	mov	r2, r3
 800839a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800839c:	633b      	str	r3, [r7, #48]	@ 0x30
 800839e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083a4:	e841 2300 	strex	r3, r2, [r1]
 80083a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1e6      	bne.n	800837e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	3308      	adds	r3, #8
 80083b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	e853 3f00 	ldrex	r3, [r3]
 80083be:	60fb      	str	r3, [r7, #12]
   return(result);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f023 0301 	bic.w	r3, r3, #1
 80083c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	3308      	adds	r3, #8
 80083ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083d0:	61fa      	str	r2, [r7, #28]
 80083d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d4:	69b9      	ldr	r1, [r7, #24]
 80083d6:	69fa      	ldr	r2, [r7, #28]
 80083d8:	e841 2300 	strex	r3, r2, [r1]
 80083dc:	617b      	str	r3, [r7, #20]
   return(result);
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1e5      	bne.n	80083b0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2220      	movs	r2, #32
 80083e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083f4:	2303      	movs	r3, #3
 80083f6:	e011      	b.n	800841c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2220      	movs	r2, #32
 80083fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2220      	movs	r2, #32
 8008402:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3758      	adds	r7, #88	@ 0x58
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	603b      	str	r3, [r7, #0]
 8008430:	4613      	mov	r3, r2
 8008432:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008434:	e04f      	b.n	80084d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843c:	d04b      	beq.n	80084d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800843e:	f7fa fec1 	bl	80031c4 <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	69ba      	ldr	r2, [r7, #24]
 800844a:	429a      	cmp	r2, r3
 800844c:	d302      	bcc.n	8008454 <UART_WaitOnFlagUntilTimeout+0x30>
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d101      	bne.n	8008458 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008454:	2303      	movs	r3, #3
 8008456:	e04e      	b.n	80084f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 0304 	and.w	r3, r3, #4
 8008462:	2b00      	cmp	r3, #0
 8008464:	d037      	beq.n	80084d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	2b80      	cmp	r3, #128	@ 0x80
 800846a:	d034      	beq.n	80084d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	2b40      	cmp	r3, #64	@ 0x40
 8008470:	d031      	beq.n	80084d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	69db      	ldr	r3, [r3, #28]
 8008478:	f003 0308 	and.w	r3, r3, #8
 800847c:	2b08      	cmp	r3, #8
 800847e:	d110      	bne.n	80084a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2208      	movs	r2, #8
 8008486:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f000 f838 	bl	80084fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2208      	movs	r2, #8
 8008492:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e029      	b.n	80084f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	69db      	ldr	r3, [r3, #28]
 80084a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80084ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084b0:	d111      	bne.n	80084d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80084ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f000 f81e 	bl	80084fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2220      	movs	r2, #32
 80084c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80084d2:	2303      	movs	r3, #3
 80084d4:	e00f      	b.n	80084f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	69da      	ldr	r2, [r3, #28]
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	4013      	ands	r3, r2
 80084e0:	68ba      	ldr	r2, [r7, #8]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	bf0c      	ite	eq
 80084e6:	2301      	moveq	r3, #1
 80084e8:	2300      	movne	r3, #0
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	461a      	mov	r2, r3
 80084ee:	79fb      	ldrb	r3, [r7, #7]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d0a0      	beq.n	8008436 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084fe:	b480      	push	{r7}
 8008500:	b095      	sub	sp, #84	@ 0x54
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800850e:	e853 3f00 	ldrex	r3, [r3]
 8008512:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008516:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800851a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	461a      	mov	r2, r3
 8008522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008524:	643b      	str	r3, [r7, #64]	@ 0x40
 8008526:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008528:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800852a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800852c:	e841 2300 	strex	r3, r2, [r1]
 8008530:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1e6      	bne.n	8008506 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3308      	adds	r3, #8
 800853e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008540:	6a3b      	ldr	r3, [r7, #32]
 8008542:	e853 3f00 	ldrex	r3, [r3]
 8008546:	61fb      	str	r3, [r7, #28]
   return(result);
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	f023 0301 	bic.w	r3, r3, #1
 800854e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	3308      	adds	r3, #8
 8008556:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008558:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800855a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800855e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008560:	e841 2300 	strex	r3, r2, [r1]
 8008564:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1e5      	bne.n	8008538 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008570:	2b01      	cmp	r3, #1
 8008572:	d118      	bne.n	80085a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	e853 3f00 	ldrex	r3, [r3]
 8008580:	60bb      	str	r3, [r7, #8]
   return(result);
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	f023 0310 	bic.w	r3, r3, #16
 8008588:	647b      	str	r3, [r7, #68]	@ 0x44
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	461a      	mov	r2, r3
 8008590:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008592:	61bb      	str	r3, [r7, #24]
 8008594:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008596:	6979      	ldr	r1, [r7, #20]
 8008598:	69ba      	ldr	r2, [r7, #24]
 800859a:	e841 2300 	strex	r3, r2, [r1]
 800859e:	613b      	str	r3, [r7, #16]
   return(result);
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1e6      	bne.n	8008574 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2220      	movs	r2, #32
 80085aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80085ba:	bf00      	nop
 80085bc:	3754      	adds	r7, #84	@ 0x54
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr

080085c6 <atof>:
 80085c6:	2100      	movs	r1, #0
 80085c8:	f000 bdb4 	b.w	8009134 <strtod>

080085cc <sulp>:
 80085cc:	b570      	push	{r4, r5, r6, lr}
 80085ce:	4604      	mov	r4, r0
 80085d0:	460d      	mov	r5, r1
 80085d2:	4616      	mov	r6, r2
 80085d4:	ec45 4b10 	vmov	d0, r4, r5
 80085d8:	f002 f816 	bl	800a608 <__ulp>
 80085dc:	b17e      	cbz	r6, 80085fe <sulp+0x32>
 80085de:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80085e2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	dd09      	ble.n	80085fe <sulp+0x32>
 80085ea:	051b      	lsls	r3, r3, #20
 80085ec:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80085f0:	2000      	movs	r0, #0
 80085f2:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80085f6:	ec41 0b17 	vmov	d7, r0, r1
 80085fa:	ee20 0b07 	vmul.f64	d0, d0, d7
 80085fe:	bd70      	pop	{r4, r5, r6, pc}

08008600 <_strtod_l>:
 8008600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008604:	ed2d 8b0a 	vpush	{d8-d12}
 8008608:	b097      	sub	sp, #92	@ 0x5c
 800860a:	4688      	mov	r8, r1
 800860c:	920e      	str	r2, [sp, #56]	@ 0x38
 800860e:	2200      	movs	r2, #0
 8008610:	9212      	str	r2, [sp, #72]	@ 0x48
 8008612:	9005      	str	r0, [sp, #20]
 8008614:	f04f 0a00 	mov.w	sl, #0
 8008618:	f04f 0b00 	mov.w	fp, #0
 800861c:	460a      	mov	r2, r1
 800861e:	9211      	str	r2, [sp, #68]	@ 0x44
 8008620:	7811      	ldrb	r1, [r2, #0]
 8008622:	292b      	cmp	r1, #43	@ 0x2b
 8008624:	d04c      	beq.n	80086c0 <_strtod_l+0xc0>
 8008626:	d839      	bhi.n	800869c <_strtod_l+0x9c>
 8008628:	290d      	cmp	r1, #13
 800862a:	d833      	bhi.n	8008694 <_strtod_l+0x94>
 800862c:	2908      	cmp	r1, #8
 800862e:	d833      	bhi.n	8008698 <_strtod_l+0x98>
 8008630:	2900      	cmp	r1, #0
 8008632:	d03c      	beq.n	80086ae <_strtod_l+0xae>
 8008634:	2200      	movs	r2, #0
 8008636:	9208      	str	r2, [sp, #32]
 8008638:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800863a:	782a      	ldrb	r2, [r5, #0]
 800863c:	2a30      	cmp	r2, #48	@ 0x30
 800863e:	f040 80b7 	bne.w	80087b0 <_strtod_l+0x1b0>
 8008642:	786a      	ldrb	r2, [r5, #1]
 8008644:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008648:	2a58      	cmp	r2, #88	@ 0x58
 800864a:	d170      	bne.n	800872e <_strtod_l+0x12e>
 800864c:	9302      	str	r3, [sp, #8]
 800864e:	9b08      	ldr	r3, [sp, #32]
 8008650:	9301      	str	r3, [sp, #4]
 8008652:	ab12      	add	r3, sp, #72	@ 0x48
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	4a90      	ldr	r2, [pc, #576]	@ (8008898 <_strtod_l+0x298>)
 8008658:	9805      	ldr	r0, [sp, #20]
 800865a:	ab13      	add	r3, sp, #76	@ 0x4c
 800865c:	a911      	add	r1, sp, #68	@ 0x44
 800865e:	f001 f8d5 	bl	800980c <__gethex>
 8008662:	f010 060f 	ands.w	r6, r0, #15
 8008666:	4604      	mov	r4, r0
 8008668:	d005      	beq.n	8008676 <_strtod_l+0x76>
 800866a:	2e06      	cmp	r6, #6
 800866c:	d12a      	bne.n	80086c4 <_strtod_l+0xc4>
 800866e:	3501      	adds	r5, #1
 8008670:	2300      	movs	r3, #0
 8008672:	9511      	str	r5, [sp, #68]	@ 0x44
 8008674:	9308      	str	r3, [sp, #32]
 8008676:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008678:	2b00      	cmp	r3, #0
 800867a:	f040 8537 	bne.w	80090ec <_strtod_l+0xaec>
 800867e:	9b08      	ldr	r3, [sp, #32]
 8008680:	ec4b ab10 	vmov	d0, sl, fp
 8008684:	b1cb      	cbz	r3, 80086ba <_strtod_l+0xba>
 8008686:	eeb1 0b40 	vneg.f64	d0, d0
 800868a:	b017      	add	sp, #92	@ 0x5c
 800868c:	ecbd 8b0a 	vpop	{d8-d12}
 8008690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008694:	2920      	cmp	r1, #32
 8008696:	d1cd      	bne.n	8008634 <_strtod_l+0x34>
 8008698:	3201      	adds	r2, #1
 800869a:	e7c0      	b.n	800861e <_strtod_l+0x1e>
 800869c:	292d      	cmp	r1, #45	@ 0x2d
 800869e:	d1c9      	bne.n	8008634 <_strtod_l+0x34>
 80086a0:	2101      	movs	r1, #1
 80086a2:	9108      	str	r1, [sp, #32]
 80086a4:	1c51      	adds	r1, r2, #1
 80086a6:	9111      	str	r1, [sp, #68]	@ 0x44
 80086a8:	7852      	ldrb	r2, [r2, #1]
 80086aa:	2a00      	cmp	r2, #0
 80086ac:	d1c4      	bne.n	8008638 <_strtod_l+0x38>
 80086ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086b0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f040 8517 	bne.w	80090e8 <_strtod_l+0xae8>
 80086ba:	ec4b ab10 	vmov	d0, sl, fp
 80086be:	e7e4      	b.n	800868a <_strtod_l+0x8a>
 80086c0:	2100      	movs	r1, #0
 80086c2:	e7ee      	b.n	80086a2 <_strtod_l+0xa2>
 80086c4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80086c6:	b13a      	cbz	r2, 80086d8 <_strtod_l+0xd8>
 80086c8:	2135      	movs	r1, #53	@ 0x35
 80086ca:	a814      	add	r0, sp, #80	@ 0x50
 80086cc:	f002 f893 	bl	800a7f6 <__copybits>
 80086d0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80086d2:	9805      	ldr	r0, [sp, #20]
 80086d4:	f001 fc6c 	bl	8009fb0 <_Bfree>
 80086d8:	1e73      	subs	r3, r6, #1
 80086da:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80086dc:	2b04      	cmp	r3, #4
 80086de:	d806      	bhi.n	80086ee <_strtod_l+0xee>
 80086e0:	e8df f003 	tbb	[pc, r3]
 80086e4:	201d0314 	.word	0x201d0314
 80086e8:	14          	.byte	0x14
 80086e9:	00          	.byte	0x00
 80086ea:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 80086ee:	05e3      	lsls	r3, r4, #23
 80086f0:	bf48      	it	mi
 80086f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80086f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80086fa:	0d1b      	lsrs	r3, r3, #20
 80086fc:	051b      	lsls	r3, r3, #20
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1b9      	bne.n	8008676 <_strtod_l+0x76>
 8008702:	f000 ff8d 	bl	8009620 <__errno>
 8008706:	2322      	movs	r3, #34	@ 0x22
 8008708:	6003      	str	r3, [r0, #0]
 800870a:	e7b4      	b.n	8008676 <_strtod_l+0x76>
 800870c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8008710:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008714:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008718:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800871c:	e7e7      	b.n	80086ee <_strtod_l+0xee>
 800871e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80088a0 <_strtod_l+0x2a0>
 8008722:	e7e4      	b.n	80086ee <_strtod_l+0xee>
 8008724:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008728:	f04f 3aff 	mov.w	sl, #4294967295
 800872c:	e7df      	b.n	80086ee <_strtod_l+0xee>
 800872e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008730:	1c5a      	adds	r2, r3, #1
 8008732:	9211      	str	r2, [sp, #68]	@ 0x44
 8008734:	785b      	ldrb	r3, [r3, #1]
 8008736:	2b30      	cmp	r3, #48	@ 0x30
 8008738:	d0f9      	beq.n	800872e <_strtod_l+0x12e>
 800873a:	2b00      	cmp	r3, #0
 800873c:	d09b      	beq.n	8008676 <_strtod_l+0x76>
 800873e:	2301      	movs	r3, #1
 8008740:	9307      	str	r3, [sp, #28]
 8008742:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008744:	930a      	str	r3, [sp, #40]	@ 0x28
 8008746:	2300      	movs	r3, #0
 8008748:	9306      	str	r3, [sp, #24]
 800874a:	4699      	mov	r9, r3
 800874c:	461d      	mov	r5, r3
 800874e:	220a      	movs	r2, #10
 8008750:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8008752:	7804      	ldrb	r4, [r0, #0]
 8008754:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8008758:	b2d9      	uxtb	r1, r3
 800875a:	2909      	cmp	r1, #9
 800875c:	d92a      	bls.n	80087b4 <_strtod_l+0x1b4>
 800875e:	494f      	ldr	r1, [pc, #316]	@ (800889c <_strtod_l+0x29c>)
 8008760:	2201      	movs	r2, #1
 8008762:	f000 ff05 	bl	8009570 <strncmp>
 8008766:	b398      	cbz	r0, 80087d0 <_strtod_l+0x1d0>
 8008768:	2000      	movs	r0, #0
 800876a:	4622      	mov	r2, r4
 800876c:	462b      	mov	r3, r5
 800876e:	4607      	mov	r7, r0
 8008770:	4601      	mov	r1, r0
 8008772:	2a65      	cmp	r2, #101	@ 0x65
 8008774:	d001      	beq.n	800877a <_strtod_l+0x17a>
 8008776:	2a45      	cmp	r2, #69	@ 0x45
 8008778:	d118      	bne.n	80087ac <_strtod_l+0x1ac>
 800877a:	b91b      	cbnz	r3, 8008784 <_strtod_l+0x184>
 800877c:	9b07      	ldr	r3, [sp, #28]
 800877e:	4303      	orrs	r3, r0
 8008780:	d095      	beq.n	80086ae <_strtod_l+0xae>
 8008782:	2300      	movs	r3, #0
 8008784:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8008788:	f108 0201 	add.w	r2, r8, #1
 800878c:	9211      	str	r2, [sp, #68]	@ 0x44
 800878e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008792:	2a2b      	cmp	r2, #43	@ 0x2b
 8008794:	d074      	beq.n	8008880 <_strtod_l+0x280>
 8008796:	2a2d      	cmp	r2, #45	@ 0x2d
 8008798:	d07a      	beq.n	8008890 <_strtod_l+0x290>
 800879a:	f04f 0e00 	mov.w	lr, #0
 800879e:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80087a2:	2c09      	cmp	r4, #9
 80087a4:	f240 8082 	bls.w	80088ac <_strtod_l+0x2ac>
 80087a8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80087ac:	2400      	movs	r4, #0
 80087ae:	e09d      	b.n	80088ec <_strtod_l+0x2ec>
 80087b0:	2300      	movs	r3, #0
 80087b2:	e7c5      	b.n	8008740 <_strtod_l+0x140>
 80087b4:	2d08      	cmp	r5, #8
 80087b6:	bfc8      	it	gt
 80087b8:	9906      	ldrgt	r1, [sp, #24]
 80087ba:	f100 0001 	add.w	r0, r0, #1
 80087be:	bfca      	itet	gt
 80087c0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80087c4:	fb02 3909 	mlale	r9, r2, r9, r3
 80087c8:	9306      	strgt	r3, [sp, #24]
 80087ca:	3501      	adds	r5, #1
 80087cc:	9011      	str	r0, [sp, #68]	@ 0x44
 80087ce:	e7bf      	b.n	8008750 <_strtod_l+0x150>
 80087d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80087d2:	1c5a      	adds	r2, r3, #1
 80087d4:	9211      	str	r2, [sp, #68]	@ 0x44
 80087d6:	785a      	ldrb	r2, [r3, #1]
 80087d8:	b3bd      	cbz	r5, 800884a <_strtod_l+0x24a>
 80087da:	4607      	mov	r7, r0
 80087dc:	462b      	mov	r3, r5
 80087de:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80087e2:	2909      	cmp	r1, #9
 80087e4:	d912      	bls.n	800880c <_strtod_l+0x20c>
 80087e6:	2101      	movs	r1, #1
 80087e8:	e7c3      	b.n	8008772 <_strtod_l+0x172>
 80087ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80087ec:	1c5a      	adds	r2, r3, #1
 80087ee:	9211      	str	r2, [sp, #68]	@ 0x44
 80087f0:	785a      	ldrb	r2, [r3, #1]
 80087f2:	3001      	adds	r0, #1
 80087f4:	2a30      	cmp	r2, #48	@ 0x30
 80087f6:	d0f8      	beq.n	80087ea <_strtod_l+0x1ea>
 80087f8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80087fc:	2b08      	cmp	r3, #8
 80087fe:	f200 847a 	bhi.w	80090f6 <_strtod_l+0xaf6>
 8008802:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008804:	930a      	str	r3, [sp, #40]	@ 0x28
 8008806:	4607      	mov	r7, r0
 8008808:	2000      	movs	r0, #0
 800880a:	4603      	mov	r3, r0
 800880c:	3a30      	subs	r2, #48	@ 0x30
 800880e:	f100 0101 	add.w	r1, r0, #1
 8008812:	d014      	beq.n	800883e <_strtod_l+0x23e>
 8008814:	440f      	add	r7, r1
 8008816:	469c      	mov	ip, r3
 8008818:	f04f 0e0a 	mov.w	lr, #10
 800881c:	f10c 0401 	add.w	r4, ip, #1
 8008820:	1ae6      	subs	r6, r4, r3
 8008822:	42b1      	cmp	r1, r6
 8008824:	dc13      	bgt.n	800884e <_strtod_l+0x24e>
 8008826:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800882a:	1819      	adds	r1, r3, r0
 800882c:	2908      	cmp	r1, #8
 800882e:	f103 0301 	add.w	r3, r3, #1
 8008832:	4403      	add	r3, r0
 8008834:	dc19      	bgt.n	800886a <_strtod_l+0x26a>
 8008836:	210a      	movs	r1, #10
 8008838:	fb01 2909 	mla	r9, r1, r9, r2
 800883c:	2100      	movs	r1, #0
 800883e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008840:	1c50      	adds	r0, r2, #1
 8008842:	9011      	str	r0, [sp, #68]	@ 0x44
 8008844:	7852      	ldrb	r2, [r2, #1]
 8008846:	4608      	mov	r0, r1
 8008848:	e7c9      	b.n	80087de <_strtod_l+0x1de>
 800884a:	4628      	mov	r0, r5
 800884c:	e7d2      	b.n	80087f4 <_strtod_l+0x1f4>
 800884e:	f1bc 0f08 	cmp.w	ip, #8
 8008852:	dc03      	bgt.n	800885c <_strtod_l+0x25c>
 8008854:	fb0e f909 	mul.w	r9, lr, r9
 8008858:	46a4      	mov	ip, r4
 800885a:	e7df      	b.n	800881c <_strtod_l+0x21c>
 800885c:	2c10      	cmp	r4, #16
 800885e:	bfde      	ittt	le
 8008860:	9e06      	ldrle	r6, [sp, #24]
 8008862:	fb0e f606 	mulle.w	r6, lr, r6
 8008866:	9606      	strle	r6, [sp, #24]
 8008868:	e7f6      	b.n	8008858 <_strtod_l+0x258>
 800886a:	290f      	cmp	r1, #15
 800886c:	bfdf      	itttt	le
 800886e:	9806      	ldrle	r0, [sp, #24]
 8008870:	210a      	movle	r1, #10
 8008872:	fb01 2200 	mlale	r2, r1, r0, r2
 8008876:	9206      	strle	r2, [sp, #24]
 8008878:	e7e0      	b.n	800883c <_strtod_l+0x23c>
 800887a:	2700      	movs	r7, #0
 800887c:	2101      	movs	r1, #1
 800887e:	e77d      	b.n	800877c <_strtod_l+0x17c>
 8008880:	f04f 0e00 	mov.w	lr, #0
 8008884:	f108 0202 	add.w	r2, r8, #2
 8008888:	9211      	str	r2, [sp, #68]	@ 0x44
 800888a:	f898 2002 	ldrb.w	r2, [r8, #2]
 800888e:	e786      	b.n	800879e <_strtod_l+0x19e>
 8008890:	f04f 0e01 	mov.w	lr, #1
 8008894:	e7f6      	b.n	8008884 <_strtod_l+0x284>
 8008896:	bf00      	nop
 8008898:	0800b3fc 	.word	0x0800b3fc
 800889c:	0800b280 	.word	0x0800b280
 80088a0:	7ff00000 	.word	0x7ff00000
 80088a4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80088a6:	1c54      	adds	r4, r2, #1
 80088a8:	9411      	str	r4, [sp, #68]	@ 0x44
 80088aa:	7852      	ldrb	r2, [r2, #1]
 80088ac:	2a30      	cmp	r2, #48	@ 0x30
 80088ae:	d0f9      	beq.n	80088a4 <_strtod_l+0x2a4>
 80088b0:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80088b4:	2c08      	cmp	r4, #8
 80088b6:	f63f af79 	bhi.w	80087ac <_strtod_l+0x1ac>
 80088ba:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 80088be:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80088c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80088c2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80088c4:	1c54      	adds	r4, r2, #1
 80088c6:	9411      	str	r4, [sp, #68]	@ 0x44
 80088c8:	7852      	ldrb	r2, [r2, #1]
 80088ca:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 80088ce:	2e09      	cmp	r6, #9
 80088d0:	d937      	bls.n	8008942 <_strtod_l+0x342>
 80088d2:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80088d4:	1ba4      	subs	r4, r4, r6
 80088d6:	2c08      	cmp	r4, #8
 80088d8:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 80088dc:	dc02      	bgt.n	80088e4 <_strtod_l+0x2e4>
 80088de:	4564      	cmp	r4, ip
 80088e0:	bfa8      	it	ge
 80088e2:	4664      	movge	r4, ip
 80088e4:	f1be 0f00 	cmp.w	lr, #0
 80088e8:	d000      	beq.n	80088ec <_strtod_l+0x2ec>
 80088ea:	4264      	negs	r4, r4
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d14d      	bne.n	800898c <_strtod_l+0x38c>
 80088f0:	9b07      	ldr	r3, [sp, #28]
 80088f2:	4318      	orrs	r0, r3
 80088f4:	f47f aebf 	bne.w	8008676 <_strtod_l+0x76>
 80088f8:	2900      	cmp	r1, #0
 80088fa:	f47f aed8 	bne.w	80086ae <_strtod_l+0xae>
 80088fe:	2a69      	cmp	r2, #105	@ 0x69
 8008900:	d027      	beq.n	8008952 <_strtod_l+0x352>
 8008902:	dc24      	bgt.n	800894e <_strtod_l+0x34e>
 8008904:	2a49      	cmp	r2, #73	@ 0x49
 8008906:	d024      	beq.n	8008952 <_strtod_l+0x352>
 8008908:	2a4e      	cmp	r2, #78	@ 0x4e
 800890a:	f47f aed0 	bne.w	80086ae <_strtod_l+0xae>
 800890e:	4997      	ldr	r1, [pc, #604]	@ (8008b6c <_strtod_l+0x56c>)
 8008910:	a811      	add	r0, sp, #68	@ 0x44
 8008912:	f001 f99d 	bl	8009c50 <__match>
 8008916:	2800      	cmp	r0, #0
 8008918:	f43f aec9 	beq.w	80086ae <_strtod_l+0xae>
 800891c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	2b28      	cmp	r3, #40	@ 0x28
 8008922:	d12d      	bne.n	8008980 <_strtod_l+0x380>
 8008924:	4992      	ldr	r1, [pc, #584]	@ (8008b70 <_strtod_l+0x570>)
 8008926:	aa14      	add	r2, sp, #80	@ 0x50
 8008928:	a811      	add	r0, sp, #68	@ 0x44
 800892a:	f001 f9a5 	bl	8009c78 <__hexnan>
 800892e:	2805      	cmp	r0, #5
 8008930:	d126      	bne.n	8008980 <_strtod_l+0x380>
 8008932:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008934:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8008938:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800893c:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008940:	e699      	b.n	8008676 <_strtod_l+0x76>
 8008942:	240a      	movs	r4, #10
 8008944:	fb04 2c0c 	mla	ip, r4, ip, r2
 8008948:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800894c:	e7b9      	b.n	80088c2 <_strtod_l+0x2c2>
 800894e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008950:	e7db      	b.n	800890a <_strtod_l+0x30a>
 8008952:	4988      	ldr	r1, [pc, #544]	@ (8008b74 <_strtod_l+0x574>)
 8008954:	a811      	add	r0, sp, #68	@ 0x44
 8008956:	f001 f97b 	bl	8009c50 <__match>
 800895a:	2800      	cmp	r0, #0
 800895c:	f43f aea7 	beq.w	80086ae <_strtod_l+0xae>
 8008960:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008962:	4985      	ldr	r1, [pc, #532]	@ (8008b78 <_strtod_l+0x578>)
 8008964:	3b01      	subs	r3, #1
 8008966:	a811      	add	r0, sp, #68	@ 0x44
 8008968:	9311      	str	r3, [sp, #68]	@ 0x44
 800896a:	f001 f971 	bl	8009c50 <__match>
 800896e:	b910      	cbnz	r0, 8008976 <_strtod_l+0x376>
 8008970:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008972:	3301      	adds	r3, #1
 8008974:	9311      	str	r3, [sp, #68]	@ 0x44
 8008976:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8008b8c <_strtod_l+0x58c>
 800897a:	f04f 0a00 	mov.w	sl, #0
 800897e:	e67a      	b.n	8008676 <_strtod_l+0x76>
 8008980:	487e      	ldr	r0, [pc, #504]	@ (8008b7c <_strtod_l+0x57c>)
 8008982:	f000 fe89 	bl	8009698 <nan>
 8008986:	ec5b ab10 	vmov	sl, fp, d0
 800898a:	e674      	b.n	8008676 <_strtod_l+0x76>
 800898c:	ee07 9a90 	vmov	s15, r9
 8008990:	1be2      	subs	r2, r4, r7
 8008992:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008996:	2d00      	cmp	r5, #0
 8008998:	bf08      	it	eq
 800899a:	461d      	moveq	r5, r3
 800899c:	2b10      	cmp	r3, #16
 800899e:	9209      	str	r2, [sp, #36]	@ 0x24
 80089a0:	461a      	mov	r2, r3
 80089a2:	bfa8      	it	ge
 80089a4:	2210      	movge	r2, #16
 80089a6:	2b09      	cmp	r3, #9
 80089a8:	ec5b ab17 	vmov	sl, fp, d7
 80089ac:	dc15      	bgt.n	80089da <_strtod_l+0x3da>
 80089ae:	1be1      	subs	r1, r4, r7
 80089b0:	2900      	cmp	r1, #0
 80089b2:	f43f ae60 	beq.w	8008676 <_strtod_l+0x76>
 80089b6:	eba4 0107 	sub.w	r1, r4, r7
 80089ba:	dd72      	ble.n	8008aa2 <_strtod_l+0x4a2>
 80089bc:	2916      	cmp	r1, #22
 80089be:	dc59      	bgt.n	8008a74 <_strtod_l+0x474>
 80089c0:	4b6f      	ldr	r3, [pc, #444]	@ (8008b80 <_strtod_l+0x580>)
 80089c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089c8:	ed93 7b00 	vldr	d7, [r3]
 80089cc:	ec4b ab16 	vmov	d6, sl, fp
 80089d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80089d4:	ec5b ab17 	vmov	sl, fp, d7
 80089d8:	e64d      	b.n	8008676 <_strtod_l+0x76>
 80089da:	4969      	ldr	r1, [pc, #420]	@ (8008b80 <_strtod_l+0x580>)
 80089dc:	eddd 6a06 	vldr	s13, [sp, #24]
 80089e0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80089e4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 80089e8:	2b0f      	cmp	r3, #15
 80089ea:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80089ee:	eea7 6b05 	vfma.f64	d6, d7, d5
 80089f2:	ec5b ab16 	vmov	sl, fp, d6
 80089f6:	ddda      	ble.n	80089ae <_strtod_l+0x3ae>
 80089f8:	1a9a      	subs	r2, r3, r2
 80089fa:	1be1      	subs	r1, r4, r7
 80089fc:	440a      	add	r2, r1
 80089fe:	2a00      	cmp	r2, #0
 8008a00:	f340 8094 	ble.w	8008b2c <_strtod_l+0x52c>
 8008a04:	f012 000f 	ands.w	r0, r2, #15
 8008a08:	d00a      	beq.n	8008a20 <_strtod_l+0x420>
 8008a0a:	495d      	ldr	r1, [pc, #372]	@ (8008b80 <_strtod_l+0x580>)
 8008a0c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008a10:	ed91 7b00 	vldr	d7, [r1]
 8008a14:	ec4b ab16 	vmov	d6, sl, fp
 8008a18:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a1c:	ec5b ab17 	vmov	sl, fp, d7
 8008a20:	f032 020f 	bics.w	r2, r2, #15
 8008a24:	d073      	beq.n	8008b0e <_strtod_l+0x50e>
 8008a26:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8008a2a:	dd47      	ble.n	8008abc <_strtod_l+0x4bc>
 8008a2c:	2400      	movs	r4, #0
 8008a2e:	4625      	mov	r5, r4
 8008a30:	9407      	str	r4, [sp, #28]
 8008a32:	4626      	mov	r6, r4
 8008a34:	9a05      	ldr	r2, [sp, #20]
 8008a36:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008b8c <_strtod_l+0x58c>
 8008a3a:	2322      	movs	r3, #34	@ 0x22
 8008a3c:	6013      	str	r3, [r2, #0]
 8008a3e:	f04f 0a00 	mov.w	sl, #0
 8008a42:	9b07      	ldr	r3, [sp, #28]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f43f ae16 	beq.w	8008676 <_strtod_l+0x76>
 8008a4a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008a4c:	9805      	ldr	r0, [sp, #20]
 8008a4e:	f001 faaf 	bl	8009fb0 <_Bfree>
 8008a52:	9805      	ldr	r0, [sp, #20]
 8008a54:	4631      	mov	r1, r6
 8008a56:	f001 faab 	bl	8009fb0 <_Bfree>
 8008a5a:	9805      	ldr	r0, [sp, #20]
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	f001 faa7 	bl	8009fb0 <_Bfree>
 8008a62:	9907      	ldr	r1, [sp, #28]
 8008a64:	9805      	ldr	r0, [sp, #20]
 8008a66:	f001 faa3 	bl	8009fb0 <_Bfree>
 8008a6a:	9805      	ldr	r0, [sp, #20]
 8008a6c:	4621      	mov	r1, r4
 8008a6e:	f001 fa9f 	bl	8009fb0 <_Bfree>
 8008a72:	e600      	b.n	8008676 <_strtod_l+0x76>
 8008a74:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8008a78:	1be0      	subs	r0, r4, r7
 8008a7a:	4281      	cmp	r1, r0
 8008a7c:	dbbc      	blt.n	80089f8 <_strtod_l+0x3f8>
 8008a7e:	4a40      	ldr	r2, [pc, #256]	@ (8008b80 <_strtod_l+0x580>)
 8008a80:	f1c3 030f 	rsb	r3, r3, #15
 8008a84:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008a88:	ed91 7b00 	vldr	d7, [r1]
 8008a8c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a8e:	ec4b ab16 	vmov	d6, sl, fp
 8008a92:	1acb      	subs	r3, r1, r3
 8008a94:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008a98:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a9c:	ed92 6b00 	vldr	d6, [r2]
 8008aa0:	e796      	b.n	80089d0 <_strtod_l+0x3d0>
 8008aa2:	3116      	adds	r1, #22
 8008aa4:	dba8      	blt.n	80089f8 <_strtod_l+0x3f8>
 8008aa6:	4b36      	ldr	r3, [pc, #216]	@ (8008b80 <_strtod_l+0x580>)
 8008aa8:	1b3c      	subs	r4, r7, r4
 8008aaa:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008aae:	ed94 7b00 	vldr	d7, [r4]
 8008ab2:	ec4b ab16 	vmov	d6, sl, fp
 8008ab6:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008aba:	e78b      	b.n	80089d4 <_strtod_l+0x3d4>
 8008abc:	2000      	movs	r0, #0
 8008abe:	ec4b ab17 	vmov	d7, sl, fp
 8008ac2:	4e30      	ldr	r6, [pc, #192]	@ (8008b84 <_strtod_l+0x584>)
 8008ac4:	1112      	asrs	r2, r2, #4
 8008ac6:	4601      	mov	r1, r0
 8008ac8:	2a01      	cmp	r2, #1
 8008aca:	dc23      	bgt.n	8008b14 <_strtod_l+0x514>
 8008acc:	b108      	cbz	r0, 8008ad2 <_strtod_l+0x4d2>
 8008ace:	ec5b ab17 	vmov	sl, fp, d7
 8008ad2:	4a2c      	ldr	r2, [pc, #176]	@ (8008b84 <_strtod_l+0x584>)
 8008ad4:	482c      	ldr	r0, [pc, #176]	@ (8008b88 <_strtod_l+0x588>)
 8008ad6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008ada:	ed92 7b00 	vldr	d7, [r2]
 8008ade:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008ae2:	ec4b ab16 	vmov	d6, sl, fp
 8008ae6:	4a29      	ldr	r2, [pc, #164]	@ (8008b8c <_strtod_l+0x58c>)
 8008ae8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008aec:	ee17 1a90 	vmov	r1, s15
 8008af0:	400a      	ands	r2, r1
 8008af2:	4282      	cmp	r2, r0
 8008af4:	ec5b ab17 	vmov	sl, fp, d7
 8008af8:	d898      	bhi.n	8008a2c <_strtod_l+0x42c>
 8008afa:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8008afe:	4282      	cmp	r2, r0
 8008b00:	bf86      	itte	hi
 8008b02:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8008b90 <_strtod_l+0x590>
 8008b06:	f04f 3aff 	movhi.w	sl, #4294967295
 8008b0a:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8008b0e:	2200      	movs	r2, #0
 8008b10:	9206      	str	r2, [sp, #24]
 8008b12:	e076      	b.n	8008c02 <_strtod_l+0x602>
 8008b14:	f012 0f01 	tst.w	r2, #1
 8008b18:	d004      	beq.n	8008b24 <_strtod_l+0x524>
 8008b1a:	ed96 6b00 	vldr	d6, [r6]
 8008b1e:	2001      	movs	r0, #1
 8008b20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008b24:	3101      	adds	r1, #1
 8008b26:	1052      	asrs	r2, r2, #1
 8008b28:	3608      	adds	r6, #8
 8008b2a:	e7cd      	b.n	8008ac8 <_strtod_l+0x4c8>
 8008b2c:	d0ef      	beq.n	8008b0e <_strtod_l+0x50e>
 8008b2e:	4252      	negs	r2, r2
 8008b30:	f012 000f 	ands.w	r0, r2, #15
 8008b34:	d00a      	beq.n	8008b4c <_strtod_l+0x54c>
 8008b36:	4912      	ldr	r1, [pc, #72]	@ (8008b80 <_strtod_l+0x580>)
 8008b38:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008b3c:	ed91 7b00 	vldr	d7, [r1]
 8008b40:	ec4b ab16 	vmov	d6, sl, fp
 8008b44:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008b48:	ec5b ab17 	vmov	sl, fp, d7
 8008b4c:	1112      	asrs	r2, r2, #4
 8008b4e:	d0de      	beq.n	8008b0e <_strtod_l+0x50e>
 8008b50:	2a1f      	cmp	r2, #31
 8008b52:	dd1f      	ble.n	8008b94 <_strtod_l+0x594>
 8008b54:	2400      	movs	r4, #0
 8008b56:	4625      	mov	r5, r4
 8008b58:	9407      	str	r4, [sp, #28]
 8008b5a:	4626      	mov	r6, r4
 8008b5c:	9a05      	ldr	r2, [sp, #20]
 8008b5e:	2322      	movs	r3, #34	@ 0x22
 8008b60:	f04f 0a00 	mov.w	sl, #0
 8008b64:	f04f 0b00 	mov.w	fp, #0
 8008b68:	6013      	str	r3, [r2, #0]
 8008b6a:	e76a      	b.n	8008a42 <_strtod_l+0x442>
 8008b6c:	0800b28b 	.word	0x0800b28b
 8008b70:	0800b3e8 	.word	0x0800b3e8
 8008b74:	0800b282 	.word	0x0800b282
 8008b78:	0800b285 	.word	0x0800b285
 8008b7c:	0800b3e5 	.word	0x0800b3e5
 8008b80:	0800b470 	.word	0x0800b470
 8008b84:	0800b448 	.word	0x0800b448
 8008b88:	7ca00000 	.word	0x7ca00000
 8008b8c:	7ff00000 	.word	0x7ff00000
 8008b90:	7fefffff 	.word	0x7fefffff
 8008b94:	f012 0110 	ands.w	r1, r2, #16
 8008b98:	bf18      	it	ne
 8008b9a:	216a      	movne	r1, #106	@ 0x6a
 8008b9c:	9106      	str	r1, [sp, #24]
 8008b9e:	ec4b ab17 	vmov	d7, sl, fp
 8008ba2:	49af      	ldr	r1, [pc, #700]	@ (8008e60 <_strtod_l+0x860>)
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	07d6      	lsls	r6, r2, #31
 8008ba8:	d504      	bpl.n	8008bb4 <_strtod_l+0x5b4>
 8008baa:	ed91 6b00 	vldr	d6, [r1]
 8008bae:	2001      	movs	r0, #1
 8008bb0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008bb4:	1052      	asrs	r2, r2, #1
 8008bb6:	f101 0108 	add.w	r1, r1, #8
 8008bba:	d1f4      	bne.n	8008ba6 <_strtod_l+0x5a6>
 8008bbc:	b108      	cbz	r0, 8008bc2 <_strtod_l+0x5c2>
 8008bbe:	ec5b ab17 	vmov	sl, fp, d7
 8008bc2:	9a06      	ldr	r2, [sp, #24]
 8008bc4:	b1b2      	cbz	r2, 8008bf4 <_strtod_l+0x5f4>
 8008bc6:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8008bca:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8008bce:	2a00      	cmp	r2, #0
 8008bd0:	4658      	mov	r0, fp
 8008bd2:	dd0f      	ble.n	8008bf4 <_strtod_l+0x5f4>
 8008bd4:	2a1f      	cmp	r2, #31
 8008bd6:	dd55      	ble.n	8008c84 <_strtod_l+0x684>
 8008bd8:	2a34      	cmp	r2, #52	@ 0x34
 8008bda:	bfde      	ittt	le
 8008bdc:	f04f 32ff 	movle.w	r2, #4294967295
 8008be0:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8008be4:	408a      	lslle	r2, r1
 8008be6:	f04f 0a00 	mov.w	sl, #0
 8008bea:	bfcc      	ite	gt
 8008bec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008bf0:	ea02 0b00 	andle.w	fp, r2, r0
 8008bf4:	ec4b ab17 	vmov	d7, sl, fp
 8008bf8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c00:	d0a8      	beq.n	8008b54 <_strtod_l+0x554>
 8008c02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c04:	9805      	ldr	r0, [sp, #20]
 8008c06:	f8cd 9000 	str.w	r9, [sp]
 8008c0a:	462a      	mov	r2, r5
 8008c0c:	f001 fa38 	bl	800a080 <__s2b>
 8008c10:	9007      	str	r0, [sp, #28]
 8008c12:	2800      	cmp	r0, #0
 8008c14:	f43f af0a 	beq.w	8008a2c <_strtod_l+0x42c>
 8008c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c1a:	1b3f      	subs	r7, r7, r4
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	bfb4      	ite	lt
 8008c20:	463b      	movlt	r3, r7
 8008c22:	2300      	movge	r3, #0
 8008c24:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c28:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8008e50 <_strtod_l+0x850>
 8008c2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008c30:	2400      	movs	r4, #0
 8008c32:	930d      	str	r3, [sp, #52]	@ 0x34
 8008c34:	4625      	mov	r5, r4
 8008c36:	9b07      	ldr	r3, [sp, #28]
 8008c38:	9805      	ldr	r0, [sp, #20]
 8008c3a:	6859      	ldr	r1, [r3, #4]
 8008c3c:	f001 f978 	bl	8009f30 <_Balloc>
 8008c40:	4606      	mov	r6, r0
 8008c42:	2800      	cmp	r0, #0
 8008c44:	f43f aef6 	beq.w	8008a34 <_strtod_l+0x434>
 8008c48:	9b07      	ldr	r3, [sp, #28]
 8008c4a:	691a      	ldr	r2, [r3, #16]
 8008c4c:	ec4b ab19 	vmov	d9, sl, fp
 8008c50:	3202      	adds	r2, #2
 8008c52:	f103 010c 	add.w	r1, r3, #12
 8008c56:	0092      	lsls	r2, r2, #2
 8008c58:	300c      	adds	r0, #12
 8008c5a:	f000 fd0e 	bl	800967a <memcpy>
 8008c5e:	eeb0 0b49 	vmov.f64	d0, d9
 8008c62:	9805      	ldr	r0, [sp, #20]
 8008c64:	aa14      	add	r2, sp, #80	@ 0x50
 8008c66:	a913      	add	r1, sp, #76	@ 0x4c
 8008c68:	f001 fd3e 	bl	800a6e8 <__d2b>
 8008c6c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	f43f aee0 	beq.w	8008a34 <_strtod_l+0x434>
 8008c74:	9805      	ldr	r0, [sp, #20]
 8008c76:	2101      	movs	r1, #1
 8008c78:	f001 fa98 	bl	800a1ac <__i2b>
 8008c7c:	4605      	mov	r5, r0
 8008c7e:	b940      	cbnz	r0, 8008c92 <_strtod_l+0x692>
 8008c80:	2500      	movs	r5, #0
 8008c82:	e6d7      	b.n	8008a34 <_strtod_l+0x434>
 8008c84:	f04f 31ff 	mov.w	r1, #4294967295
 8008c88:	fa01 f202 	lsl.w	r2, r1, r2
 8008c8c:	ea02 0a0a 	and.w	sl, r2, sl
 8008c90:	e7b0      	b.n	8008bf4 <_strtod_l+0x5f4>
 8008c92:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8008c94:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008c96:	2f00      	cmp	r7, #0
 8008c98:	bfab      	itete	ge
 8008c9a:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8008c9c:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8008c9e:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8008ca2:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8008ca6:	bfac      	ite	ge
 8008ca8:	eb07 0903 	addge.w	r9, r7, r3
 8008cac:	eba3 0807 	sublt.w	r8, r3, r7
 8008cb0:	9b06      	ldr	r3, [sp, #24]
 8008cb2:	1aff      	subs	r7, r7, r3
 8008cb4:	4417      	add	r7, r2
 8008cb6:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8008cba:	4a6a      	ldr	r2, [pc, #424]	@ (8008e64 <_strtod_l+0x864>)
 8008cbc:	3f01      	subs	r7, #1
 8008cbe:	4297      	cmp	r7, r2
 8008cc0:	da51      	bge.n	8008d66 <_strtod_l+0x766>
 8008cc2:	1bd1      	subs	r1, r2, r7
 8008cc4:	291f      	cmp	r1, #31
 8008cc6:	eba3 0301 	sub.w	r3, r3, r1
 8008cca:	f04f 0201 	mov.w	r2, #1
 8008cce:	dc3e      	bgt.n	8008d4e <_strtod_l+0x74e>
 8008cd0:	408a      	lsls	r2, r1
 8008cd2:	920c      	str	r2, [sp, #48]	@ 0x30
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008cd8:	eb09 0703 	add.w	r7, r9, r3
 8008cdc:	4498      	add	r8, r3
 8008cde:	9b06      	ldr	r3, [sp, #24]
 8008ce0:	45b9      	cmp	r9, r7
 8008ce2:	4498      	add	r8, r3
 8008ce4:	464b      	mov	r3, r9
 8008ce6:	bfa8      	it	ge
 8008ce8:	463b      	movge	r3, r7
 8008cea:	4543      	cmp	r3, r8
 8008cec:	bfa8      	it	ge
 8008cee:	4643      	movge	r3, r8
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	bfc2      	ittt	gt
 8008cf4:	1aff      	subgt	r7, r7, r3
 8008cf6:	eba8 0803 	subgt.w	r8, r8, r3
 8008cfa:	eba9 0903 	subgt.w	r9, r9, r3
 8008cfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	dd16      	ble.n	8008d32 <_strtod_l+0x732>
 8008d04:	4629      	mov	r1, r5
 8008d06:	9805      	ldr	r0, [sp, #20]
 8008d08:	461a      	mov	r2, r3
 8008d0a:	f001 fb07 	bl	800a31c <__pow5mult>
 8008d0e:	4605      	mov	r5, r0
 8008d10:	2800      	cmp	r0, #0
 8008d12:	d0b5      	beq.n	8008c80 <_strtod_l+0x680>
 8008d14:	4601      	mov	r1, r0
 8008d16:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008d18:	9805      	ldr	r0, [sp, #20]
 8008d1a:	f001 fa5d 	bl	800a1d8 <__multiply>
 8008d1e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008d20:	2800      	cmp	r0, #0
 8008d22:	f43f ae87 	beq.w	8008a34 <_strtod_l+0x434>
 8008d26:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008d28:	9805      	ldr	r0, [sp, #20]
 8008d2a:	f001 f941 	bl	8009fb0 <_Bfree>
 8008d2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d30:	9312      	str	r3, [sp, #72]	@ 0x48
 8008d32:	2f00      	cmp	r7, #0
 8008d34:	dc1b      	bgt.n	8008d6e <_strtod_l+0x76e>
 8008d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	dd21      	ble.n	8008d80 <_strtod_l+0x780>
 8008d3c:	4631      	mov	r1, r6
 8008d3e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008d40:	9805      	ldr	r0, [sp, #20]
 8008d42:	f001 faeb 	bl	800a31c <__pow5mult>
 8008d46:	4606      	mov	r6, r0
 8008d48:	b9d0      	cbnz	r0, 8008d80 <_strtod_l+0x780>
 8008d4a:	2600      	movs	r6, #0
 8008d4c:	e672      	b.n	8008a34 <_strtod_l+0x434>
 8008d4e:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8008d52:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8008d56:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8008d5a:	37e2      	adds	r7, #226	@ 0xe2
 8008d5c:	fa02 f107 	lsl.w	r1, r2, r7
 8008d60:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008d62:	920c      	str	r2, [sp, #48]	@ 0x30
 8008d64:	e7b8      	b.n	8008cd8 <_strtod_l+0x6d8>
 8008d66:	2200      	movs	r2, #0
 8008d68:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	e7f9      	b.n	8008d62 <_strtod_l+0x762>
 8008d6e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008d70:	9805      	ldr	r0, [sp, #20]
 8008d72:	463a      	mov	r2, r7
 8008d74:	f001 fb2c 	bl	800a3d0 <__lshift>
 8008d78:	9012      	str	r0, [sp, #72]	@ 0x48
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	d1db      	bne.n	8008d36 <_strtod_l+0x736>
 8008d7e:	e659      	b.n	8008a34 <_strtod_l+0x434>
 8008d80:	f1b8 0f00 	cmp.w	r8, #0
 8008d84:	dd07      	ble.n	8008d96 <_strtod_l+0x796>
 8008d86:	4631      	mov	r1, r6
 8008d88:	9805      	ldr	r0, [sp, #20]
 8008d8a:	4642      	mov	r2, r8
 8008d8c:	f001 fb20 	bl	800a3d0 <__lshift>
 8008d90:	4606      	mov	r6, r0
 8008d92:	2800      	cmp	r0, #0
 8008d94:	d0d9      	beq.n	8008d4a <_strtod_l+0x74a>
 8008d96:	f1b9 0f00 	cmp.w	r9, #0
 8008d9a:	dd08      	ble.n	8008dae <_strtod_l+0x7ae>
 8008d9c:	4629      	mov	r1, r5
 8008d9e:	9805      	ldr	r0, [sp, #20]
 8008da0:	464a      	mov	r2, r9
 8008da2:	f001 fb15 	bl	800a3d0 <__lshift>
 8008da6:	4605      	mov	r5, r0
 8008da8:	2800      	cmp	r0, #0
 8008daa:	f43f ae43 	beq.w	8008a34 <_strtod_l+0x434>
 8008dae:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008db0:	9805      	ldr	r0, [sp, #20]
 8008db2:	4632      	mov	r2, r6
 8008db4:	f001 fb94 	bl	800a4e0 <__mdiff>
 8008db8:	4604      	mov	r4, r0
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	f43f ae3a 	beq.w	8008a34 <_strtod_l+0x434>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8008dc6:	60c3      	str	r3, [r0, #12]
 8008dc8:	4629      	mov	r1, r5
 8008dca:	f001 fb6d 	bl	800a4a8 <__mcmp>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	da4c      	bge.n	8008e6c <_strtod_l+0x86c>
 8008dd2:	ea58 080a 	orrs.w	r8, r8, sl
 8008dd6:	d172      	bne.n	8008ebe <_strtod_l+0x8be>
 8008dd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d16e      	bne.n	8008ebe <_strtod_l+0x8be>
 8008de0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008de4:	0d1b      	lsrs	r3, r3, #20
 8008de6:	051b      	lsls	r3, r3, #20
 8008de8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008dec:	d967      	bls.n	8008ebe <_strtod_l+0x8be>
 8008dee:	6963      	ldr	r3, [r4, #20]
 8008df0:	b913      	cbnz	r3, 8008df8 <_strtod_l+0x7f8>
 8008df2:	6923      	ldr	r3, [r4, #16]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	dd62      	ble.n	8008ebe <_strtod_l+0x8be>
 8008df8:	4621      	mov	r1, r4
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	9805      	ldr	r0, [sp, #20]
 8008dfe:	f001 fae7 	bl	800a3d0 <__lshift>
 8008e02:	4629      	mov	r1, r5
 8008e04:	4604      	mov	r4, r0
 8008e06:	f001 fb4f 	bl	800a4a8 <__mcmp>
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	dd57      	ble.n	8008ebe <_strtod_l+0x8be>
 8008e0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008e12:	9a06      	ldr	r2, [sp, #24]
 8008e14:	0d1b      	lsrs	r3, r3, #20
 8008e16:	051b      	lsls	r3, r3, #20
 8008e18:	2a00      	cmp	r2, #0
 8008e1a:	d06e      	beq.n	8008efa <_strtod_l+0x8fa>
 8008e1c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008e20:	d86b      	bhi.n	8008efa <_strtod_l+0x8fa>
 8008e22:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008e26:	f67f ae99 	bls.w	8008b5c <_strtod_l+0x55c>
 8008e2a:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8008e58 <_strtod_l+0x858>
 8008e2e:	ec4b ab16 	vmov	d6, sl, fp
 8008e32:	4b0d      	ldr	r3, [pc, #52]	@ (8008e68 <_strtod_l+0x868>)
 8008e34:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008e38:	ee17 2a90 	vmov	r2, s15
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	ec5b ab17 	vmov	sl, fp, d7
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f47f ae01 	bne.w	8008a4a <_strtod_l+0x44a>
 8008e48:	9a05      	ldr	r2, [sp, #20]
 8008e4a:	2322      	movs	r3, #34	@ 0x22
 8008e4c:	6013      	str	r3, [r2, #0]
 8008e4e:	e5fc      	b.n	8008a4a <_strtod_l+0x44a>
 8008e50:	ffc00000 	.word	0xffc00000
 8008e54:	41dfffff 	.word	0x41dfffff
 8008e58:	00000000 	.word	0x00000000
 8008e5c:	39500000 	.word	0x39500000
 8008e60:	0800b410 	.word	0x0800b410
 8008e64:	fffffc02 	.word	0xfffffc02
 8008e68:	7ff00000 	.word	0x7ff00000
 8008e6c:	46d9      	mov	r9, fp
 8008e6e:	d15d      	bne.n	8008f2c <_strtod_l+0x92c>
 8008e70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e74:	f1b8 0f00 	cmp.w	r8, #0
 8008e78:	d02a      	beq.n	8008ed0 <_strtod_l+0x8d0>
 8008e7a:	4aa9      	ldr	r2, [pc, #676]	@ (8009120 <_strtod_l+0xb20>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d12a      	bne.n	8008ed6 <_strtod_l+0x8d6>
 8008e80:	9b06      	ldr	r3, [sp, #24]
 8008e82:	4652      	mov	r2, sl
 8008e84:	b1fb      	cbz	r3, 8008ec6 <_strtod_l+0x8c6>
 8008e86:	4ba7      	ldr	r3, [pc, #668]	@ (8009124 <_strtod_l+0xb24>)
 8008e88:	ea0b 0303 	and.w	r3, fp, r3
 8008e8c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008e90:	f04f 31ff 	mov.w	r1, #4294967295
 8008e94:	d81a      	bhi.n	8008ecc <_strtod_l+0x8cc>
 8008e96:	0d1b      	lsrs	r3, r3, #20
 8008e98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d118      	bne.n	8008ed6 <_strtod_l+0x8d6>
 8008ea4:	4ba0      	ldr	r3, [pc, #640]	@ (8009128 <_strtod_l+0xb28>)
 8008ea6:	4599      	cmp	r9, r3
 8008ea8:	d102      	bne.n	8008eb0 <_strtod_l+0x8b0>
 8008eaa:	3201      	adds	r2, #1
 8008eac:	f43f adc2 	beq.w	8008a34 <_strtod_l+0x434>
 8008eb0:	4b9c      	ldr	r3, [pc, #624]	@ (8009124 <_strtod_l+0xb24>)
 8008eb2:	ea09 0303 	and.w	r3, r9, r3
 8008eb6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8008eba:	f04f 0a00 	mov.w	sl, #0
 8008ebe:	9b06      	ldr	r3, [sp, #24]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1b2      	bne.n	8008e2a <_strtod_l+0x82a>
 8008ec4:	e5c1      	b.n	8008a4a <_strtod_l+0x44a>
 8008ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8008eca:	e7e9      	b.n	8008ea0 <_strtod_l+0x8a0>
 8008ecc:	460b      	mov	r3, r1
 8008ece:	e7e7      	b.n	8008ea0 <_strtod_l+0x8a0>
 8008ed0:	ea53 030a 	orrs.w	r3, r3, sl
 8008ed4:	d09b      	beq.n	8008e0e <_strtod_l+0x80e>
 8008ed6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ed8:	b1c3      	cbz	r3, 8008f0c <_strtod_l+0x90c>
 8008eda:	ea13 0f09 	tst.w	r3, r9
 8008ede:	d0ee      	beq.n	8008ebe <_strtod_l+0x8be>
 8008ee0:	9a06      	ldr	r2, [sp, #24]
 8008ee2:	4650      	mov	r0, sl
 8008ee4:	4659      	mov	r1, fp
 8008ee6:	f1b8 0f00 	cmp.w	r8, #0
 8008eea:	d013      	beq.n	8008f14 <_strtod_l+0x914>
 8008eec:	f7ff fb6e 	bl	80085cc <sulp>
 8008ef0:	ee39 7b00 	vadd.f64	d7, d9, d0
 8008ef4:	ec5b ab17 	vmov	sl, fp, d7
 8008ef8:	e7e1      	b.n	8008ebe <_strtod_l+0x8be>
 8008efa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008efe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008f02:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008f06:	f04f 3aff 	mov.w	sl, #4294967295
 8008f0a:	e7d8      	b.n	8008ebe <_strtod_l+0x8be>
 8008f0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f0e:	ea13 0f0a 	tst.w	r3, sl
 8008f12:	e7e4      	b.n	8008ede <_strtod_l+0x8de>
 8008f14:	f7ff fb5a 	bl	80085cc <sulp>
 8008f18:	ee39 0b40 	vsub.f64	d0, d9, d0
 8008f1c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8008f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f24:	ec5b ab10 	vmov	sl, fp, d0
 8008f28:	d1c9      	bne.n	8008ebe <_strtod_l+0x8be>
 8008f2a:	e617      	b.n	8008b5c <_strtod_l+0x55c>
 8008f2c:	4629      	mov	r1, r5
 8008f2e:	4620      	mov	r0, r4
 8008f30:	f001 fc32 	bl	800a798 <__ratio>
 8008f34:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8008f38:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f40:	d85d      	bhi.n	8008ffe <_strtod_l+0x9fe>
 8008f42:	f1b8 0f00 	cmp.w	r8, #0
 8008f46:	d164      	bne.n	8009012 <_strtod_l+0xa12>
 8008f48:	f1ba 0f00 	cmp.w	sl, #0
 8008f4c:	d14b      	bne.n	8008fe6 <_strtod_l+0x9e6>
 8008f4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f52:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d160      	bne.n	800901c <_strtod_l+0xa1c>
 8008f5a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8008f5e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8008f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f66:	d401      	bmi.n	8008f6c <_strtod_l+0x96c>
 8008f68:	ee20 8b08 	vmul.f64	d8, d0, d8
 8008f6c:	eeb1 ab48 	vneg.f64	d10, d8
 8008f70:	486c      	ldr	r0, [pc, #432]	@ (8009124 <_strtod_l+0xb24>)
 8008f72:	496e      	ldr	r1, [pc, #440]	@ (800912c <_strtod_l+0xb2c>)
 8008f74:	ea09 0700 	and.w	r7, r9, r0
 8008f78:	428f      	cmp	r7, r1
 8008f7a:	ec53 2b1a 	vmov	r2, r3, d10
 8008f7e:	d17d      	bne.n	800907c <_strtod_l+0xa7c>
 8008f80:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8008f84:	ec4b ab1c 	vmov	d12, sl, fp
 8008f88:	eeb0 0b4c 	vmov.f64	d0, d12
 8008f8c:	f001 fb3c 	bl	800a608 <__ulp>
 8008f90:	4864      	ldr	r0, [pc, #400]	@ (8009124 <_strtod_l+0xb24>)
 8008f92:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8008f96:	ee1c 3a90 	vmov	r3, s25
 8008f9a:	4a65      	ldr	r2, [pc, #404]	@ (8009130 <_strtod_l+0xb30>)
 8008f9c:	ea03 0100 	and.w	r1, r3, r0
 8008fa0:	4291      	cmp	r1, r2
 8008fa2:	ec5b ab1c 	vmov	sl, fp, d12
 8008fa6:	d93c      	bls.n	8009022 <_strtod_l+0xa22>
 8008fa8:	ee19 2a90 	vmov	r2, s19
 8008fac:	4b5e      	ldr	r3, [pc, #376]	@ (8009128 <_strtod_l+0xb28>)
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d104      	bne.n	8008fbc <_strtod_l+0x9bc>
 8008fb2:	ee19 3a10 	vmov	r3, s18
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	f43f ad3c 	beq.w	8008a34 <_strtod_l+0x434>
 8008fbc:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8009128 <_strtod_l+0xb28>
 8008fc0:	f04f 3aff 	mov.w	sl, #4294967295
 8008fc4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008fc6:	9805      	ldr	r0, [sp, #20]
 8008fc8:	f000 fff2 	bl	8009fb0 <_Bfree>
 8008fcc:	9805      	ldr	r0, [sp, #20]
 8008fce:	4631      	mov	r1, r6
 8008fd0:	f000 ffee 	bl	8009fb0 <_Bfree>
 8008fd4:	9805      	ldr	r0, [sp, #20]
 8008fd6:	4629      	mov	r1, r5
 8008fd8:	f000 ffea 	bl	8009fb0 <_Bfree>
 8008fdc:	9805      	ldr	r0, [sp, #20]
 8008fde:	4621      	mov	r1, r4
 8008fe0:	f000 ffe6 	bl	8009fb0 <_Bfree>
 8008fe4:	e627      	b.n	8008c36 <_strtod_l+0x636>
 8008fe6:	f1ba 0f01 	cmp.w	sl, #1
 8008fea:	d103      	bne.n	8008ff4 <_strtod_l+0x9f4>
 8008fec:	f1bb 0f00 	cmp.w	fp, #0
 8008ff0:	f43f adb4 	beq.w	8008b5c <_strtod_l+0x55c>
 8008ff4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8008ff8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8008ffc:	e7b8      	b.n	8008f70 <_strtod_l+0x970>
 8008ffe:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8009002:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009006:	f1b8 0f00 	cmp.w	r8, #0
 800900a:	d0af      	beq.n	8008f6c <_strtod_l+0x96c>
 800900c:	eeb0 ab48 	vmov.f64	d10, d8
 8009010:	e7ae      	b.n	8008f70 <_strtod_l+0x970>
 8009012:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8009016:	eeb0 8b4a 	vmov.f64	d8, d10
 800901a:	e7a9      	b.n	8008f70 <_strtod_l+0x970>
 800901c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8009020:	e7a6      	b.n	8008f70 <_strtod_l+0x970>
 8009022:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009026:	9b06      	ldr	r3, [sp, #24]
 8009028:	46d9      	mov	r9, fp
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1ca      	bne.n	8008fc4 <_strtod_l+0x9c4>
 800902e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009032:	0d1b      	lsrs	r3, r3, #20
 8009034:	051b      	lsls	r3, r3, #20
 8009036:	429f      	cmp	r7, r3
 8009038:	d1c4      	bne.n	8008fc4 <_strtod_l+0x9c4>
 800903a:	ec51 0b18 	vmov	r0, r1, d8
 800903e:	f7f7 fb23 	bl	8000688 <__aeabi_d2lz>
 8009042:	f7f7 fadb 	bl	80005fc <__aeabi_l2d>
 8009046:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800904a:	ec41 0b17 	vmov	d7, r0, r1
 800904e:	ea49 090a 	orr.w	r9, r9, sl
 8009052:	ea59 0908 	orrs.w	r9, r9, r8
 8009056:	ee38 8b47 	vsub.f64	d8, d8, d7
 800905a:	d03c      	beq.n	80090d6 <_strtod_l+0xad6>
 800905c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8009108 <_strtod_l+0xb08>
 8009060:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009068:	f53f acef 	bmi.w	8008a4a <_strtod_l+0x44a>
 800906c:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8009110 <_strtod_l+0xb10>
 8009070:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009078:	dda4      	ble.n	8008fc4 <_strtod_l+0x9c4>
 800907a:	e4e6      	b.n	8008a4a <_strtod_l+0x44a>
 800907c:	9906      	ldr	r1, [sp, #24]
 800907e:	b1e1      	cbz	r1, 80090ba <_strtod_l+0xaba>
 8009080:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8009084:	d819      	bhi.n	80090ba <_strtod_l+0xaba>
 8009086:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800908a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800908e:	d811      	bhi.n	80090b4 <_strtod_l+0xab4>
 8009090:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8009094:	ee18 3a10 	vmov	r3, s16
 8009098:	2b01      	cmp	r3, #1
 800909a:	bf38      	it	cc
 800909c:	2301      	movcc	r3, #1
 800909e:	ee08 3a10 	vmov	s16, r3
 80090a2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80090a6:	f1b8 0f00 	cmp.w	r8, #0
 80090aa:	d111      	bne.n	80090d0 <_strtod_l+0xad0>
 80090ac:	eeb1 7b48 	vneg.f64	d7, d8
 80090b0:	ec53 2b17 	vmov	r2, r3, d7
 80090b4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80090b8:	1bcb      	subs	r3, r1, r7
 80090ba:	eeb0 0b49 	vmov.f64	d0, d9
 80090be:	ec43 2b1a 	vmov	d10, r2, r3
 80090c2:	f001 faa1 	bl	800a608 <__ulp>
 80090c6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80090ca:	ec5b ab19 	vmov	sl, fp, d9
 80090ce:	e7aa      	b.n	8009026 <_strtod_l+0xa26>
 80090d0:	eeb0 7b48 	vmov.f64	d7, d8
 80090d4:	e7ec      	b.n	80090b0 <_strtod_l+0xab0>
 80090d6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8009118 <_strtod_l+0xb18>
 80090da:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80090de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090e2:	f57f af6f 	bpl.w	8008fc4 <_strtod_l+0x9c4>
 80090e6:	e4b0      	b.n	8008a4a <_strtod_l+0x44a>
 80090e8:	2300      	movs	r3, #0
 80090ea:	9308      	str	r3, [sp, #32]
 80090ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80090f0:	6013      	str	r3, [r2, #0]
 80090f2:	f7ff bac4 	b.w	800867e <_strtod_l+0x7e>
 80090f6:	2a65      	cmp	r2, #101	@ 0x65
 80090f8:	f43f abbf 	beq.w	800887a <_strtod_l+0x27a>
 80090fc:	2a45      	cmp	r2, #69	@ 0x45
 80090fe:	f43f abbc 	beq.w	800887a <_strtod_l+0x27a>
 8009102:	2101      	movs	r1, #1
 8009104:	f7ff bbf4 	b.w	80088f0 <_strtod_l+0x2f0>
 8009108:	94a03595 	.word	0x94a03595
 800910c:	3fdfffff 	.word	0x3fdfffff
 8009110:	35afe535 	.word	0x35afe535
 8009114:	3fe00000 	.word	0x3fe00000
 8009118:	94a03595 	.word	0x94a03595
 800911c:	3fcfffff 	.word	0x3fcfffff
 8009120:	000fffff 	.word	0x000fffff
 8009124:	7ff00000 	.word	0x7ff00000
 8009128:	7fefffff 	.word	0x7fefffff
 800912c:	7fe00000 	.word	0x7fe00000
 8009130:	7c9fffff 	.word	0x7c9fffff

08009134 <strtod>:
 8009134:	460a      	mov	r2, r1
 8009136:	4601      	mov	r1, r0
 8009138:	4802      	ldr	r0, [pc, #8]	@ (8009144 <strtod+0x10>)
 800913a:	4b03      	ldr	r3, [pc, #12]	@ (8009148 <strtod+0x14>)
 800913c:	6800      	ldr	r0, [r0, #0]
 800913e:	f7ff ba5f 	b.w	8008600 <_strtod_l>
 8009142:	bf00      	nop
 8009144:	200001a4 	.word	0x200001a4
 8009148:	20000038 	.word	0x20000038

0800914c <std>:
 800914c:	2300      	movs	r3, #0
 800914e:	b510      	push	{r4, lr}
 8009150:	4604      	mov	r4, r0
 8009152:	e9c0 3300 	strd	r3, r3, [r0]
 8009156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800915a:	6083      	str	r3, [r0, #8]
 800915c:	8181      	strh	r1, [r0, #12]
 800915e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009160:	81c2      	strh	r2, [r0, #14]
 8009162:	6183      	str	r3, [r0, #24]
 8009164:	4619      	mov	r1, r3
 8009166:	2208      	movs	r2, #8
 8009168:	305c      	adds	r0, #92	@ 0x5c
 800916a:	f000 f9f9 	bl	8009560 <memset>
 800916e:	4b0d      	ldr	r3, [pc, #52]	@ (80091a4 <std+0x58>)
 8009170:	6263      	str	r3, [r4, #36]	@ 0x24
 8009172:	4b0d      	ldr	r3, [pc, #52]	@ (80091a8 <std+0x5c>)
 8009174:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009176:	4b0d      	ldr	r3, [pc, #52]	@ (80091ac <std+0x60>)
 8009178:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800917a:	4b0d      	ldr	r3, [pc, #52]	@ (80091b0 <std+0x64>)
 800917c:	6323      	str	r3, [r4, #48]	@ 0x30
 800917e:	4b0d      	ldr	r3, [pc, #52]	@ (80091b4 <std+0x68>)
 8009180:	6224      	str	r4, [r4, #32]
 8009182:	429c      	cmp	r4, r3
 8009184:	d006      	beq.n	8009194 <std+0x48>
 8009186:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800918a:	4294      	cmp	r4, r2
 800918c:	d002      	beq.n	8009194 <std+0x48>
 800918e:	33d0      	adds	r3, #208	@ 0xd0
 8009190:	429c      	cmp	r4, r3
 8009192:	d105      	bne.n	80091a0 <std+0x54>
 8009194:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800919c:	f000 ba6a 	b.w	8009674 <__retarget_lock_init_recursive>
 80091a0:	bd10      	pop	{r4, pc}
 80091a2:	bf00      	nop
 80091a4:	080093b1 	.word	0x080093b1
 80091a8:	080093d3 	.word	0x080093d3
 80091ac:	0800940b 	.word	0x0800940b
 80091b0:	0800942f 	.word	0x0800942f
 80091b4:	20000964 	.word	0x20000964

080091b8 <stdio_exit_handler>:
 80091b8:	4a02      	ldr	r2, [pc, #8]	@ (80091c4 <stdio_exit_handler+0xc>)
 80091ba:	4903      	ldr	r1, [pc, #12]	@ (80091c8 <stdio_exit_handler+0x10>)
 80091bc:	4803      	ldr	r0, [pc, #12]	@ (80091cc <stdio_exit_handler+0x14>)
 80091be:	f000 b869 	b.w	8009294 <_fwalk_sglue>
 80091c2:	bf00      	nop
 80091c4:	2000002c 	.word	0x2000002c
 80091c8:	0800af3d 	.word	0x0800af3d
 80091cc:	200001a8 	.word	0x200001a8

080091d0 <cleanup_stdio>:
 80091d0:	6841      	ldr	r1, [r0, #4]
 80091d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009204 <cleanup_stdio+0x34>)
 80091d4:	4299      	cmp	r1, r3
 80091d6:	b510      	push	{r4, lr}
 80091d8:	4604      	mov	r4, r0
 80091da:	d001      	beq.n	80091e0 <cleanup_stdio+0x10>
 80091dc:	f001 feae 	bl	800af3c <_fflush_r>
 80091e0:	68a1      	ldr	r1, [r4, #8]
 80091e2:	4b09      	ldr	r3, [pc, #36]	@ (8009208 <cleanup_stdio+0x38>)
 80091e4:	4299      	cmp	r1, r3
 80091e6:	d002      	beq.n	80091ee <cleanup_stdio+0x1e>
 80091e8:	4620      	mov	r0, r4
 80091ea:	f001 fea7 	bl	800af3c <_fflush_r>
 80091ee:	68e1      	ldr	r1, [r4, #12]
 80091f0:	4b06      	ldr	r3, [pc, #24]	@ (800920c <cleanup_stdio+0x3c>)
 80091f2:	4299      	cmp	r1, r3
 80091f4:	d004      	beq.n	8009200 <cleanup_stdio+0x30>
 80091f6:	4620      	mov	r0, r4
 80091f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091fc:	f001 be9e 	b.w	800af3c <_fflush_r>
 8009200:	bd10      	pop	{r4, pc}
 8009202:	bf00      	nop
 8009204:	20000964 	.word	0x20000964
 8009208:	200009cc 	.word	0x200009cc
 800920c:	20000a34 	.word	0x20000a34

08009210 <global_stdio_init.part.0>:
 8009210:	b510      	push	{r4, lr}
 8009212:	4b0b      	ldr	r3, [pc, #44]	@ (8009240 <global_stdio_init.part.0+0x30>)
 8009214:	4c0b      	ldr	r4, [pc, #44]	@ (8009244 <global_stdio_init.part.0+0x34>)
 8009216:	4a0c      	ldr	r2, [pc, #48]	@ (8009248 <global_stdio_init.part.0+0x38>)
 8009218:	601a      	str	r2, [r3, #0]
 800921a:	4620      	mov	r0, r4
 800921c:	2200      	movs	r2, #0
 800921e:	2104      	movs	r1, #4
 8009220:	f7ff ff94 	bl	800914c <std>
 8009224:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009228:	2201      	movs	r2, #1
 800922a:	2109      	movs	r1, #9
 800922c:	f7ff ff8e 	bl	800914c <std>
 8009230:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009234:	2202      	movs	r2, #2
 8009236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800923a:	2112      	movs	r1, #18
 800923c:	f7ff bf86 	b.w	800914c <std>
 8009240:	20000a9c 	.word	0x20000a9c
 8009244:	20000964 	.word	0x20000964
 8009248:	080091b9 	.word	0x080091b9

0800924c <__sfp_lock_acquire>:
 800924c:	4801      	ldr	r0, [pc, #4]	@ (8009254 <__sfp_lock_acquire+0x8>)
 800924e:	f000 ba12 	b.w	8009676 <__retarget_lock_acquire_recursive>
 8009252:	bf00      	nop
 8009254:	20000aa5 	.word	0x20000aa5

08009258 <__sfp_lock_release>:
 8009258:	4801      	ldr	r0, [pc, #4]	@ (8009260 <__sfp_lock_release+0x8>)
 800925a:	f000 ba0d 	b.w	8009678 <__retarget_lock_release_recursive>
 800925e:	bf00      	nop
 8009260:	20000aa5 	.word	0x20000aa5

08009264 <__sinit>:
 8009264:	b510      	push	{r4, lr}
 8009266:	4604      	mov	r4, r0
 8009268:	f7ff fff0 	bl	800924c <__sfp_lock_acquire>
 800926c:	6a23      	ldr	r3, [r4, #32]
 800926e:	b11b      	cbz	r3, 8009278 <__sinit+0x14>
 8009270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009274:	f7ff bff0 	b.w	8009258 <__sfp_lock_release>
 8009278:	4b04      	ldr	r3, [pc, #16]	@ (800928c <__sinit+0x28>)
 800927a:	6223      	str	r3, [r4, #32]
 800927c:	4b04      	ldr	r3, [pc, #16]	@ (8009290 <__sinit+0x2c>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1f5      	bne.n	8009270 <__sinit+0xc>
 8009284:	f7ff ffc4 	bl	8009210 <global_stdio_init.part.0>
 8009288:	e7f2      	b.n	8009270 <__sinit+0xc>
 800928a:	bf00      	nop
 800928c:	080091d1 	.word	0x080091d1
 8009290:	20000a9c 	.word	0x20000a9c

08009294 <_fwalk_sglue>:
 8009294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009298:	4607      	mov	r7, r0
 800929a:	4688      	mov	r8, r1
 800929c:	4614      	mov	r4, r2
 800929e:	2600      	movs	r6, #0
 80092a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092a4:	f1b9 0901 	subs.w	r9, r9, #1
 80092a8:	d505      	bpl.n	80092b6 <_fwalk_sglue+0x22>
 80092aa:	6824      	ldr	r4, [r4, #0]
 80092ac:	2c00      	cmp	r4, #0
 80092ae:	d1f7      	bne.n	80092a0 <_fwalk_sglue+0xc>
 80092b0:	4630      	mov	r0, r6
 80092b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092b6:	89ab      	ldrh	r3, [r5, #12]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d907      	bls.n	80092cc <_fwalk_sglue+0x38>
 80092bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092c0:	3301      	adds	r3, #1
 80092c2:	d003      	beq.n	80092cc <_fwalk_sglue+0x38>
 80092c4:	4629      	mov	r1, r5
 80092c6:	4638      	mov	r0, r7
 80092c8:	47c0      	blx	r8
 80092ca:	4306      	orrs	r6, r0
 80092cc:	3568      	adds	r5, #104	@ 0x68
 80092ce:	e7e9      	b.n	80092a4 <_fwalk_sglue+0x10>

080092d0 <iprintf>:
 80092d0:	b40f      	push	{r0, r1, r2, r3}
 80092d2:	b507      	push	{r0, r1, r2, lr}
 80092d4:	4906      	ldr	r1, [pc, #24]	@ (80092f0 <iprintf+0x20>)
 80092d6:	ab04      	add	r3, sp, #16
 80092d8:	6808      	ldr	r0, [r1, #0]
 80092da:	f853 2b04 	ldr.w	r2, [r3], #4
 80092de:	6881      	ldr	r1, [r0, #8]
 80092e0:	9301      	str	r3, [sp, #4]
 80092e2:	f001 fb03 	bl	800a8ec <_vfiprintf_r>
 80092e6:	b003      	add	sp, #12
 80092e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80092ec:	b004      	add	sp, #16
 80092ee:	4770      	bx	lr
 80092f0:	200001a4 	.word	0x200001a4

080092f4 <_puts_r>:
 80092f4:	6a03      	ldr	r3, [r0, #32]
 80092f6:	b570      	push	{r4, r5, r6, lr}
 80092f8:	6884      	ldr	r4, [r0, #8]
 80092fa:	4605      	mov	r5, r0
 80092fc:	460e      	mov	r6, r1
 80092fe:	b90b      	cbnz	r3, 8009304 <_puts_r+0x10>
 8009300:	f7ff ffb0 	bl	8009264 <__sinit>
 8009304:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009306:	07db      	lsls	r3, r3, #31
 8009308:	d405      	bmi.n	8009316 <_puts_r+0x22>
 800930a:	89a3      	ldrh	r3, [r4, #12]
 800930c:	0598      	lsls	r0, r3, #22
 800930e:	d402      	bmi.n	8009316 <_puts_r+0x22>
 8009310:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009312:	f000 f9b0 	bl	8009676 <__retarget_lock_acquire_recursive>
 8009316:	89a3      	ldrh	r3, [r4, #12]
 8009318:	0719      	lsls	r1, r3, #28
 800931a:	d502      	bpl.n	8009322 <_puts_r+0x2e>
 800931c:	6923      	ldr	r3, [r4, #16]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d135      	bne.n	800938e <_puts_r+0x9a>
 8009322:	4621      	mov	r1, r4
 8009324:	4628      	mov	r0, r5
 8009326:	f000 f8c5 	bl	80094b4 <__swsetup_r>
 800932a:	b380      	cbz	r0, 800938e <_puts_r+0x9a>
 800932c:	f04f 35ff 	mov.w	r5, #4294967295
 8009330:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009332:	07da      	lsls	r2, r3, #31
 8009334:	d405      	bmi.n	8009342 <_puts_r+0x4e>
 8009336:	89a3      	ldrh	r3, [r4, #12]
 8009338:	059b      	lsls	r3, r3, #22
 800933a:	d402      	bmi.n	8009342 <_puts_r+0x4e>
 800933c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800933e:	f000 f99b 	bl	8009678 <__retarget_lock_release_recursive>
 8009342:	4628      	mov	r0, r5
 8009344:	bd70      	pop	{r4, r5, r6, pc}
 8009346:	2b00      	cmp	r3, #0
 8009348:	da04      	bge.n	8009354 <_puts_r+0x60>
 800934a:	69a2      	ldr	r2, [r4, #24]
 800934c:	429a      	cmp	r2, r3
 800934e:	dc17      	bgt.n	8009380 <_puts_r+0x8c>
 8009350:	290a      	cmp	r1, #10
 8009352:	d015      	beq.n	8009380 <_puts_r+0x8c>
 8009354:	6823      	ldr	r3, [r4, #0]
 8009356:	1c5a      	adds	r2, r3, #1
 8009358:	6022      	str	r2, [r4, #0]
 800935a:	7019      	strb	r1, [r3, #0]
 800935c:	68a3      	ldr	r3, [r4, #8]
 800935e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009362:	3b01      	subs	r3, #1
 8009364:	60a3      	str	r3, [r4, #8]
 8009366:	2900      	cmp	r1, #0
 8009368:	d1ed      	bne.n	8009346 <_puts_r+0x52>
 800936a:	2b00      	cmp	r3, #0
 800936c:	da11      	bge.n	8009392 <_puts_r+0x9e>
 800936e:	4622      	mov	r2, r4
 8009370:	210a      	movs	r1, #10
 8009372:	4628      	mov	r0, r5
 8009374:	f000 f85f 	bl	8009436 <__swbuf_r>
 8009378:	3001      	adds	r0, #1
 800937a:	d0d7      	beq.n	800932c <_puts_r+0x38>
 800937c:	250a      	movs	r5, #10
 800937e:	e7d7      	b.n	8009330 <_puts_r+0x3c>
 8009380:	4622      	mov	r2, r4
 8009382:	4628      	mov	r0, r5
 8009384:	f000 f857 	bl	8009436 <__swbuf_r>
 8009388:	3001      	adds	r0, #1
 800938a:	d1e7      	bne.n	800935c <_puts_r+0x68>
 800938c:	e7ce      	b.n	800932c <_puts_r+0x38>
 800938e:	3e01      	subs	r6, #1
 8009390:	e7e4      	b.n	800935c <_puts_r+0x68>
 8009392:	6823      	ldr	r3, [r4, #0]
 8009394:	1c5a      	adds	r2, r3, #1
 8009396:	6022      	str	r2, [r4, #0]
 8009398:	220a      	movs	r2, #10
 800939a:	701a      	strb	r2, [r3, #0]
 800939c:	e7ee      	b.n	800937c <_puts_r+0x88>
	...

080093a0 <puts>:
 80093a0:	4b02      	ldr	r3, [pc, #8]	@ (80093ac <puts+0xc>)
 80093a2:	4601      	mov	r1, r0
 80093a4:	6818      	ldr	r0, [r3, #0]
 80093a6:	f7ff bfa5 	b.w	80092f4 <_puts_r>
 80093aa:	bf00      	nop
 80093ac:	200001a4 	.word	0x200001a4

080093b0 <__sread>:
 80093b0:	b510      	push	{r4, lr}
 80093b2:	460c      	mov	r4, r1
 80093b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093b8:	f000 f90e 	bl	80095d8 <_read_r>
 80093bc:	2800      	cmp	r0, #0
 80093be:	bfab      	itete	ge
 80093c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80093c2:	89a3      	ldrhlt	r3, [r4, #12]
 80093c4:	181b      	addge	r3, r3, r0
 80093c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80093ca:	bfac      	ite	ge
 80093cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80093ce:	81a3      	strhlt	r3, [r4, #12]
 80093d0:	bd10      	pop	{r4, pc}

080093d2 <__swrite>:
 80093d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093d6:	461f      	mov	r7, r3
 80093d8:	898b      	ldrh	r3, [r1, #12]
 80093da:	05db      	lsls	r3, r3, #23
 80093dc:	4605      	mov	r5, r0
 80093de:	460c      	mov	r4, r1
 80093e0:	4616      	mov	r6, r2
 80093e2:	d505      	bpl.n	80093f0 <__swrite+0x1e>
 80093e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e8:	2302      	movs	r3, #2
 80093ea:	2200      	movs	r2, #0
 80093ec:	f000 f8e2 	bl	80095b4 <_lseek_r>
 80093f0:	89a3      	ldrh	r3, [r4, #12]
 80093f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093fa:	81a3      	strh	r3, [r4, #12]
 80093fc:	4632      	mov	r2, r6
 80093fe:	463b      	mov	r3, r7
 8009400:	4628      	mov	r0, r5
 8009402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009406:	f000 b8f9 	b.w	80095fc <_write_r>

0800940a <__sseek>:
 800940a:	b510      	push	{r4, lr}
 800940c:	460c      	mov	r4, r1
 800940e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009412:	f000 f8cf 	bl	80095b4 <_lseek_r>
 8009416:	1c43      	adds	r3, r0, #1
 8009418:	89a3      	ldrh	r3, [r4, #12]
 800941a:	bf15      	itete	ne
 800941c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800941e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009422:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009426:	81a3      	strheq	r3, [r4, #12]
 8009428:	bf18      	it	ne
 800942a:	81a3      	strhne	r3, [r4, #12]
 800942c:	bd10      	pop	{r4, pc}

0800942e <__sclose>:
 800942e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009432:	f000 b8af 	b.w	8009594 <_close_r>

08009436 <__swbuf_r>:
 8009436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009438:	460e      	mov	r6, r1
 800943a:	4614      	mov	r4, r2
 800943c:	4605      	mov	r5, r0
 800943e:	b118      	cbz	r0, 8009448 <__swbuf_r+0x12>
 8009440:	6a03      	ldr	r3, [r0, #32]
 8009442:	b90b      	cbnz	r3, 8009448 <__swbuf_r+0x12>
 8009444:	f7ff ff0e 	bl	8009264 <__sinit>
 8009448:	69a3      	ldr	r3, [r4, #24]
 800944a:	60a3      	str	r3, [r4, #8]
 800944c:	89a3      	ldrh	r3, [r4, #12]
 800944e:	071a      	lsls	r2, r3, #28
 8009450:	d501      	bpl.n	8009456 <__swbuf_r+0x20>
 8009452:	6923      	ldr	r3, [r4, #16]
 8009454:	b943      	cbnz	r3, 8009468 <__swbuf_r+0x32>
 8009456:	4621      	mov	r1, r4
 8009458:	4628      	mov	r0, r5
 800945a:	f000 f82b 	bl	80094b4 <__swsetup_r>
 800945e:	b118      	cbz	r0, 8009468 <__swbuf_r+0x32>
 8009460:	f04f 37ff 	mov.w	r7, #4294967295
 8009464:	4638      	mov	r0, r7
 8009466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009468:	6823      	ldr	r3, [r4, #0]
 800946a:	6922      	ldr	r2, [r4, #16]
 800946c:	1a98      	subs	r0, r3, r2
 800946e:	6963      	ldr	r3, [r4, #20]
 8009470:	b2f6      	uxtb	r6, r6
 8009472:	4283      	cmp	r3, r0
 8009474:	4637      	mov	r7, r6
 8009476:	dc05      	bgt.n	8009484 <__swbuf_r+0x4e>
 8009478:	4621      	mov	r1, r4
 800947a:	4628      	mov	r0, r5
 800947c:	f001 fd5e 	bl	800af3c <_fflush_r>
 8009480:	2800      	cmp	r0, #0
 8009482:	d1ed      	bne.n	8009460 <__swbuf_r+0x2a>
 8009484:	68a3      	ldr	r3, [r4, #8]
 8009486:	3b01      	subs	r3, #1
 8009488:	60a3      	str	r3, [r4, #8]
 800948a:	6823      	ldr	r3, [r4, #0]
 800948c:	1c5a      	adds	r2, r3, #1
 800948e:	6022      	str	r2, [r4, #0]
 8009490:	701e      	strb	r6, [r3, #0]
 8009492:	6962      	ldr	r2, [r4, #20]
 8009494:	1c43      	adds	r3, r0, #1
 8009496:	429a      	cmp	r2, r3
 8009498:	d004      	beq.n	80094a4 <__swbuf_r+0x6e>
 800949a:	89a3      	ldrh	r3, [r4, #12]
 800949c:	07db      	lsls	r3, r3, #31
 800949e:	d5e1      	bpl.n	8009464 <__swbuf_r+0x2e>
 80094a0:	2e0a      	cmp	r6, #10
 80094a2:	d1df      	bne.n	8009464 <__swbuf_r+0x2e>
 80094a4:	4621      	mov	r1, r4
 80094a6:	4628      	mov	r0, r5
 80094a8:	f001 fd48 	bl	800af3c <_fflush_r>
 80094ac:	2800      	cmp	r0, #0
 80094ae:	d0d9      	beq.n	8009464 <__swbuf_r+0x2e>
 80094b0:	e7d6      	b.n	8009460 <__swbuf_r+0x2a>
	...

080094b4 <__swsetup_r>:
 80094b4:	b538      	push	{r3, r4, r5, lr}
 80094b6:	4b29      	ldr	r3, [pc, #164]	@ (800955c <__swsetup_r+0xa8>)
 80094b8:	4605      	mov	r5, r0
 80094ba:	6818      	ldr	r0, [r3, #0]
 80094bc:	460c      	mov	r4, r1
 80094be:	b118      	cbz	r0, 80094c8 <__swsetup_r+0x14>
 80094c0:	6a03      	ldr	r3, [r0, #32]
 80094c2:	b90b      	cbnz	r3, 80094c8 <__swsetup_r+0x14>
 80094c4:	f7ff fece 	bl	8009264 <__sinit>
 80094c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094cc:	0719      	lsls	r1, r3, #28
 80094ce:	d422      	bmi.n	8009516 <__swsetup_r+0x62>
 80094d0:	06da      	lsls	r2, r3, #27
 80094d2:	d407      	bmi.n	80094e4 <__swsetup_r+0x30>
 80094d4:	2209      	movs	r2, #9
 80094d6:	602a      	str	r2, [r5, #0]
 80094d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094dc:	81a3      	strh	r3, [r4, #12]
 80094de:	f04f 30ff 	mov.w	r0, #4294967295
 80094e2:	e033      	b.n	800954c <__swsetup_r+0x98>
 80094e4:	0758      	lsls	r0, r3, #29
 80094e6:	d512      	bpl.n	800950e <__swsetup_r+0x5a>
 80094e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094ea:	b141      	cbz	r1, 80094fe <__swsetup_r+0x4a>
 80094ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094f0:	4299      	cmp	r1, r3
 80094f2:	d002      	beq.n	80094fa <__swsetup_r+0x46>
 80094f4:	4628      	mov	r0, r5
 80094f6:	f000 f8d7 	bl	80096a8 <_free_r>
 80094fa:	2300      	movs	r3, #0
 80094fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80094fe:	89a3      	ldrh	r3, [r4, #12]
 8009500:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009504:	81a3      	strh	r3, [r4, #12]
 8009506:	2300      	movs	r3, #0
 8009508:	6063      	str	r3, [r4, #4]
 800950a:	6923      	ldr	r3, [r4, #16]
 800950c:	6023      	str	r3, [r4, #0]
 800950e:	89a3      	ldrh	r3, [r4, #12]
 8009510:	f043 0308 	orr.w	r3, r3, #8
 8009514:	81a3      	strh	r3, [r4, #12]
 8009516:	6923      	ldr	r3, [r4, #16]
 8009518:	b94b      	cbnz	r3, 800952e <__swsetup_r+0x7a>
 800951a:	89a3      	ldrh	r3, [r4, #12]
 800951c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009524:	d003      	beq.n	800952e <__swsetup_r+0x7a>
 8009526:	4621      	mov	r1, r4
 8009528:	4628      	mov	r0, r5
 800952a:	f001 fd55 	bl	800afd8 <__smakebuf_r>
 800952e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009532:	f013 0201 	ands.w	r2, r3, #1
 8009536:	d00a      	beq.n	800954e <__swsetup_r+0x9a>
 8009538:	2200      	movs	r2, #0
 800953a:	60a2      	str	r2, [r4, #8]
 800953c:	6962      	ldr	r2, [r4, #20]
 800953e:	4252      	negs	r2, r2
 8009540:	61a2      	str	r2, [r4, #24]
 8009542:	6922      	ldr	r2, [r4, #16]
 8009544:	b942      	cbnz	r2, 8009558 <__swsetup_r+0xa4>
 8009546:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800954a:	d1c5      	bne.n	80094d8 <__swsetup_r+0x24>
 800954c:	bd38      	pop	{r3, r4, r5, pc}
 800954e:	0799      	lsls	r1, r3, #30
 8009550:	bf58      	it	pl
 8009552:	6962      	ldrpl	r2, [r4, #20]
 8009554:	60a2      	str	r2, [r4, #8]
 8009556:	e7f4      	b.n	8009542 <__swsetup_r+0x8e>
 8009558:	2000      	movs	r0, #0
 800955a:	e7f7      	b.n	800954c <__swsetup_r+0x98>
 800955c:	200001a4 	.word	0x200001a4

08009560 <memset>:
 8009560:	4402      	add	r2, r0
 8009562:	4603      	mov	r3, r0
 8009564:	4293      	cmp	r3, r2
 8009566:	d100      	bne.n	800956a <memset+0xa>
 8009568:	4770      	bx	lr
 800956a:	f803 1b01 	strb.w	r1, [r3], #1
 800956e:	e7f9      	b.n	8009564 <memset+0x4>

08009570 <strncmp>:
 8009570:	b510      	push	{r4, lr}
 8009572:	b16a      	cbz	r2, 8009590 <strncmp+0x20>
 8009574:	3901      	subs	r1, #1
 8009576:	1884      	adds	r4, r0, r2
 8009578:	f810 2b01 	ldrb.w	r2, [r0], #1
 800957c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009580:	429a      	cmp	r2, r3
 8009582:	d103      	bne.n	800958c <strncmp+0x1c>
 8009584:	42a0      	cmp	r0, r4
 8009586:	d001      	beq.n	800958c <strncmp+0x1c>
 8009588:	2a00      	cmp	r2, #0
 800958a:	d1f5      	bne.n	8009578 <strncmp+0x8>
 800958c:	1ad0      	subs	r0, r2, r3
 800958e:	bd10      	pop	{r4, pc}
 8009590:	4610      	mov	r0, r2
 8009592:	e7fc      	b.n	800958e <strncmp+0x1e>

08009594 <_close_r>:
 8009594:	b538      	push	{r3, r4, r5, lr}
 8009596:	4d06      	ldr	r5, [pc, #24]	@ (80095b0 <_close_r+0x1c>)
 8009598:	2300      	movs	r3, #0
 800959a:	4604      	mov	r4, r0
 800959c:	4608      	mov	r0, r1
 800959e:	602b      	str	r3, [r5, #0]
 80095a0:	f7f9 fd16 	bl	8002fd0 <_close>
 80095a4:	1c43      	adds	r3, r0, #1
 80095a6:	d102      	bne.n	80095ae <_close_r+0x1a>
 80095a8:	682b      	ldr	r3, [r5, #0]
 80095aa:	b103      	cbz	r3, 80095ae <_close_r+0x1a>
 80095ac:	6023      	str	r3, [r4, #0]
 80095ae:	bd38      	pop	{r3, r4, r5, pc}
 80095b0:	20000aa0 	.word	0x20000aa0

080095b4 <_lseek_r>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	4d07      	ldr	r5, [pc, #28]	@ (80095d4 <_lseek_r+0x20>)
 80095b8:	4604      	mov	r4, r0
 80095ba:	4608      	mov	r0, r1
 80095bc:	4611      	mov	r1, r2
 80095be:	2200      	movs	r2, #0
 80095c0:	602a      	str	r2, [r5, #0]
 80095c2:	461a      	mov	r2, r3
 80095c4:	f7f9 fd2b 	bl	800301e <_lseek>
 80095c8:	1c43      	adds	r3, r0, #1
 80095ca:	d102      	bne.n	80095d2 <_lseek_r+0x1e>
 80095cc:	682b      	ldr	r3, [r5, #0]
 80095ce:	b103      	cbz	r3, 80095d2 <_lseek_r+0x1e>
 80095d0:	6023      	str	r3, [r4, #0]
 80095d2:	bd38      	pop	{r3, r4, r5, pc}
 80095d4:	20000aa0 	.word	0x20000aa0

080095d8 <_read_r>:
 80095d8:	b538      	push	{r3, r4, r5, lr}
 80095da:	4d07      	ldr	r5, [pc, #28]	@ (80095f8 <_read_r+0x20>)
 80095dc:	4604      	mov	r4, r0
 80095de:	4608      	mov	r0, r1
 80095e0:	4611      	mov	r1, r2
 80095e2:	2200      	movs	r2, #0
 80095e4:	602a      	str	r2, [r5, #0]
 80095e6:	461a      	mov	r2, r3
 80095e8:	f7f9 fcb9 	bl	8002f5e <_read>
 80095ec:	1c43      	adds	r3, r0, #1
 80095ee:	d102      	bne.n	80095f6 <_read_r+0x1e>
 80095f0:	682b      	ldr	r3, [r5, #0]
 80095f2:	b103      	cbz	r3, 80095f6 <_read_r+0x1e>
 80095f4:	6023      	str	r3, [r4, #0]
 80095f6:	bd38      	pop	{r3, r4, r5, pc}
 80095f8:	20000aa0 	.word	0x20000aa0

080095fc <_write_r>:
 80095fc:	b538      	push	{r3, r4, r5, lr}
 80095fe:	4d07      	ldr	r5, [pc, #28]	@ (800961c <_write_r+0x20>)
 8009600:	4604      	mov	r4, r0
 8009602:	4608      	mov	r0, r1
 8009604:	4611      	mov	r1, r2
 8009606:	2200      	movs	r2, #0
 8009608:	602a      	str	r2, [r5, #0]
 800960a:	461a      	mov	r2, r3
 800960c:	f7f9 fcc4 	bl	8002f98 <_write>
 8009610:	1c43      	adds	r3, r0, #1
 8009612:	d102      	bne.n	800961a <_write_r+0x1e>
 8009614:	682b      	ldr	r3, [r5, #0]
 8009616:	b103      	cbz	r3, 800961a <_write_r+0x1e>
 8009618:	6023      	str	r3, [r4, #0]
 800961a:	bd38      	pop	{r3, r4, r5, pc}
 800961c:	20000aa0 	.word	0x20000aa0

08009620 <__errno>:
 8009620:	4b01      	ldr	r3, [pc, #4]	@ (8009628 <__errno+0x8>)
 8009622:	6818      	ldr	r0, [r3, #0]
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	200001a4 	.word	0x200001a4

0800962c <__libc_init_array>:
 800962c:	b570      	push	{r4, r5, r6, lr}
 800962e:	4d0d      	ldr	r5, [pc, #52]	@ (8009664 <__libc_init_array+0x38>)
 8009630:	4c0d      	ldr	r4, [pc, #52]	@ (8009668 <__libc_init_array+0x3c>)
 8009632:	1b64      	subs	r4, r4, r5
 8009634:	10a4      	asrs	r4, r4, #2
 8009636:	2600      	movs	r6, #0
 8009638:	42a6      	cmp	r6, r4
 800963a:	d109      	bne.n	8009650 <__libc_init_array+0x24>
 800963c:	4d0b      	ldr	r5, [pc, #44]	@ (800966c <__libc_init_array+0x40>)
 800963e:	4c0c      	ldr	r4, [pc, #48]	@ (8009670 <__libc_init_array+0x44>)
 8009640:	f001 fdd0 	bl	800b1e4 <_init>
 8009644:	1b64      	subs	r4, r4, r5
 8009646:	10a4      	asrs	r4, r4, #2
 8009648:	2600      	movs	r6, #0
 800964a:	42a6      	cmp	r6, r4
 800964c:	d105      	bne.n	800965a <__libc_init_array+0x2e>
 800964e:	bd70      	pop	{r4, r5, r6, pc}
 8009650:	f855 3b04 	ldr.w	r3, [r5], #4
 8009654:	4798      	blx	r3
 8009656:	3601      	adds	r6, #1
 8009658:	e7ee      	b.n	8009638 <__libc_init_array+0xc>
 800965a:	f855 3b04 	ldr.w	r3, [r5], #4
 800965e:	4798      	blx	r3
 8009660:	3601      	adds	r6, #1
 8009662:	e7f2      	b.n	800964a <__libc_init_array+0x1e>
 8009664:	0800b644 	.word	0x0800b644
 8009668:	0800b644 	.word	0x0800b644
 800966c:	0800b644 	.word	0x0800b644
 8009670:	0800b648 	.word	0x0800b648

08009674 <__retarget_lock_init_recursive>:
 8009674:	4770      	bx	lr

08009676 <__retarget_lock_acquire_recursive>:
 8009676:	4770      	bx	lr

08009678 <__retarget_lock_release_recursive>:
 8009678:	4770      	bx	lr

0800967a <memcpy>:
 800967a:	440a      	add	r2, r1
 800967c:	4291      	cmp	r1, r2
 800967e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009682:	d100      	bne.n	8009686 <memcpy+0xc>
 8009684:	4770      	bx	lr
 8009686:	b510      	push	{r4, lr}
 8009688:	f811 4b01 	ldrb.w	r4, [r1], #1
 800968c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009690:	4291      	cmp	r1, r2
 8009692:	d1f9      	bne.n	8009688 <memcpy+0xe>
 8009694:	bd10      	pop	{r4, pc}
	...

08009698 <nan>:
 8009698:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80096a0 <nan+0x8>
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	00000000 	.word	0x00000000
 80096a4:	7ff80000 	.word	0x7ff80000

080096a8 <_free_r>:
 80096a8:	b538      	push	{r3, r4, r5, lr}
 80096aa:	4605      	mov	r5, r0
 80096ac:	2900      	cmp	r1, #0
 80096ae:	d041      	beq.n	8009734 <_free_r+0x8c>
 80096b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096b4:	1f0c      	subs	r4, r1, #4
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	bfb8      	it	lt
 80096ba:	18e4      	addlt	r4, r4, r3
 80096bc:	f000 fc2c 	bl	8009f18 <__malloc_lock>
 80096c0:	4a1d      	ldr	r2, [pc, #116]	@ (8009738 <_free_r+0x90>)
 80096c2:	6813      	ldr	r3, [r2, #0]
 80096c4:	b933      	cbnz	r3, 80096d4 <_free_r+0x2c>
 80096c6:	6063      	str	r3, [r4, #4]
 80096c8:	6014      	str	r4, [r2, #0]
 80096ca:	4628      	mov	r0, r5
 80096cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096d0:	f000 bc28 	b.w	8009f24 <__malloc_unlock>
 80096d4:	42a3      	cmp	r3, r4
 80096d6:	d908      	bls.n	80096ea <_free_r+0x42>
 80096d8:	6820      	ldr	r0, [r4, #0]
 80096da:	1821      	adds	r1, r4, r0
 80096dc:	428b      	cmp	r3, r1
 80096de:	bf01      	itttt	eq
 80096e0:	6819      	ldreq	r1, [r3, #0]
 80096e2:	685b      	ldreq	r3, [r3, #4]
 80096e4:	1809      	addeq	r1, r1, r0
 80096e6:	6021      	streq	r1, [r4, #0]
 80096e8:	e7ed      	b.n	80096c6 <_free_r+0x1e>
 80096ea:	461a      	mov	r2, r3
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	b10b      	cbz	r3, 80096f4 <_free_r+0x4c>
 80096f0:	42a3      	cmp	r3, r4
 80096f2:	d9fa      	bls.n	80096ea <_free_r+0x42>
 80096f4:	6811      	ldr	r1, [r2, #0]
 80096f6:	1850      	adds	r0, r2, r1
 80096f8:	42a0      	cmp	r0, r4
 80096fa:	d10b      	bne.n	8009714 <_free_r+0x6c>
 80096fc:	6820      	ldr	r0, [r4, #0]
 80096fe:	4401      	add	r1, r0
 8009700:	1850      	adds	r0, r2, r1
 8009702:	4283      	cmp	r3, r0
 8009704:	6011      	str	r1, [r2, #0]
 8009706:	d1e0      	bne.n	80096ca <_free_r+0x22>
 8009708:	6818      	ldr	r0, [r3, #0]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	6053      	str	r3, [r2, #4]
 800970e:	4408      	add	r0, r1
 8009710:	6010      	str	r0, [r2, #0]
 8009712:	e7da      	b.n	80096ca <_free_r+0x22>
 8009714:	d902      	bls.n	800971c <_free_r+0x74>
 8009716:	230c      	movs	r3, #12
 8009718:	602b      	str	r3, [r5, #0]
 800971a:	e7d6      	b.n	80096ca <_free_r+0x22>
 800971c:	6820      	ldr	r0, [r4, #0]
 800971e:	1821      	adds	r1, r4, r0
 8009720:	428b      	cmp	r3, r1
 8009722:	bf04      	itt	eq
 8009724:	6819      	ldreq	r1, [r3, #0]
 8009726:	685b      	ldreq	r3, [r3, #4]
 8009728:	6063      	str	r3, [r4, #4]
 800972a:	bf04      	itt	eq
 800972c:	1809      	addeq	r1, r1, r0
 800972e:	6021      	streq	r1, [r4, #0]
 8009730:	6054      	str	r4, [r2, #4]
 8009732:	e7ca      	b.n	80096ca <_free_r+0x22>
 8009734:	bd38      	pop	{r3, r4, r5, pc}
 8009736:	bf00      	nop
 8009738:	20000aac 	.word	0x20000aac

0800973c <rshift>:
 800973c:	6903      	ldr	r3, [r0, #16]
 800973e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009742:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009746:	ea4f 1261 	mov.w	r2, r1, asr #5
 800974a:	f100 0414 	add.w	r4, r0, #20
 800974e:	dd45      	ble.n	80097dc <rshift+0xa0>
 8009750:	f011 011f 	ands.w	r1, r1, #31
 8009754:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009758:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800975c:	d10c      	bne.n	8009778 <rshift+0x3c>
 800975e:	f100 0710 	add.w	r7, r0, #16
 8009762:	4629      	mov	r1, r5
 8009764:	42b1      	cmp	r1, r6
 8009766:	d334      	bcc.n	80097d2 <rshift+0x96>
 8009768:	1a9b      	subs	r3, r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	1eea      	subs	r2, r5, #3
 800976e:	4296      	cmp	r6, r2
 8009770:	bf38      	it	cc
 8009772:	2300      	movcc	r3, #0
 8009774:	4423      	add	r3, r4
 8009776:	e015      	b.n	80097a4 <rshift+0x68>
 8009778:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800977c:	f1c1 0820 	rsb	r8, r1, #32
 8009780:	40cf      	lsrs	r7, r1
 8009782:	f105 0e04 	add.w	lr, r5, #4
 8009786:	46a1      	mov	r9, r4
 8009788:	4576      	cmp	r6, lr
 800978a:	46f4      	mov	ip, lr
 800978c:	d815      	bhi.n	80097ba <rshift+0x7e>
 800978e:	1a9a      	subs	r2, r3, r2
 8009790:	0092      	lsls	r2, r2, #2
 8009792:	3a04      	subs	r2, #4
 8009794:	3501      	adds	r5, #1
 8009796:	42ae      	cmp	r6, r5
 8009798:	bf38      	it	cc
 800979a:	2200      	movcc	r2, #0
 800979c:	18a3      	adds	r3, r4, r2
 800979e:	50a7      	str	r7, [r4, r2]
 80097a0:	b107      	cbz	r7, 80097a4 <rshift+0x68>
 80097a2:	3304      	adds	r3, #4
 80097a4:	1b1a      	subs	r2, r3, r4
 80097a6:	42a3      	cmp	r3, r4
 80097a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80097ac:	bf08      	it	eq
 80097ae:	2300      	moveq	r3, #0
 80097b0:	6102      	str	r2, [r0, #16]
 80097b2:	bf08      	it	eq
 80097b4:	6143      	streq	r3, [r0, #20]
 80097b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097ba:	f8dc c000 	ldr.w	ip, [ip]
 80097be:	fa0c fc08 	lsl.w	ip, ip, r8
 80097c2:	ea4c 0707 	orr.w	r7, ip, r7
 80097c6:	f849 7b04 	str.w	r7, [r9], #4
 80097ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80097ce:	40cf      	lsrs	r7, r1
 80097d0:	e7da      	b.n	8009788 <rshift+0x4c>
 80097d2:	f851 cb04 	ldr.w	ip, [r1], #4
 80097d6:	f847 cf04 	str.w	ip, [r7, #4]!
 80097da:	e7c3      	b.n	8009764 <rshift+0x28>
 80097dc:	4623      	mov	r3, r4
 80097de:	e7e1      	b.n	80097a4 <rshift+0x68>

080097e0 <__hexdig_fun>:
 80097e0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80097e4:	2b09      	cmp	r3, #9
 80097e6:	d802      	bhi.n	80097ee <__hexdig_fun+0xe>
 80097e8:	3820      	subs	r0, #32
 80097ea:	b2c0      	uxtb	r0, r0
 80097ec:	4770      	bx	lr
 80097ee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80097f2:	2b05      	cmp	r3, #5
 80097f4:	d801      	bhi.n	80097fa <__hexdig_fun+0x1a>
 80097f6:	3847      	subs	r0, #71	@ 0x47
 80097f8:	e7f7      	b.n	80097ea <__hexdig_fun+0xa>
 80097fa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80097fe:	2b05      	cmp	r3, #5
 8009800:	d801      	bhi.n	8009806 <__hexdig_fun+0x26>
 8009802:	3827      	subs	r0, #39	@ 0x27
 8009804:	e7f1      	b.n	80097ea <__hexdig_fun+0xa>
 8009806:	2000      	movs	r0, #0
 8009808:	4770      	bx	lr
	...

0800980c <__gethex>:
 800980c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009810:	b085      	sub	sp, #20
 8009812:	468a      	mov	sl, r1
 8009814:	9302      	str	r3, [sp, #8]
 8009816:	680b      	ldr	r3, [r1, #0]
 8009818:	9001      	str	r0, [sp, #4]
 800981a:	4690      	mov	r8, r2
 800981c:	1c9c      	adds	r4, r3, #2
 800981e:	46a1      	mov	r9, r4
 8009820:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009824:	2830      	cmp	r0, #48	@ 0x30
 8009826:	d0fa      	beq.n	800981e <__gethex+0x12>
 8009828:	eba9 0303 	sub.w	r3, r9, r3
 800982c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009830:	f7ff ffd6 	bl	80097e0 <__hexdig_fun>
 8009834:	4605      	mov	r5, r0
 8009836:	2800      	cmp	r0, #0
 8009838:	d168      	bne.n	800990c <__gethex+0x100>
 800983a:	49a0      	ldr	r1, [pc, #640]	@ (8009abc <__gethex+0x2b0>)
 800983c:	2201      	movs	r2, #1
 800983e:	4648      	mov	r0, r9
 8009840:	f7ff fe96 	bl	8009570 <strncmp>
 8009844:	4607      	mov	r7, r0
 8009846:	2800      	cmp	r0, #0
 8009848:	d167      	bne.n	800991a <__gethex+0x10e>
 800984a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800984e:	4626      	mov	r6, r4
 8009850:	f7ff ffc6 	bl	80097e0 <__hexdig_fun>
 8009854:	2800      	cmp	r0, #0
 8009856:	d062      	beq.n	800991e <__gethex+0x112>
 8009858:	4623      	mov	r3, r4
 800985a:	7818      	ldrb	r0, [r3, #0]
 800985c:	2830      	cmp	r0, #48	@ 0x30
 800985e:	4699      	mov	r9, r3
 8009860:	f103 0301 	add.w	r3, r3, #1
 8009864:	d0f9      	beq.n	800985a <__gethex+0x4e>
 8009866:	f7ff ffbb 	bl	80097e0 <__hexdig_fun>
 800986a:	fab0 f580 	clz	r5, r0
 800986e:	096d      	lsrs	r5, r5, #5
 8009870:	f04f 0b01 	mov.w	fp, #1
 8009874:	464a      	mov	r2, r9
 8009876:	4616      	mov	r6, r2
 8009878:	3201      	adds	r2, #1
 800987a:	7830      	ldrb	r0, [r6, #0]
 800987c:	f7ff ffb0 	bl	80097e0 <__hexdig_fun>
 8009880:	2800      	cmp	r0, #0
 8009882:	d1f8      	bne.n	8009876 <__gethex+0x6a>
 8009884:	498d      	ldr	r1, [pc, #564]	@ (8009abc <__gethex+0x2b0>)
 8009886:	2201      	movs	r2, #1
 8009888:	4630      	mov	r0, r6
 800988a:	f7ff fe71 	bl	8009570 <strncmp>
 800988e:	2800      	cmp	r0, #0
 8009890:	d13f      	bne.n	8009912 <__gethex+0x106>
 8009892:	b944      	cbnz	r4, 80098a6 <__gethex+0x9a>
 8009894:	1c74      	adds	r4, r6, #1
 8009896:	4622      	mov	r2, r4
 8009898:	4616      	mov	r6, r2
 800989a:	3201      	adds	r2, #1
 800989c:	7830      	ldrb	r0, [r6, #0]
 800989e:	f7ff ff9f 	bl	80097e0 <__hexdig_fun>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d1f8      	bne.n	8009898 <__gethex+0x8c>
 80098a6:	1ba4      	subs	r4, r4, r6
 80098a8:	00a7      	lsls	r7, r4, #2
 80098aa:	7833      	ldrb	r3, [r6, #0]
 80098ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80098b0:	2b50      	cmp	r3, #80	@ 0x50
 80098b2:	d13e      	bne.n	8009932 <__gethex+0x126>
 80098b4:	7873      	ldrb	r3, [r6, #1]
 80098b6:	2b2b      	cmp	r3, #43	@ 0x2b
 80098b8:	d033      	beq.n	8009922 <__gethex+0x116>
 80098ba:	2b2d      	cmp	r3, #45	@ 0x2d
 80098bc:	d034      	beq.n	8009928 <__gethex+0x11c>
 80098be:	1c71      	adds	r1, r6, #1
 80098c0:	2400      	movs	r4, #0
 80098c2:	7808      	ldrb	r0, [r1, #0]
 80098c4:	f7ff ff8c 	bl	80097e0 <__hexdig_fun>
 80098c8:	1e43      	subs	r3, r0, #1
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	2b18      	cmp	r3, #24
 80098ce:	d830      	bhi.n	8009932 <__gethex+0x126>
 80098d0:	f1a0 0210 	sub.w	r2, r0, #16
 80098d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80098d8:	f7ff ff82 	bl	80097e0 <__hexdig_fun>
 80098dc:	f100 3cff 	add.w	ip, r0, #4294967295
 80098e0:	fa5f fc8c 	uxtb.w	ip, ip
 80098e4:	f1bc 0f18 	cmp.w	ip, #24
 80098e8:	f04f 030a 	mov.w	r3, #10
 80098ec:	d91e      	bls.n	800992c <__gethex+0x120>
 80098ee:	b104      	cbz	r4, 80098f2 <__gethex+0xe6>
 80098f0:	4252      	negs	r2, r2
 80098f2:	4417      	add	r7, r2
 80098f4:	f8ca 1000 	str.w	r1, [sl]
 80098f8:	b1ed      	cbz	r5, 8009936 <__gethex+0x12a>
 80098fa:	f1bb 0f00 	cmp.w	fp, #0
 80098fe:	bf0c      	ite	eq
 8009900:	2506      	moveq	r5, #6
 8009902:	2500      	movne	r5, #0
 8009904:	4628      	mov	r0, r5
 8009906:	b005      	add	sp, #20
 8009908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990c:	2500      	movs	r5, #0
 800990e:	462c      	mov	r4, r5
 8009910:	e7b0      	b.n	8009874 <__gethex+0x68>
 8009912:	2c00      	cmp	r4, #0
 8009914:	d1c7      	bne.n	80098a6 <__gethex+0x9a>
 8009916:	4627      	mov	r7, r4
 8009918:	e7c7      	b.n	80098aa <__gethex+0x9e>
 800991a:	464e      	mov	r6, r9
 800991c:	462f      	mov	r7, r5
 800991e:	2501      	movs	r5, #1
 8009920:	e7c3      	b.n	80098aa <__gethex+0x9e>
 8009922:	2400      	movs	r4, #0
 8009924:	1cb1      	adds	r1, r6, #2
 8009926:	e7cc      	b.n	80098c2 <__gethex+0xb6>
 8009928:	2401      	movs	r4, #1
 800992a:	e7fb      	b.n	8009924 <__gethex+0x118>
 800992c:	fb03 0002 	mla	r0, r3, r2, r0
 8009930:	e7ce      	b.n	80098d0 <__gethex+0xc4>
 8009932:	4631      	mov	r1, r6
 8009934:	e7de      	b.n	80098f4 <__gethex+0xe8>
 8009936:	eba6 0309 	sub.w	r3, r6, r9
 800993a:	3b01      	subs	r3, #1
 800993c:	4629      	mov	r1, r5
 800993e:	2b07      	cmp	r3, #7
 8009940:	dc0a      	bgt.n	8009958 <__gethex+0x14c>
 8009942:	9801      	ldr	r0, [sp, #4]
 8009944:	f000 faf4 	bl	8009f30 <_Balloc>
 8009948:	4604      	mov	r4, r0
 800994a:	b940      	cbnz	r0, 800995e <__gethex+0x152>
 800994c:	4b5c      	ldr	r3, [pc, #368]	@ (8009ac0 <__gethex+0x2b4>)
 800994e:	4602      	mov	r2, r0
 8009950:	21e4      	movs	r1, #228	@ 0xe4
 8009952:	485c      	ldr	r0, [pc, #368]	@ (8009ac4 <__gethex+0x2b8>)
 8009954:	f001 fbae 	bl	800b0b4 <__assert_func>
 8009958:	3101      	adds	r1, #1
 800995a:	105b      	asrs	r3, r3, #1
 800995c:	e7ef      	b.n	800993e <__gethex+0x132>
 800995e:	f100 0a14 	add.w	sl, r0, #20
 8009962:	2300      	movs	r3, #0
 8009964:	4655      	mov	r5, sl
 8009966:	469b      	mov	fp, r3
 8009968:	45b1      	cmp	r9, r6
 800996a:	d337      	bcc.n	80099dc <__gethex+0x1d0>
 800996c:	f845 bb04 	str.w	fp, [r5], #4
 8009970:	eba5 050a 	sub.w	r5, r5, sl
 8009974:	10ad      	asrs	r5, r5, #2
 8009976:	6125      	str	r5, [r4, #16]
 8009978:	4658      	mov	r0, fp
 800997a:	f000 fbcb 	bl	800a114 <__hi0bits>
 800997e:	016d      	lsls	r5, r5, #5
 8009980:	f8d8 6000 	ldr.w	r6, [r8]
 8009984:	1a2d      	subs	r5, r5, r0
 8009986:	42b5      	cmp	r5, r6
 8009988:	dd54      	ble.n	8009a34 <__gethex+0x228>
 800998a:	1bad      	subs	r5, r5, r6
 800998c:	4629      	mov	r1, r5
 800998e:	4620      	mov	r0, r4
 8009990:	f000 ff54 	bl	800a83c <__any_on>
 8009994:	4681      	mov	r9, r0
 8009996:	b178      	cbz	r0, 80099b8 <__gethex+0x1ac>
 8009998:	1e6b      	subs	r3, r5, #1
 800999a:	1159      	asrs	r1, r3, #5
 800999c:	f003 021f 	and.w	r2, r3, #31
 80099a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80099a4:	f04f 0901 	mov.w	r9, #1
 80099a8:	fa09 f202 	lsl.w	r2, r9, r2
 80099ac:	420a      	tst	r2, r1
 80099ae:	d003      	beq.n	80099b8 <__gethex+0x1ac>
 80099b0:	454b      	cmp	r3, r9
 80099b2:	dc36      	bgt.n	8009a22 <__gethex+0x216>
 80099b4:	f04f 0902 	mov.w	r9, #2
 80099b8:	4629      	mov	r1, r5
 80099ba:	4620      	mov	r0, r4
 80099bc:	f7ff febe 	bl	800973c <rshift>
 80099c0:	442f      	add	r7, r5
 80099c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80099c6:	42bb      	cmp	r3, r7
 80099c8:	da42      	bge.n	8009a50 <__gethex+0x244>
 80099ca:	9801      	ldr	r0, [sp, #4]
 80099cc:	4621      	mov	r1, r4
 80099ce:	f000 faef 	bl	8009fb0 <_Bfree>
 80099d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099d4:	2300      	movs	r3, #0
 80099d6:	6013      	str	r3, [r2, #0]
 80099d8:	25a3      	movs	r5, #163	@ 0xa3
 80099da:	e793      	b.n	8009904 <__gethex+0xf8>
 80099dc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80099e0:	2a2e      	cmp	r2, #46	@ 0x2e
 80099e2:	d012      	beq.n	8009a0a <__gethex+0x1fe>
 80099e4:	2b20      	cmp	r3, #32
 80099e6:	d104      	bne.n	80099f2 <__gethex+0x1e6>
 80099e8:	f845 bb04 	str.w	fp, [r5], #4
 80099ec:	f04f 0b00 	mov.w	fp, #0
 80099f0:	465b      	mov	r3, fp
 80099f2:	7830      	ldrb	r0, [r6, #0]
 80099f4:	9303      	str	r3, [sp, #12]
 80099f6:	f7ff fef3 	bl	80097e0 <__hexdig_fun>
 80099fa:	9b03      	ldr	r3, [sp, #12]
 80099fc:	f000 000f 	and.w	r0, r0, #15
 8009a00:	4098      	lsls	r0, r3
 8009a02:	ea4b 0b00 	orr.w	fp, fp, r0
 8009a06:	3304      	adds	r3, #4
 8009a08:	e7ae      	b.n	8009968 <__gethex+0x15c>
 8009a0a:	45b1      	cmp	r9, r6
 8009a0c:	d8ea      	bhi.n	80099e4 <__gethex+0x1d8>
 8009a0e:	492b      	ldr	r1, [pc, #172]	@ (8009abc <__gethex+0x2b0>)
 8009a10:	9303      	str	r3, [sp, #12]
 8009a12:	2201      	movs	r2, #1
 8009a14:	4630      	mov	r0, r6
 8009a16:	f7ff fdab 	bl	8009570 <strncmp>
 8009a1a:	9b03      	ldr	r3, [sp, #12]
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d1e1      	bne.n	80099e4 <__gethex+0x1d8>
 8009a20:	e7a2      	b.n	8009968 <__gethex+0x15c>
 8009a22:	1ea9      	subs	r1, r5, #2
 8009a24:	4620      	mov	r0, r4
 8009a26:	f000 ff09 	bl	800a83c <__any_on>
 8009a2a:	2800      	cmp	r0, #0
 8009a2c:	d0c2      	beq.n	80099b4 <__gethex+0x1a8>
 8009a2e:	f04f 0903 	mov.w	r9, #3
 8009a32:	e7c1      	b.n	80099b8 <__gethex+0x1ac>
 8009a34:	da09      	bge.n	8009a4a <__gethex+0x23e>
 8009a36:	1b75      	subs	r5, r6, r5
 8009a38:	4621      	mov	r1, r4
 8009a3a:	9801      	ldr	r0, [sp, #4]
 8009a3c:	462a      	mov	r2, r5
 8009a3e:	f000 fcc7 	bl	800a3d0 <__lshift>
 8009a42:	1b7f      	subs	r7, r7, r5
 8009a44:	4604      	mov	r4, r0
 8009a46:	f100 0a14 	add.w	sl, r0, #20
 8009a4a:	f04f 0900 	mov.w	r9, #0
 8009a4e:	e7b8      	b.n	80099c2 <__gethex+0x1b6>
 8009a50:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009a54:	42bd      	cmp	r5, r7
 8009a56:	dd6f      	ble.n	8009b38 <__gethex+0x32c>
 8009a58:	1bed      	subs	r5, r5, r7
 8009a5a:	42ae      	cmp	r6, r5
 8009a5c:	dc34      	bgt.n	8009ac8 <__gethex+0x2bc>
 8009a5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d022      	beq.n	8009aac <__gethex+0x2a0>
 8009a66:	2b03      	cmp	r3, #3
 8009a68:	d024      	beq.n	8009ab4 <__gethex+0x2a8>
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d115      	bne.n	8009a9a <__gethex+0x28e>
 8009a6e:	42ae      	cmp	r6, r5
 8009a70:	d113      	bne.n	8009a9a <__gethex+0x28e>
 8009a72:	2e01      	cmp	r6, #1
 8009a74:	d10b      	bne.n	8009a8e <__gethex+0x282>
 8009a76:	9a02      	ldr	r2, [sp, #8]
 8009a78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009a7c:	6013      	str	r3, [r2, #0]
 8009a7e:	2301      	movs	r3, #1
 8009a80:	6123      	str	r3, [r4, #16]
 8009a82:	f8ca 3000 	str.w	r3, [sl]
 8009a86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a88:	2562      	movs	r5, #98	@ 0x62
 8009a8a:	601c      	str	r4, [r3, #0]
 8009a8c:	e73a      	b.n	8009904 <__gethex+0xf8>
 8009a8e:	1e71      	subs	r1, r6, #1
 8009a90:	4620      	mov	r0, r4
 8009a92:	f000 fed3 	bl	800a83c <__any_on>
 8009a96:	2800      	cmp	r0, #0
 8009a98:	d1ed      	bne.n	8009a76 <__gethex+0x26a>
 8009a9a:	9801      	ldr	r0, [sp, #4]
 8009a9c:	4621      	mov	r1, r4
 8009a9e:	f000 fa87 	bl	8009fb0 <_Bfree>
 8009aa2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	6013      	str	r3, [r2, #0]
 8009aa8:	2550      	movs	r5, #80	@ 0x50
 8009aaa:	e72b      	b.n	8009904 <__gethex+0xf8>
 8009aac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1f3      	bne.n	8009a9a <__gethex+0x28e>
 8009ab2:	e7e0      	b.n	8009a76 <__gethex+0x26a>
 8009ab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1dd      	bne.n	8009a76 <__gethex+0x26a>
 8009aba:	e7ee      	b.n	8009a9a <__gethex+0x28e>
 8009abc:	0800b280 	.word	0x0800b280
 8009ac0:	0800b296 	.word	0x0800b296
 8009ac4:	0800b2a7 	.word	0x0800b2a7
 8009ac8:	1e6f      	subs	r7, r5, #1
 8009aca:	f1b9 0f00 	cmp.w	r9, #0
 8009ace:	d130      	bne.n	8009b32 <__gethex+0x326>
 8009ad0:	b127      	cbz	r7, 8009adc <__gethex+0x2d0>
 8009ad2:	4639      	mov	r1, r7
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	f000 feb1 	bl	800a83c <__any_on>
 8009ada:	4681      	mov	r9, r0
 8009adc:	117a      	asrs	r2, r7, #5
 8009ade:	2301      	movs	r3, #1
 8009ae0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009ae4:	f007 071f 	and.w	r7, r7, #31
 8009ae8:	40bb      	lsls	r3, r7
 8009aea:	4213      	tst	r3, r2
 8009aec:	4629      	mov	r1, r5
 8009aee:	4620      	mov	r0, r4
 8009af0:	bf18      	it	ne
 8009af2:	f049 0902 	orrne.w	r9, r9, #2
 8009af6:	f7ff fe21 	bl	800973c <rshift>
 8009afa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009afe:	1b76      	subs	r6, r6, r5
 8009b00:	2502      	movs	r5, #2
 8009b02:	f1b9 0f00 	cmp.w	r9, #0
 8009b06:	d047      	beq.n	8009b98 <__gethex+0x38c>
 8009b08:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d015      	beq.n	8009b3c <__gethex+0x330>
 8009b10:	2b03      	cmp	r3, #3
 8009b12:	d017      	beq.n	8009b44 <__gethex+0x338>
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d109      	bne.n	8009b2c <__gethex+0x320>
 8009b18:	f019 0f02 	tst.w	r9, #2
 8009b1c:	d006      	beq.n	8009b2c <__gethex+0x320>
 8009b1e:	f8da 3000 	ldr.w	r3, [sl]
 8009b22:	ea49 0903 	orr.w	r9, r9, r3
 8009b26:	f019 0f01 	tst.w	r9, #1
 8009b2a:	d10e      	bne.n	8009b4a <__gethex+0x33e>
 8009b2c:	f045 0510 	orr.w	r5, r5, #16
 8009b30:	e032      	b.n	8009b98 <__gethex+0x38c>
 8009b32:	f04f 0901 	mov.w	r9, #1
 8009b36:	e7d1      	b.n	8009adc <__gethex+0x2d0>
 8009b38:	2501      	movs	r5, #1
 8009b3a:	e7e2      	b.n	8009b02 <__gethex+0x2f6>
 8009b3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b3e:	f1c3 0301 	rsb	r3, r3, #1
 8009b42:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009b44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d0f0      	beq.n	8009b2c <__gethex+0x320>
 8009b4a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009b4e:	f104 0314 	add.w	r3, r4, #20
 8009b52:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009b56:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009b5a:	f04f 0c00 	mov.w	ip, #0
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b64:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009b68:	d01b      	beq.n	8009ba2 <__gethex+0x396>
 8009b6a:	3201      	adds	r2, #1
 8009b6c:	6002      	str	r2, [r0, #0]
 8009b6e:	2d02      	cmp	r5, #2
 8009b70:	f104 0314 	add.w	r3, r4, #20
 8009b74:	d13c      	bne.n	8009bf0 <__gethex+0x3e4>
 8009b76:	f8d8 2000 	ldr.w	r2, [r8]
 8009b7a:	3a01      	subs	r2, #1
 8009b7c:	42b2      	cmp	r2, r6
 8009b7e:	d109      	bne.n	8009b94 <__gethex+0x388>
 8009b80:	1171      	asrs	r1, r6, #5
 8009b82:	2201      	movs	r2, #1
 8009b84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b88:	f006 061f 	and.w	r6, r6, #31
 8009b8c:	fa02 f606 	lsl.w	r6, r2, r6
 8009b90:	421e      	tst	r6, r3
 8009b92:	d13a      	bne.n	8009c0a <__gethex+0x3fe>
 8009b94:	f045 0520 	orr.w	r5, r5, #32
 8009b98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b9a:	601c      	str	r4, [r3, #0]
 8009b9c:	9b02      	ldr	r3, [sp, #8]
 8009b9e:	601f      	str	r7, [r3, #0]
 8009ba0:	e6b0      	b.n	8009904 <__gethex+0xf8>
 8009ba2:	4299      	cmp	r1, r3
 8009ba4:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ba8:	d8d9      	bhi.n	8009b5e <__gethex+0x352>
 8009baa:	68a3      	ldr	r3, [r4, #8]
 8009bac:	459b      	cmp	fp, r3
 8009bae:	db17      	blt.n	8009be0 <__gethex+0x3d4>
 8009bb0:	6861      	ldr	r1, [r4, #4]
 8009bb2:	9801      	ldr	r0, [sp, #4]
 8009bb4:	3101      	adds	r1, #1
 8009bb6:	f000 f9bb 	bl	8009f30 <_Balloc>
 8009bba:	4681      	mov	r9, r0
 8009bbc:	b918      	cbnz	r0, 8009bc6 <__gethex+0x3ba>
 8009bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8009c28 <__gethex+0x41c>)
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	2184      	movs	r1, #132	@ 0x84
 8009bc4:	e6c5      	b.n	8009952 <__gethex+0x146>
 8009bc6:	6922      	ldr	r2, [r4, #16]
 8009bc8:	3202      	adds	r2, #2
 8009bca:	f104 010c 	add.w	r1, r4, #12
 8009bce:	0092      	lsls	r2, r2, #2
 8009bd0:	300c      	adds	r0, #12
 8009bd2:	f7ff fd52 	bl	800967a <memcpy>
 8009bd6:	4621      	mov	r1, r4
 8009bd8:	9801      	ldr	r0, [sp, #4]
 8009bda:	f000 f9e9 	bl	8009fb0 <_Bfree>
 8009bde:	464c      	mov	r4, r9
 8009be0:	6923      	ldr	r3, [r4, #16]
 8009be2:	1c5a      	adds	r2, r3, #1
 8009be4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009be8:	6122      	str	r2, [r4, #16]
 8009bea:	2201      	movs	r2, #1
 8009bec:	615a      	str	r2, [r3, #20]
 8009bee:	e7be      	b.n	8009b6e <__gethex+0x362>
 8009bf0:	6922      	ldr	r2, [r4, #16]
 8009bf2:	455a      	cmp	r2, fp
 8009bf4:	dd0b      	ble.n	8009c0e <__gethex+0x402>
 8009bf6:	2101      	movs	r1, #1
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f7ff fd9f 	bl	800973c <rshift>
 8009bfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c02:	3701      	adds	r7, #1
 8009c04:	42bb      	cmp	r3, r7
 8009c06:	f6ff aee0 	blt.w	80099ca <__gethex+0x1be>
 8009c0a:	2501      	movs	r5, #1
 8009c0c:	e7c2      	b.n	8009b94 <__gethex+0x388>
 8009c0e:	f016 061f 	ands.w	r6, r6, #31
 8009c12:	d0fa      	beq.n	8009c0a <__gethex+0x3fe>
 8009c14:	4453      	add	r3, sl
 8009c16:	f1c6 0620 	rsb	r6, r6, #32
 8009c1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009c1e:	f000 fa79 	bl	800a114 <__hi0bits>
 8009c22:	42b0      	cmp	r0, r6
 8009c24:	dbe7      	blt.n	8009bf6 <__gethex+0x3ea>
 8009c26:	e7f0      	b.n	8009c0a <__gethex+0x3fe>
 8009c28:	0800b296 	.word	0x0800b296

08009c2c <L_shift>:
 8009c2c:	f1c2 0208 	rsb	r2, r2, #8
 8009c30:	0092      	lsls	r2, r2, #2
 8009c32:	b570      	push	{r4, r5, r6, lr}
 8009c34:	f1c2 0620 	rsb	r6, r2, #32
 8009c38:	6843      	ldr	r3, [r0, #4]
 8009c3a:	6804      	ldr	r4, [r0, #0]
 8009c3c:	fa03 f506 	lsl.w	r5, r3, r6
 8009c40:	432c      	orrs	r4, r5
 8009c42:	40d3      	lsrs	r3, r2
 8009c44:	6004      	str	r4, [r0, #0]
 8009c46:	f840 3f04 	str.w	r3, [r0, #4]!
 8009c4a:	4288      	cmp	r0, r1
 8009c4c:	d3f4      	bcc.n	8009c38 <L_shift+0xc>
 8009c4e:	bd70      	pop	{r4, r5, r6, pc}

08009c50 <__match>:
 8009c50:	b530      	push	{r4, r5, lr}
 8009c52:	6803      	ldr	r3, [r0, #0]
 8009c54:	3301      	adds	r3, #1
 8009c56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c5a:	b914      	cbnz	r4, 8009c62 <__match+0x12>
 8009c5c:	6003      	str	r3, [r0, #0]
 8009c5e:	2001      	movs	r0, #1
 8009c60:	bd30      	pop	{r4, r5, pc}
 8009c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c66:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009c6a:	2d19      	cmp	r5, #25
 8009c6c:	bf98      	it	ls
 8009c6e:	3220      	addls	r2, #32
 8009c70:	42a2      	cmp	r2, r4
 8009c72:	d0f0      	beq.n	8009c56 <__match+0x6>
 8009c74:	2000      	movs	r0, #0
 8009c76:	e7f3      	b.n	8009c60 <__match+0x10>

08009c78 <__hexnan>:
 8009c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7c:	680b      	ldr	r3, [r1, #0]
 8009c7e:	6801      	ldr	r1, [r0, #0]
 8009c80:	115e      	asrs	r6, r3, #5
 8009c82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009c86:	f013 031f 	ands.w	r3, r3, #31
 8009c8a:	b087      	sub	sp, #28
 8009c8c:	bf18      	it	ne
 8009c8e:	3604      	addne	r6, #4
 8009c90:	2500      	movs	r5, #0
 8009c92:	1f37      	subs	r7, r6, #4
 8009c94:	4682      	mov	sl, r0
 8009c96:	4690      	mov	r8, r2
 8009c98:	9301      	str	r3, [sp, #4]
 8009c9a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009c9e:	46b9      	mov	r9, r7
 8009ca0:	463c      	mov	r4, r7
 8009ca2:	9502      	str	r5, [sp, #8]
 8009ca4:	46ab      	mov	fp, r5
 8009ca6:	784a      	ldrb	r2, [r1, #1]
 8009ca8:	1c4b      	adds	r3, r1, #1
 8009caa:	9303      	str	r3, [sp, #12]
 8009cac:	b342      	cbz	r2, 8009d00 <__hexnan+0x88>
 8009cae:	4610      	mov	r0, r2
 8009cb0:	9105      	str	r1, [sp, #20]
 8009cb2:	9204      	str	r2, [sp, #16]
 8009cb4:	f7ff fd94 	bl	80097e0 <__hexdig_fun>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d151      	bne.n	8009d60 <__hexnan+0xe8>
 8009cbc:	9a04      	ldr	r2, [sp, #16]
 8009cbe:	9905      	ldr	r1, [sp, #20]
 8009cc0:	2a20      	cmp	r2, #32
 8009cc2:	d818      	bhi.n	8009cf6 <__hexnan+0x7e>
 8009cc4:	9b02      	ldr	r3, [sp, #8]
 8009cc6:	459b      	cmp	fp, r3
 8009cc8:	dd13      	ble.n	8009cf2 <__hexnan+0x7a>
 8009cca:	454c      	cmp	r4, r9
 8009ccc:	d206      	bcs.n	8009cdc <__hexnan+0x64>
 8009cce:	2d07      	cmp	r5, #7
 8009cd0:	dc04      	bgt.n	8009cdc <__hexnan+0x64>
 8009cd2:	462a      	mov	r2, r5
 8009cd4:	4649      	mov	r1, r9
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f7ff ffa8 	bl	8009c2c <L_shift>
 8009cdc:	4544      	cmp	r4, r8
 8009cde:	d952      	bls.n	8009d86 <__hexnan+0x10e>
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	f1a4 0904 	sub.w	r9, r4, #4
 8009ce6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009cea:	f8cd b008 	str.w	fp, [sp, #8]
 8009cee:	464c      	mov	r4, r9
 8009cf0:	461d      	mov	r5, r3
 8009cf2:	9903      	ldr	r1, [sp, #12]
 8009cf4:	e7d7      	b.n	8009ca6 <__hexnan+0x2e>
 8009cf6:	2a29      	cmp	r2, #41	@ 0x29
 8009cf8:	d157      	bne.n	8009daa <__hexnan+0x132>
 8009cfa:	3102      	adds	r1, #2
 8009cfc:	f8ca 1000 	str.w	r1, [sl]
 8009d00:	f1bb 0f00 	cmp.w	fp, #0
 8009d04:	d051      	beq.n	8009daa <__hexnan+0x132>
 8009d06:	454c      	cmp	r4, r9
 8009d08:	d206      	bcs.n	8009d18 <__hexnan+0xa0>
 8009d0a:	2d07      	cmp	r5, #7
 8009d0c:	dc04      	bgt.n	8009d18 <__hexnan+0xa0>
 8009d0e:	462a      	mov	r2, r5
 8009d10:	4649      	mov	r1, r9
 8009d12:	4620      	mov	r0, r4
 8009d14:	f7ff ff8a 	bl	8009c2c <L_shift>
 8009d18:	4544      	cmp	r4, r8
 8009d1a:	d936      	bls.n	8009d8a <__hexnan+0x112>
 8009d1c:	f1a8 0204 	sub.w	r2, r8, #4
 8009d20:	4623      	mov	r3, r4
 8009d22:	f853 1b04 	ldr.w	r1, [r3], #4
 8009d26:	f842 1f04 	str.w	r1, [r2, #4]!
 8009d2a:	429f      	cmp	r7, r3
 8009d2c:	d2f9      	bcs.n	8009d22 <__hexnan+0xaa>
 8009d2e:	1b3b      	subs	r3, r7, r4
 8009d30:	f023 0303 	bic.w	r3, r3, #3
 8009d34:	3304      	adds	r3, #4
 8009d36:	3401      	adds	r4, #1
 8009d38:	3e03      	subs	r6, #3
 8009d3a:	42b4      	cmp	r4, r6
 8009d3c:	bf88      	it	hi
 8009d3e:	2304      	movhi	r3, #4
 8009d40:	4443      	add	r3, r8
 8009d42:	2200      	movs	r2, #0
 8009d44:	f843 2b04 	str.w	r2, [r3], #4
 8009d48:	429f      	cmp	r7, r3
 8009d4a:	d2fb      	bcs.n	8009d44 <__hexnan+0xcc>
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	b91b      	cbnz	r3, 8009d58 <__hexnan+0xe0>
 8009d50:	4547      	cmp	r7, r8
 8009d52:	d128      	bne.n	8009da6 <__hexnan+0x12e>
 8009d54:	2301      	movs	r3, #1
 8009d56:	603b      	str	r3, [r7, #0]
 8009d58:	2005      	movs	r0, #5
 8009d5a:	b007      	add	sp, #28
 8009d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d60:	3501      	adds	r5, #1
 8009d62:	2d08      	cmp	r5, #8
 8009d64:	f10b 0b01 	add.w	fp, fp, #1
 8009d68:	dd06      	ble.n	8009d78 <__hexnan+0x100>
 8009d6a:	4544      	cmp	r4, r8
 8009d6c:	d9c1      	bls.n	8009cf2 <__hexnan+0x7a>
 8009d6e:	2300      	movs	r3, #0
 8009d70:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d74:	2501      	movs	r5, #1
 8009d76:	3c04      	subs	r4, #4
 8009d78:	6822      	ldr	r2, [r4, #0]
 8009d7a:	f000 000f 	and.w	r0, r0, #15
 8009d7e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009d82:	6020      	str	r0, [r4, #0]
 8009d84:	e7b5      	b.n	8009cf2 <__hexnan+0x7a>
 8009d86:	2508      	movs	r5, #8
 8009d88:	e7b3      	b.n	8009cf2 <__hexnan+0x7a>
 8009d8a:	9b01      	ldr	r3, [sp, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d0dd      	beq.n	8009d4c <__hexnan+0xd4>
 8009d90:	f1c3 0320 	rsb	r3, r3, #32
 8009d94:	f04f 32ff 	mov.w	r2, #4294967295
 8009d98:	40da      	lsrs	r2, r3
 8009d9a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009d9e:	4013      	ands	r3, r2
 8009da0:	f846 3c04 	str.w	r3, [r6, #-4]
 8009da4:	e7d2      	b.n	8009d4c <__hexnan+0xd4>
 8009da6:	3f04      	subs	r7, #4
 8009da8:	e7d0      	b.n	8009d4c <__hexnan+0xd4>
 8009daa:	2004      	movs	r0, #4
 8009dac:	e7d5      	b.n	8009d5a <__hexnan+0xe2>
	...

08009db0 <sbrk_aligned>:
 8009db0:	b570      	push	{r4, r5, r6, lr}
 8009db2:	4e0f      	ldr	r6, [pc, #60]	@ (8009df0 <sbrk_aligned+0x40>)
 8009db4:	460c      	mov	r4, r1
 8009db6:	6831      	ldr	r1, [r6, #0]
 8009db8:	4605      	mov	r5, r0
 8009dba:	b911      	cbnz	r1, 8009dc2 <sbrk_aligned+0x12>
 8009dbc:	f001 f96a 	bl	800b094 <_sbrk_r>
 8009dc0:	6030      	str	r0, [r6, #0]
 8009dc2:	4621      	mov	r1, r4
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	f001 f965 	bl	800b094 <_sbrk_r>
 8009dca:	1c43      	adds	r3, r0, #1
 8009dcc:	d103      	bne.n	8009dd6 <sbrk_aligned+0x26>
 8009dce:	f04f 34ff 	mov.w	r4, #4294967295
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	bd70      	pop	{r4, r5, r6, pc}
 8009dd6:	1cc4      	adds	r4, r0, #3
 8009dd8:	f024 0403 	bic.w	r4, r4, #3
 8009ddc:	42a0      	cmp	r0, r4
 8009dde:	d0f8      	beq.n	8009dd2 <sbrk_aligned+0x22>
 8009de0:	1a21      	subs	r1, r4, r0
 8009de2:	4628      	mov	r0, r5
 8009de4:	f001 f956 	bl	800b094 <_sbrk_r>
 8009de8:	3001      	adds	r0, #1
 8009dea:	d1f2      	bne.n	8009dd2 <sbrk_aligned+0x22>
 8009dec:	e7ef      	b.n	8009dce <sbrk_aligned+0x1e>
 8009dee:	bf00      	nop
 8009df0:	20000aa8 	.word	0x20000aa8

08009df4 <_malloc_r>:
 8009df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009df8:	1ccd      	adds	r5, r1, #3
 8009dfa:	f025 0503 	bic.w	r5, r5, #3
 8009dfe:	3508      	adds	r5, #8
 8009e00:	2d0c      	cmp	r5, #12
 8009e02:	bf38      	it	cc
 8009e04:	250c      	movcc	r5, #12
 8009e06:	2d00      	cmp	r5, #0
 8009e08:	4606      	mov	r6, r0
 8009e0a:	db01      	blt.n	8009e10 <_malloc_r+0x1c>
 8009e0c:	42a9      	cmp	r1, r5
 8009e0e:	d904      	bls.n	8009e1a <_malloc_r+0x26>
 8009e10:	230c      	movs	r3, #12
 8009e12:	6033      	str	r3, [r6, #0]
 8009e14:	2000      	movs	r0, #0
 8009e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ef0 <_malloc_r+0xfc>
 8009e1e:	f000 f87b 	bl	8009f18 <__malloc_lock>
 8009e22:	f8d8 3000 	ldr.w	r3, [r8]
 8009e26:	461c      	mov	r4, r3
 8009e28:	bb44      	cbnz	r4, 8009e7c <_malloc_r+0x88>
 8009e2a:	4629      	mov	r1, r5
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	f7ff ffbf 	bl	8009db0 <sbrk_aligned>
 8009e32:	1c43      	adds	r3, r0, #1
 8009e34:	4604      	mov	r4, r0
 8009e36:	d158      	bne.n	8009eea <_malloc_r+0xf6>
 8009e38:	f8d8 4000 	ldr.w	r4, [r8]
 8009e3c:	4627      	mov	r7, r4
 8009e3e:	2f00      	cmp	r7, #0
 8009e40:	d143      	bne.n	8009eca <_malloc_r+0xd6>
 8009e42:	2c00      	cmp	r4, #0
 8009e44:	d04b      	beq.n	8009ede <_malloc_r+0xea>
 8009e46:	6823      	ldr	r3, [r4, #0]
 8009e48:	4639      	mov	r1, r7
 8009e4a:	4630      	mov	r0, r6
 8009e4c:	eb04 0903 	add.w	r9, r4, r3
 8009e50:	f001 f920 	bl	800b094 <_sbrk_r>
 8009e54:	4581      	cmp	r9, r0
 8009e56:	d142      	bne.n	8009ede <_malloc_r+0xea>
 8009e58:	6821      	ldr	r1, [r4, #0]
 8009e5a:	1a6d      	subs	r5, r5, r1
 8009e5c:	4629      	mov	r1, r5
 8009e5e:	4630      	mov	r0, r6
 8009e60:	f7ff ffa6 	bl	8009db0 <sbrk_aligned>
 8009e64:	3001      	adds	r0, #1
 8009e66:	d03a      	beq.n	8009ede <_malloc_r+0xea>
 8009e68:	6823      	ldr	r3, [r4, #0]
 8009e6a:	442b      	add	r3, r5
 8009e6c:	6023      	str	r3, [r4, #0]
 8009e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8009e72:	685a      	ldr	r2, [r3, #4]
 8009e74:	bb62      	cbnz	r2, 8009ed0 <_malloc_r+0xdc>
 8009e76:	f8c8 7000 	str.w	r7, [r8]
 8009e7a:	e00f      	b.n	8009e9c <_malloc_r+0xa8>
 8009e7c:	6822      	ldr	r2, [r4, #0]
 8009e7e:	1b52      	subs	r2, r2, r5
 8009e80:	d420      	bmi.n	8009ec4 <_malloc_r+0xd0>
 8009e82:	2a0b      	cmp	r2, #11
 8009e84:	d917      	bls.n	8009eb6 <_malloc_r+0xc2>
 8009e86:	1961      	adds	r1, r4, r5
 8009e88:	42a3      	cmp	r3, r4
 8009e8a:	6025      	str	r5, [r4, #0]
 8009e8c:	bf18      	it	ne
 8009e8e:	6059      	strne	r1, [r3, #4]
 8009e90:	6863      	ldr	r3, [r4, #4]
 8009e92:	bf08      	it	eq
 8009e94:	f8c8 1000 	streq.w	r1, [r8]
 8009e98:	5162      	str	r2, [r4, r5]
 8009e9a:	604b      	str	r3, [r1, #4]
 8009e9c:	4630      	mov	r0, r6
 8009e9e:	f000 f841 	bl	8009f24 <__malloc_unlock>
 8009ea2:	f104 000b 	add.w	r0, r4, #11
 8009ea6:	1d23      	adds	r3, r4, #4
 8009ea8:	f020 0007 	bic.w	r0, r0, #7
 8009eac:	1ac2      	subs	r2, r0, r3
 8009eae:	bf1c      	itt	ne
 8009eb0:	1a1b      	subne	r3, r3, r0
 8009eb2:	50a3      	strne	r3, [r4, r2]
 8009eb4:	e7af      	b.n	8009e16 <_malloc_r+0x22>
 8009eb6:	6862      	ldr	r2, [r4, #4]
 8009eb8:	42a3      	cmp	r3, r4
 8009eba:	bf0c      	ite	eq
 8009ebc:	f8c8 2000 	streq.w	r2, [r8]
 8009ec0:	605a      	strne	r2, [r3, #4]
 8009ec2:	e7eb      	b.n	8009e9c <_malloc_r+0xa8>
 8009ec4:	4623      	mov	r3, r4
 8009ec6:	6864      	ldr	r4, [r4, #4]
 8009ec8:	e7ae      	b.n	8009e28 <_malloc_r+0x34>
 8009eca:	463c      	mov	r4, r7
 8009ecc:	687f      	ldr	r7, [r7, #4]
 8009ece:	e7b6      	b.n	8009e3e <_malloc_r+0x4a>
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	42a3      	cmp	r3, r4
 8009ed6:	d1fb      	bne.n	8009ed0 <_malloc_r+0xdc>
 8009ed8:	2300      	movs	r3, #0
 8009eda:	6053      	str	r3, [r2, #4]
 8009edc:	e7de      	b.n	8009e9c <_malloc_r+0xa8>
 8009ede:	230c      	movs	r3, #12
 8009ee0:	6033      	str	r3, [r6, #0]
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	f000 f81e 	bl	8009f24 <__malloc_unlock>
 8009ee8:	e794      	b.n	8009e14 <_malloc_r+0x20>
 8009eea:	6005      	str	r5, [r0, #0]
 8009eec:	e7d6      	b.n	8009e9c <_malloc_r+0xa8>
 8009eee:	bf00      	nop
 8009ef0:	20000aac 	.word	0x20000aac

08009ef4 <__ascii_mbtowc>:
 8009ef4:	b082      	sub	sp, #8
 8009ef6:	b901      	cbnz	r1, 8009efa <__ascii_mbtowc+0x6>
 8009ef8:	a901      	add	r1, sp, #4
 8009efa:	b142      	cbz	r2, 8009f0e <__ascii_mbtowc+0x1a>
 8009efc:	b14b      	cbz	r3, 8009f12 <__ascii_mbtowc+0x1e>
 8009efe:	7813      	ldrb	r3, [r2, #0]
 8009f00:	600b      	str	r3, [r1, #0]
 8009f02:	7812      	ldrb	r2, [r2, #0]
 8009f04:	1e10      	subs	r0, r2, #0
 8009f06:	bf18      	it	ne
 8009f08:	2001      	movne	r0, #1
 8009f0a:	b002      	add	sp, #8
 8009f0c:	4770      	bx	lr
 8009f0e:	4610      	mov	r0, r2
 8009f10:	e7fb      	b.n	8009f0a <__ascii_mbtowc+0x16>
 8009f12:	f06f 0001 	mvn.w	r0, #1
 8009f16:	e7f8      	b.n	8009f0a <__ascii_mbtowc+0x16>

08009f18 <__malloc_lock>:
 8009f18:	4801      	ldr	r0, [pc, #4]	@ (8009f20 <__malloc_lock+0x8>)
 8009f1a:	f7ff bbac 	b.w	8009676 <__retarget_lock_acquire_recursive>
 8009f1e:	bf00      	nop
 8009f20:	20000aa4 	.word	0x20000aa4

08009f24 <__malloc_unlock>:
 8009f24:	4801      	ldr	r0, [pc, #4]	@ (8009f2c <__malloc_unlock+0x8>)
 8009f26:	f7ff bba7 	b.w	8009678 <__retarget_lock_release_recursive>
 8009f2a:	bf00      	nop
 8009f2c:	20000aa4 	.word	0x20000aa4

08009f30 <_Balloc>:
 8009f30:	b570      	push	{r4, r5, r6, lr}
 8009f32:	69c6      	ldr	r6, [r0, #28]
 8009f34:	4604      	mov	r4, r0
 8009f36:	460d      	mov	r5, r1
 8009f38:	b976      	cbnz	r6, 8009f58 <_Balloc+0x28>
 8009f3a:	2010      	movs	r0, #16
 8009f3c:	f001 f8ec 	bl	800b118 <malloc>
 8009f40:	4602      	mov	r2, r0
 8009f42:	61e0      	str	r0, [r4, #28]
 8009f44:	b920      	cbnz	r0, 8009f50 <_Balloc+0x20>
 8009f46:	4b18      	ldr	r3, [pc, #96]	@ (8009fa8 <_Balloc+0x78>)
 8009f48:	4818      	ldr	r0, [pc, #96]	@ (8009fac <_Balloc+0x7c>)
 8009f4a:	216b      	movs	r1, #107	@ 0x6b
 8009f4c:	f001 f8b2 	bl	800b0b4 <__assert_func>
 8009f50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f54:	6006      	str	r6, [r0, #0]
 8009f56:	60c6      	str	r6, [r0, #12]
 8009f58:	69e6      	ldr	r6, [r4, #28]
 8009f5a:	68f3      	ldr	r3, [r6, #12]
 8009f5c:	b183      	cbz	r3, 8009f80 <_Balloc+0x50>
 8009f5e:	69e3      	ldr	r3, [r4, #28]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f66:	b9b8      	cbnz	r0, 8009f98 <_Balloc+0x68>
 8009f68:	2101      	movs	r1, #1
 8009f6a:	fa01 f605 	lsl.w	r6, r1, r5
 8009f6e:	1d72      	adds	r2, r6, #5
 8009f70:	0092      	lsls	r2, r2, #2
 8009f72:	4620      	mov	r0, r4
 8009f74:	f001 f8bc 	bl	800b0f0 <_calloc_r>
 8009f78:	b160      	cbz	r0, 8009f94 <_Balloc+0x64>
 8009f7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f7e:	e00e      	b.n	8009f9e <_Balloc+0x6e>
 8009f80:	2221      	movs	r2, #33	@ 0x21
 8009f82:	2104      	movs	r1, #4
 8009f84:	4620      	mov	r0, r4
 8009f86:	f001 f8b3 	bl	800b0f0 <_calloc_r>
 8009f8a:	69e3      	ldr	r3, [r4, #28]
 8009f8c:	60f0      	str	r0, [r6, #12]
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d1e4      	bne.n	8009f5e <_Balloc+0x2e>
 8009f94:	2000      	movs	r0, #0
 8009f96:	bd70      	pop	{r4, r5, r6, pc}
 8009f98:	6802      	ldr	r2, [r0, #0]
 8009f9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009fa4:	e7f7      	b.n	8009f96 <_Balloc+0x66>
 8009fa6:	bf00      	nop
 8009fa8:	0800b307 	.word	0x0800b307
 8009fac:	0800b31e 	.word	0x0800b31e

08009fb0 <_Bfree>:
 8009fb0:	b570      	push	{r4, r5, r6, lr}
 8009fb2:	69c6      	ldr	r6, [r0, #28]
 8009fb4:	4605      	mov	r5, r0
 8009fb6:	460c      	mov	r4, r1
 8009fb8:	b976      	cbnz	r6, 8009fd8 <_Bfree+0x28>
 8009fba:	2010      	movs	r0, #16
 8009fbc:	f001 f8ac 	bl	800b118 <malloc>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	61e8      	str	r0, [r5, #28]
 8009fc4:	b920      	cbnz	r0, 8009fd0 <_Bfree+0x20>
 8009fc6:	4b09      	ldr	r3, [pc, #36]	@ (8009fec <_Bfree+0x3c>)
 8009fc8:	4809      	ldr	r0, [pc, #36]	@ (8009ff0 <_Bfree+0x40>)
 8009fca:	218f      	movs	r1, #143	@ 0x8f
 8009fcc:	f001 f872 	bl	800b0b4 <__assert_func>
 8009fd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fd4:	6006      	str	r6, [r0, #0]
 8009fd6:	60c6      	str	r6, [r0, #12]
 8009fd8:	b13c      	cbz	r4, 8009fea <_Bfree+0x3a>
 8009fda:	69eb      	ldr	r3, [r5, #28]
 8009fdc:	6862      	ldr	r2, [r4, #4]
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009fe4:	6021      	str	r1, [r4, #0]
 8009fe6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009fea:	bd70      	pop	{r4, r5, r6, pc}
 8009fec:	0800b307 	.word	0x0800b307
 8009ff0:	0800b31e 	.word	0x0800b31e

08009ff4 <__multadd>:
 8009ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ff8:	690d      	ldr	r5, [r1, #16]
 8009ffa:	4607      	mov	r7, r0
 8009ffc:	460c      	mov	r4, r1
 8009ffe:	461e      	mov	r6, r3
 800a000:	f101 0c14 	add.w	ip, r1, #20
 800a004:	2000      	movs	r0, #0
 800a006:	f8dc 3000 	ldr.w	r3, [ip]
 800a00a:	b299      	uxth	r1, r3
 800a00c:	fb02 6101 	mla	r1, r2, r1, r6
 800a010:	0c1e      	lsrs	r6, r3, #16
 800a012:	0c0b      	lsrs	r3, r1, #16
 800a014:	fb02 3306 	mla	r3, r2, r6, r3
 800a018:	b289      	uxth	r1, r1
 800a01a:	3001      	adds	r0, #1
 800a01c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a020:	4285      	cmp	r5, r0
 800a022:	f84c 1b04 	str.w	r1, [ip], #4
 800a026:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a02a:	dcec      	bgt.n	800a006 <__multadd+0x12>
 800a02c:	b30e      	cbz	r6, 800a072 <__multadd+0x7e>
 800a02e:	68a3      	ldr	r3, [r4, #8]
 800a030:	42ab      	cmp	r3, r5
 800a032:	dc19      	bgt.n	800a068 <__multadd+0x74>
 800a034:	6861      	ldr	r1, [r4, #4]
 800a036:	4638      	mov	r0, r7
 800a038:	3101      	adds	r1, #1
 800a03a:	f7ff ff79 	bl	8009f30 <_Balloc>
 800a03e:	4680      	mov	r8, r0
 800a040:	b928      	cbnz	r0, 800a04e <__multadd+0x5a>
 800a042:	4602      	mov	r2, r0
 800a044:	4b0c      	ldr	r3, [pc, #48]	@ (800a078 <__multadd+0x84>)
 800a046:	480d      	ldr	r0, [pc, #52]	@ (800a07c <__multadd+0x88>)
 800a048:	21ba      	movs	r1, #186	@ 0xba
 800a04a:	f001 f833 	bl	800b0b4 <__assert_func>
 800a04e:	6922      	ldr	r2, [r4, #16]
 800a050:	3202      	adds	r2, #2
 800a052:	f104 010c 	add.w	r1, r4, #12
 800a056:	0092      	lsls	r2, r2, #2
 800a058:	300c      	adds	r0, #12
 800a05a:	f7ff fb0e 	bl	800967a <memcpy>
 800a05e:	4621      	mov	r1, r4
 800a060:	4638      	mov	r0, r7
 800a062:	f7ff ffa5 	bl	8009fb0 <_Bfree>
 800a066:	4644      	mov	r4, r8
 800a068:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a06c:	3501      	adds	r5, #1
 800a06e:	615e      	str	r6, [r3, #20]
 800a070:	6125      	str	r5, [r4, #16]
 800a072:	4620      	mov	r0, r4
 800a074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a078:	0800b296 	.word	0x0800b296
 800a07c:	0800b31e 	.word	0x0800b31e

0800a080 <__s2b>:
 800a080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a084:	460c      	mov	r4, r1
 800a086:	4615      	mov	r5, r2
 800a088:	461f      	mov	r7, r3
 800a08a:	2209      	movs	r2, #9
 800a08c:	3308      	adds	r3, #8
 800a08e:	4606      	mov	r6, r0
 800a090:	fb93 f3f2 	sdiv	r3, r3, r2
 800a094:	2100      	movs	r1, #0
 800a096:	2201      	movs	r2, #1
 800a098:	429a      	cmp	r2, r3
 800a09a:	db09      	blt.n	800a0b0 <__s2b+0x30>
 800a09c:	4630      	mov	r0, r6
 800a09e:	f7ff ff47 	bl	8009f30 <_Balloc>
 800a0a2:	b940      	cbnz	r0, 800a0b6 <__s2b+0x36>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	4b19      	ldr	r3, [pc, #100]	@ (800a10c <__s2b+0x8c>)
 800a0a8:	4819      	ldr	r0, [pc, #100]	@ (800a110 <__s2b+0x90>)
 800a0aa:	21d3      	movs	r1, #211	@ 0xd3
 800a0ac:	f001 f802 	bl	800b0b4 <__assert_func>
 800a0b0:	0052      	lsls	r2, r2, #1
 800a0b2:	3101      	adds	r1, #1
 800a0b4:	e7f0      	b.n	800a098 <__s2b+0x18>
 800a0b6:	9b08      	ldr	r3, [sp, #32]
 800a0b8:	6143      	str	r3, [r0, #20]
 800a0ba:	2d09      	cmp	r5, #9
 800a0bc:	f04f 0301 	mov.w	r3, #1
 800a0c0:	6103      	str	r3, [r0, #16]
 800a0c2:	dd16      	ble.n	800a0f2 <__s2b+0x72>
 800a0c4:	f104 0909 	add.w	r9, r4, #9
 800a0c8:	46c8      	mov	r8, r9
 800a0ca:	442c      	add	r4, r5
 800a0cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a0d0:	4601      	mov	r1, r0
 800a0d2:	3b30      	subs	r3, #48	@ 0x30
 800a0d4:	220a      	movs	r2, #10
 800a0d6:	4630      	mov	r0, r6
 800a0d8:	f7ff ff8c 	bl	8009ff4 <__multadd>
 800a0dc:	45a0      	cmp	r8, r4
 800a0de:	d1f5      	bne.n	800a0cc <__s2b+0x4c>
 800a0e0:	f1a5 0408 	sub.w	r4, r5, #8
 800a0e4:	444c      	add	r4, r9
 800a0e6:	1b2d      	subs	r5, r5, r4
 800a0e8:	1963      	adds	r3, r4, r5
 800a0ea:	42bb      	cmp	r3, r7
 800a0ec:	db04      	blt.n	800a0f8 <__s2b+0x78>
 800a0ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0f2:	340a      	adds	r4, #10
 800a0f4:	2509      	movs	r5, #9
 800a0f6:	e7f6      	b.n	800a0e6 <__s2b+0x66>
 800a0f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a0fc:	4601      	mov	r1, r0
 800a0fe:	3b30      	subs	r3, #48	@ 0x30
 800a100:	220a      	movs	r2, #10
 800a102:	4630      	mov	r0, r6
 800a104:	f7ff ff76 	bl	8009ff4 <__multadd>
 800a108:	e7ee      	b.n	800a0e8 <__s2b+0x68>
 800a10a:	bf00      	nop
 800a10c:	0800b296 	.word	0x0800b296
 800a110:	0800b31e 	.word	0x0800b31e

0800a114 <__hi0bits>:
 800a114:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a118:	4603      	mov	r3, r0
 800a11a:	bf36      	itet	cc
 800a11c:	0403      	lslcc	r3, r0, #16
 800a11e:	2000      	movcs	r0, #0
 800a120:	2010      	movcc	r0, #16
 800a122:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a126:	bf3c      	itt	cc
 800a128:	021b      	lslcc	r3, r3, #8
 800a12a:	3008      	addcc	r0, #8
 800a12c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a130:	bf3c      	itt	cc
 800a132:	011b      	lslcc	r3, r3, #4
 800a134:	3004      	addcc	r0, #4
 800a136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a13a:	bf3c      	itt	cc
 800a13c:	009b      	lslcc	r3, r3, #2
 800a13e:	3002      	addcc	r0, #2
 800a140:	2b00      	cmp	r3, #0
 800a142:	db05      	blt.n	800a150 <__hi0bits+0x3c>
 800a144:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a148:	f100 0001 	add.w	r0, r0, #1
 800a14c:	bf08      	it	eq
 800a14e:	2020      	moveq	r0, #32
 800a150:	4770      	bx	lr

0800a152 <__lo0bits>:
 800a152:	6803      	ldr	r3, [r0, #0]
 800a154:	4602      	mov	r2, r0
 800a156:	f013 0007 	ands.w	r0, r3, #7
 800a15a:	d00b      	beq.n	800a174 <__lo0bits+0x22>
 800a15c:	07d9      	lsls	r1, r3, #31
 800a15e:	d421      	bmi.n	800a1a4 <__lo0bits+0x52>
 800a160:	0798      	lsls	r0, r3, #30
 800a162:	bf49      	itett	mi
 800a164:	085b      	lsrmi	r3, r3, #1
 800a166:	089b      	lsrpl	r3, r3, #2
 800a168:	2001      	movmi	r0, #1
 800a16a:	6013      	strmi	r3, [r2, #0]
 800a16c:	bf5c      	itt	pl
 800a16e:	6013      	strpl	r3, [r2, #0]
 800a170:	2002      	movpl	r0, #2
 800a172:	4770      	bx	lr
 800a174:	b299      	uxth	r1, r3
 800a176:	b909      	cbnz	r1, 800a17c <__lo0bits+0x2a>
 800a178:	0c1b      	lsrs	r3, r3, #16
 800a17a:	2010      	movs	r0, #16
 800a17c:	b2d9      	uxtb	r1, r3
 800a17e:	b909      	cbnz	r1, 800a184 <__lo0bits+0x32>
 800a180:	3008      	adds	r0, #8
 800a182:	0a1b      	lsrs	r3, r3, #8
 800a184:	0719      	lsls	r1, r3, #28
 800a186:	bf04      	itt	eq
 800a188:	091b      	lsreq	r3, r3, #4
 800a18a:	3004      	addeq	r0, #4
 800a18c:	0799      	lsls	r1, r3, #30
 800a18e:	bf04      	itt	eq
 800a190:	089b      	lsreq	r3, r3, #2
 800a192:	3002      	addeq	r0, #2
 800a194:	07d9      	lsls	r1, r3, #31
 800a196:	d403      	bmi.n	800a1a0 <__lo0bits+0x4e>
 800a198:	085b      	lsrs	r3, r3, #1
 800a19a:	f100 0001 	add.w	r0, r0, #1
 800a19e:	d003      	beq.n	800a1a8 <__lo0bits+0x56>
 800a1a0:	6013      	str	r3, [r2, #0]
 800a1a2:	4770      	bx	lr
 800a1a4:	2000      	movs	r0, #0
 800a1a6:	4770      	bx	lr
 800a1a8:	2020      	movs	r0, #32
 800a1aa:	4770      	bx	lr

0800a1ac <__i2b>:
 800a1ac:	b510      	push	{r4, lr}
 800a1ae:	460c      	mov	r4, r1
 800a1b0:	2101      	movs	r1, #1
 800a1b2:	f7ff febd 	bl	8009f30 <_Balloc>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	b928      	cbnz	r0, 800a1c6 <__i2b+0x1a>
 800a1ba:	4b05      	ldr	r3, [pc, #20]	@ (800a1d0 <__i2b+0x24>)
 800a1bc:	4805      	ldr	r0, [pc, #20]	@ (800a1d4 <__i2b+0x28>)
 800a1be:	f240 1145 	movw	r1, #325	@ 0x145
 800a1c2:	f000 ff77 	bl	800b0b4 <__assert_func>
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	6144      	str	r4, [r0, #20]
 800a1ca:	6103      	str	r3, [r0, #16]
 800a1cc:	bd10      	pop	{r4, pc}
 800a1ce:	bf00      	nop
 800a1d0:	0800b296 	.word	0x0800b296
 800a1d4:	0800b31e 	.word	0x0800b31e

0800a1d8 <__multiply>:
 800a1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1dc:	4617      	mov	r7, r2
 800a1de:	690a      	ldr	r2, [r1, #16]
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	bfa8      	it	ge
 800a1e6:	463b      	movge	r3, r7
 800a1e8:	4689      	mov	r9, r1
 800a1ea:	bfa4      	itt	ge
 800a1ec:	460f      	movge	r7, r1
 800a1ee:	4699      	movge	r9, r3
 800a1f0:	693d      	ldr	r5, [r7, #16]
 800a1f2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	6879      	ldr	r1, [r7, #4]
 800a1fa:	eb05 060a 	add.w	r6, r5, sl
 800a1fe:	42b3      	cmp	r3, r6
 800a200:	b085      	sub	sp, #20
 800a202:	bfb8      	it	lt
 800a204:	3101      	addlt	r1, #1
 800a206:	f7ff fe93 	bl	8009f30 <_Balloc>
 800a20a:	b930      	cbnz	r0, 800a21a <__multiply+0x42>
 800a20c:	4602      	mov	r2, r0
 800a20e:	4b41      	ldr	r3, [pc, #260]	@ (800a314 <__multiply+0x13c>)
 800a210:	4841      	ldr	r0, [pc, #260]	@ (800a318 <__multiply+0x140>)
 800a212:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a216:	f000 ff4d 	bl	800b0b4 <__assert_func>
 800a21a:	f100 0414 	add.w	r4, r0, #20
 800a21e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a222:	4623      	mov	r3, r4
 800a224:	2200      	movs	r2, #0
 800a226:	4573      	cmp	r3, lr
 800a228:	d320      	bcc.n	800a26c <__multiply+0x94>
 800a22a:	f107 0814 	add.w	r8, r7, #20
 800a22e:	f109 0114 	add.w	r1, r9, #20
 800a232:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a236:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a23a:	9302      	str	r3, [sp, #8]
 800a23c:	1beb      	subs	r3, r5, r7
 800a23e:	3b15      	subs	r3, #21
 800a240:	f023 0303 	bic.w	r3, r3, #3
 800a244:	3304      	adds	r3, #4
 800a246:	3715      	adds	r7, #21
 800a248:	42bd      	cmp	r5, r7
 800a24a:	bf38      	it	cc
 800a24c:	2304      	movcc	r3, #4
 800a24e:	9301      	str	r3, [sp, #4]
 800a250:	9b02      	ldr	r3, [sp, #8]
 800a252:	9103      	str	r1, [sp, #12]
 800a254:	428b      	cmp	r3, r1
 800a256:	d80c      	bhi.n	800a272 <__multiply+0x9a>
 800a258:	2e00      	cmp	r6, #0
 800a25a:	dd03      	ble.n	800a264 <__multiply+0x8c>
 800a25c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a260:	2b00      	cmp	r3, #0
 800a262:	d055      	beq.n	800a310 <__multiply+0x138>
 800a264:	6106      	str	r6, [r0, #16]
 800a266:	b005      	add	sp, #20
 800a268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26c:	f843 2b04 	str.w	r2, [r3], #4
 800a270:	e7d9      	b.n	800a226 <__multiply+0x4e>
 800a272:	f8b1 a000 	ldrh.w	sl, [r1]
 800a276:	f1ba 0f00 	cmp.w	sl, #0
 800a27a:	d01f      	beq.n	800a2bc <__multiply+0xe4>
 800a27c:	46c4      	mov	ip, r8
 800a27e:	46a1      	mov	r9, r4
 800a280:	2700      	movs	r7, #0
 800a282:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a286:	f8d9 3000 	ldr.w	r3, [r9]
 800a28a:	fa1f fb82 	uxth.w	fp, r2
 800a28e:	b29b      	uxth	r3, r3
 800a290:	fb0a 330b 	mla	r3, sl, fp, r3
 800a294:	443b      	add	r3, r7
 800a296:	f8d9 7000 	ldr.w	r7, [r9]
 800a29a:	0c12      	lsrs	r2, r2, #16
 800a29c:	0c3f      	lsrs	r7, r7, #16
 800a29e:	fb0a 7202 	mla	r2, sl, r2, r7
 800a2a2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2ac:	4565      	cmp	r5, ip
 800a2ae:	f849 3b04 	str.w	r3, [r9], #4
 800a2b2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a2b6:	d8e4      	bhi.n	800a282 <__multiply+0xaa>
 800a2b8:	9b01      	ldr	r3, [sp, #4]
 800a2ba:	50e7      	str	r7, [r4, r3]
 800a2bc:	9b03      	ldr	r3, [sp, #12]
 800a2be:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a2c2:	3104      	adds	r1, #4
 800a2c4:	f1b9 0f00 	cmp.w	r9, #0
 800a2c8:	d020      	beq.n	800a30c <__multiply+0x134>
 800a2ca:	6823      	ldr	r3, [r4, #0]
 800a2cc:	4647      	mov	r7, r8
 800a2ce:	46a4      	mov	ip, r4
 800a2d0:	f04f 0a00 	mov.w	sl, #0
 800a2d4:	f8b7 b000 	ldrh.w	fp, [r7]
 800a2d8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a2dc:	fb09 220b 	mla	r2, r9, fp, r2
 800a2e0:	4452      	add	r2, sl
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2e8:	f84c 3b04 	str.w	r3, [ip], #4
 800a2ec:	f857 3b04 	ldr.w	r3, [r7], #4
 800a2f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a2f4:	f8bc 3000 	ldrh.w	r3, [ip]
 800a2f8:	fb09 330a 	mla	r3, r9, sl, r3
 800a2fc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a300:	42bd      	cmp	r5, r7
 800a302:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a306:	d8e5      	bhi.n	800a2d4 <__multiply+0xfc>
 800a308:	9a01      	ldr	r2, [sp, #4]
 800a30a:	50a3      	str	r3, [r4, r2]
 800a30c:	3404      	adds	r4, #4
 800a30e:	e79f      	b.n	800a250 <__multiply+0x78>
 800a310:	3e01      	subs	r6, #1
 800a312:	e7a1      	b.n	800a258 <__multiply+0x80>
 800a314:	0800b296 	.word	0x0800b296
 800a318:	0800b31e 	.word	0x0800b31e

0800a31c <__pow5mult>:
 800a31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a320:	4615      	mov	r5, r2
 800a322:	f012 0203 	ands.w	r2, r2, #3
 800a326:	4607      	mov	r7, r0
 800a328:	460e      	mov	r6, r1
 800a32a:	d007      	beq.n	800a33c <__pow5mult+0x20>
 800a32c:	4c25      	ldr	r4, [pc, #148]	@ (800a3c4 <__pow5mult+0xa8>)
 800a32e:	3a01      	subs	r2, #1
 800a330:	2300      	movs	r3, #0
 800a332:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a336:	f7ff fe5d 	bl	8009ff4 <__multadd>
 800a33a:	4606      	mov	r6, r0
 800a33c:	10ad      	asrs	r5, r5, #2
 800a33e:	d03d      	beq.n	800a3bc <__pow5mult+0xa0>
 800a340:	69fc      	ldr	r4, [r7, #28]
 800a342:	b97c      	cbnz	r4, 800a364 <__pow5mult+0x48>
 800a344:	2010      	movs	r0, #16
 800a346:	f000 fee7 	bl	800b118 <malloc>
 800a34a:	4602      	mov	r2, r0
 800a34c:	61f8      	str	r0, [r7, #28]
 800a34e:	b928      	cbnz	r0, 800a35c <__pow5mult+0x40>
 800a350:	4b1d      	ldr	r3, [pc, #116]	@ (800a3c8 <__pow5mult+0xac>)
 800a352:	481e      	ldr	r0, [pc, #120]	@ (800a3cc <__pow5mult+0xb0>)
 800a354:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a358:	f000 feac 	bl	800b0b4 <__assert_func>
 800a35c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a360:	6004      	str	r4, [r0, #0]
 800a362:	60c4      	str	r4, [r0, #12]
 800a364:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a368:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a36c:	b94c      	cbnz	r4, 800a382 <__pow5mult+0x66>
 800a36e:	f240 2171 	movw	r1, #625	@ 0x271
 800a372:	4638      	mov	r0, r7
 800a374:	f7ff ff1a 	bl	800a1ac <__i2b>
 800a378:	2300      	movs	r3, #0
 800a37a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a37e:	4604      	mov	r4, r0
 800a380:	6003      	str	r3, [r0, #0]
 800a382:	f04f 0900 	mov.w	r9, #0
 800a386:	07eb      	lsls	r3, r5, #31
 800a388:	d50a      	bpl.n	800a3a0 <__pow5mult+0x84>
 800a38a:	4631      	mov	r1, r6
 800a38c:	4622      	mov	r2, r4
 800a38e:	4638      	mov	r0, r7
 800a390:	f7ff ff22 	bl	800a1d8 <__multiply>
 800a394:	4631      	mov	r1, r6
 800a396:	4680      	mov	r8, r0
 800a398:	4638      	mov	r0, r7
 800a39a:	f7ff fe09 	bl	8009fb0 <_Bfree>
 800a39e:	4646      	mov	r6, r8
 800a3a0:	106d      	asrs	r5, r5, #1
 800a3a2:	d00b      	beq.n	800a3bc <__pow5mult+0xa0>
 800a3a4:	6820      	ldr	r0, [r4, #0]
 800a3a6:	b938      	cbnz	r0, 800a3b8 <__pow5mult+0x9c>
 800a3a8:	4622      	mov	r2, r4
 800a3aa:	4621      	mov	r1, r4
 800a3ac:	4638      	mov	r0, r7
 800a3ae:	f7ff ff13 	bl	800a1d8 <__multiply>
 800a3b2:	6020      	str	r0, [r4, #0]
 800a3b4:	f8c0 9000 	str.w	r9, [r0]
 800a3b8:	4604      	mov	r4, r0
 800a3ba:	e7e4      	b.n	800a386 <__pow5mult+0x6a>
 800a3bc:	4630      	mov	r0, r6
 800a3be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3c2:	bf00      	nop
 800a3c4:	0800b438 	.word	0x0800b438
 800a3c8:	0800b307 	.word	0x0800b307
 800a3cc:	0800b31e 	.word	0x0800b31e

0800a3d0 <__lshift>:
 800a3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3d4:	460c      	mov	r4, r1
 800a3d6:	6849      	ldr	r1, [r1, #4]
 800a3d8:	6923      	ldr	r3, [r4, #16]
 800a3da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a3de:	68a3      	ldr	r3, [r4, #8]
 800a3e0:	4607      	mov	r7, r0
 800a3e2:	4691      	mov	r9, r2
 800a3e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a3e8:	f108 0601 	add.w	r6, r8, #1
 800a3ec:	42b3      	cmp	r3, r6
 800a3ee:	db0b      	blt.n	800a408 <__lshift+0x38>
 800a3f0:	4638      	mov	r0, r7
 800a3f2:	f7ff fd9d 	bl	8009f30 <_Balloc>
 800a3f6:	4605      	mov	r5, r0
 800a3f8:	b948      	cbnz	r0, 800a40e <__lshift+0x3e>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	4b28      	ldr	r3, [pc, #160]	@ (800a4a0 <__lshift+0xd0>)
 800a3fe:	4829      	ldr	r0, [pc, #164]	@ (800a4a4 <__lshift+0xd4>)
 800a400:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a404:	f000 fe56 	bl	800b0b4 <__assert_func>
 800a408:	3101      	adds	r1, #1
 800a40a:	005b      	lsls	r3, r3, #1
 800a40c:	e7ee      	b.n	800a3ec <__lshift+0x1c>
 800a40e:	2300      	movs	r3, #0
 800a410:	f100 0114 	add.w	r1, r0, #20
 800a414:	f100 0210 	add.w	r2, r0, #16
 800a418:	4618      	mov	r0, r3
 800a41a:	4553      	cmp	r3, sl
 800a41c:	db33      	blt.n	800a486 <__lshift+0xb6>
 800a41e:	6920      	ldr	r0, [r4, #16]
 800a420:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a424:	f104 0314 	add.w	r3, r4, #20
 800a428:	f019 091f 	ands.w	r9, r9, #31
 800a42c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a430:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a434:	d02b      	beq.n	800a48e <__lshift+0xbe>
 800a436:	f1c9 0e20 	rsb	lr, r9, #32
 800a43a:	468a      	mov	sl, r1
 800a43c:	2200      	movs	r2, #0
 800a43e:	6818      	ldr	r0, [r3, #0]
 800a440:	fa00 f009 	lsl.w	r0, r0, r9
 800a444:	4310      	orrs	r0, r2
 800a446:	f84a 0b04 	str.w	r0, [sl], #4
 800a44a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a44e:	459c      	cmp	ip, r3
 800a450:	fa22 f20e 	lsr.w	r2, r2, lr
 800a454:	d8f3      	bhi.n	800a43e <__lshift+0x6e>
 800a456:	ebac 0304 	sub.w	r3, ip, r4
 800a45a:	3b15      	subs	r3, #21
 800a45c:	f023 0303 	bic.w	r3, r3, #3
 800a460:	3304      	adds	r3, #4
 800a462:	f104 0015 	add.w	r0, r4, #21
 800a466:	4560      	cmp	r0, ip
 800a468:	bf88      	it	hi
 800a46a:	2304      	movhi	r3, #4
 800a46c:	50ca      	str	r2, [r1, r3]
 800a46e:	b10a      	cbz	r2, 800a474 <__lshift+0xa4>
 800a470:	f108 0602 	add.w	r6, r8, #2
 800a474:	3e01      	subs	r6, #1
 800a476:	4638      	mov	r0, r7
 800a478:	612e      	str	r6, [r5, #16]
 800a47a:	4621      	mov	r1, r4
 800a47c:	f7ff fd98 	bl	8009fb0 <_Bfree>
 800a480:	4628      	mov	r0, r5
 800a482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a486:	f842 0f04 	str.w	r0, [r2, #4]!
 800a48a:	3301      	adds	r3, #1
 800a48c:	e7c5      	b.n	800a41a <__lshift+0x4a>
 800a48e:	3904      	subs	r1, #4
 800a490:	f853 2b04 	ldr.w	r2, [r3], #4
 800a494:	f841 2f04 	str.w	r2, [r1, #4]!
 800a498:	459c      	cmp	ip, r3
 800a49a:	d8f9      	bhi.n	800a490 <__lshift+0xc0>
 800a49c:	e7ea      	b.n	800a474 <__lshift+0xa4>
 800a49e:	bf00      	nop
 800a4a0:	0800b296 	.word	0x0800b296
 800a4a4:	0800b31e 	.word	0x0800b31e

0800a4a8 <__mcmp>:
 800a4a8:	690a      	ldr	r2, [r1, #16]
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	6900      	ldr	r0, [r0, #16]
 800a4ae:	1a80      	subs	r0, r0, r2
 800a4b0:	b530      	push	{r4, r5, lr}
 800a4b2:	d10e      	bne.n	800a4d2 <__mcmp+0x2a>
 800a4b4:	3314      	adds	r3, #20
 800a4b6:	3114      	adds	r1, #20
 800a4b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a4bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a4c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a4c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a4c8:	4295      	cmp	r5, r2
 800a4ca:	d003      	beq.n	800a4d4 <__mcmp+0x2c>
 800a4cc:	d205      	bcs.n	800a4da <__mcmp+0x32>
 800a4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d2:	bd30      	pop	{r4, r5, pc}
 800a4d4:	42a3      	cmp	r3, r4
 800a4d6:	d3f3      	bcc.n	800a4c0 <__mcmp+0x18>
 800a4d8:	e7fb      	b.n	800a4d2 <__mcmp+0x2a>
 800a4da:	2001      	movs	r0, #1
 800a4dc:	e7f9      	b.n	800a4d2 <__mcmp+0x2a>
	...

0800a4e0 <__mdiff>:
 800a4e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e4:	4689      	mov	r9, r1
 800a4e6:	4606      	mov	r6, r0
 800a4e8:	4611      	mov	r1, r2
 800a4ea:	4648      	mov	r0, r9
 800a4ec:	4614      	mov	r4, r2
 800a4ee:	f7ff ffdb 	bl	800a4a8 <__mcmp>
 800a4f2:	1e05      	subs	r5, r0, #0
 800a4f4:	d112      	bne.n	800a51c <__mdiff+0x3c>
 800a4f6:	4629      	mov	r1, r5
 800a4f8:	4630      	mov	r0, r6
 800a4fa:	f7ff fd19 	bl	8009f30 <_Balloc>
 800a4fe:	4602      	mov	r2, r0
 800a500:	b928      	cbnz	r0, 800a50e <__mdiff+0x2e>
 800a502:	4b3f      	ldr	r3, [pc, #252]	@ (800a600 <__mdiff+0x120>)
 800a504:	f240 2137 	movw	r1, #567	@ 0x237
 800a508:	483e      	ldr	r0, [pc, #248]	@ (800a604 <__mdiff+0x124>)
 800a50a:	f000 fdd3 	bl	800b0b4 <__assert_func>
 800a50e:	2301      	movs	r3, #1
 800a510:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a514:	4610      	mov	r0, r2
 800a516:	b003      	add	sp, #12
 800a518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a51c:	bfbc      	itt	lt
 800a51e:	464b      	movlt	r3, r9
 800a520:	46a1      	movlt	r9, r4
 800a522:	4630      	mov	r0, r6
 800a524:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a528:	bfba      	itte	lt
 800a52a:	461c      	movlt	r4, r3
 800a52c:	2501      	movlt	r5, #1
 800a52e:	2500      	movge	r5, #0
 800a530:	f7ff fcfe 	bl	8009f30 <_Balloc>
 800a534:	4602      	mov	r2, r0
 800a536:	b918      	cbnz	r0, 800a540 <__mdiff+0x60>
 800a538:	4b31      	ldr	r3, [pc, #196]	@ (800a600 <__mdiff+0x120>)
 800a53a:	f240 2145 	movw	r1, #581	@ 0x245
 800a53e:	e7e3      	b.n	800a508 <__mdiff+0x28>
 800a540:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a544:	6926      	ldr	r6, [r4, #16]
 800a546:	60c5      	str	r5, [r0, #12]
 800a548:	f109 0310 	add.w	r3, r9, #16
 800a54c:	f109 0514 	add.w	r5, r9, #20
 800a550:	f104 0e14 	add.w	lr, r4, #20
 800a554:	f100 0b14 	add.w	fp, r0, #20
 800a558:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a55c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a560:	9301      	str	r3, [sp, #4]
 800a562:	46d9      	mov	r9, fp
 800a564:	f04f 0c00 	mov.w	ip, #0
 800a568:	9b01      	ldr	r3, [sp, #4]
 800a56a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a56e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a572:	9301      	str	r3, [sp, #4]
 800a574:	fa1f f38a 	uxth.w	r3, sl
 800a578:	4619      	mov	r1, r3
 800a57a:	b283      	uxth	r3, r0
 800a57c:	1acb      	subs	r3, r1, r3
 800a57e:	0c00      	lsrs	r0, r0, #16
 800a580:	4463      	add	r3, ip
 800a582:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a586:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a590:	4576      	cmp	r6, lr
 800a592:	f849 3b04 	str.w	r3, [r9], #4
 800a596:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a59a:	d8e5      	bhi.n	800a568 <__mdiff+0x88>
 800a59c:	1b33      	subs	r3, r6, r4
 800a59e:	3b15      	subs	r3, #21
 800a5a0:	f023 0303 	bic.w	r3, r3, #3
 800a5a4:	3415      	adds	r4, #21
 800a5a6:	3304      	adds	r3, #4
 800a5a8:	42a6      	cmp	r6, r4
 800a5aa:	bf38      	it	cc
 800a5ac:	2304      	movcc	r3, #4
 800a5ae:	441d      	add	r5, r3
 800a5b0:	445b      	add	r3, fp
 800a5b2:	461e      	mov	r6, r3
 800a5b4:	462c      	mov	r4, r5
 800a5b6:	4544      	cmp	r4, r8
 800a5b8:	d30e      	bcc.n	800a5d8 <__mdiff+0xf8>
 800a5ba:	f108 0103 	add.w	r1, r8, #3
 800a5be:	1b49      	subs	r1, r1, r5
 800a5c0:	f021 0103 	bic.w	r1, r1, #3
 800a5c4:	3d03      	subs	r5, #3
 800a5c6:	45a8      	cmp	r8, r5
 800a5c8:	bf38      	it	cc
 800a5ca:	2100      	movcc	r1, #0
 800a5cc:	440b      	add	r3, r1
 800a5ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a5d2:	b191      	cbz	r1, 800a5fa <__mdiff+0x11a>
 800a5d4:	6117      	str	r7, [r2, #16]
 800a5d6:	e79d      	b.n	800a514 <__mdiff+0x34>
 800a5d8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a5dc:	46e6      	mov	lr, ip
 800a5de:	0c08      	lsrs	r0, r1, #16
 800a5e0:	fa1c fc81 	uxtah	ip, ip, r1
 800a5e4:	4471      	add	r1, lr
 800a5e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a5ea:	b289      	uxth	r1, r1
 800a5ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a5f0:	f846 1b04 	str.w	r1, [r6], #4
 800a5f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a5f8:	e7dd      	b.n	800a5b6 <__mdiff+0xd6>
 800a5fa:	3f01      	subs	r7, #1
 800a5fc:	e7e7      	b.n	800a5ce <__mdiff+0xee>
 800a5fe:	bf00      	nop
 800a600:	0800b296 	.word	0x0800b296
 800a604:	0800b31e 	.word	0x0800b31e

0800a608 <__ulp>:
 800a608:	b082      	sub	sp, #8
 800a60a:	ed8d 0b00 	vstr	d0, [sp]
 800a60e:	9a01      	ldr	r2, [sp, #4]
 800a610:	4b0f      	ldr	r3, [pc, #60]	@ (800a650 <__ulp+0x48>)
 800a612:	4013      	ands	r3, r2
 800a614:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a618:	2b00      	cmp	r3, #0
 800a61a:	dc08      	bgt.n	800a62e <__ulp+0x26>
 800a61c:	425b      	negs	r3, r3
 800a61e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a622:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a626:	da04      	bge.n	800a632 <__ulp+0x2a>
 800a628:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a62c:	4113      	asrs	r3, r2
 800a62e:	2200      	movs	r2, #0
 800a630:	e008      	b.n	800a644 <__ulp+0x3c>
 800a632:	f1a2 0314 	sub.w	r3, r2, #20
 800a636:	2b1e      	cmp	r3, #30
 800a638:	bfda      	itte	le
 800a63a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a63e:	40da      	lsrle	r2, r3
 800a640:	2201      	movgt	r2, #1
 800a642:	2300      	movs	r3, #0
 800a644:	4619      	mov	r1, r3
 800a646:	4610      	mov	r0, r2
 800a648:	ec41 0b10 	vmov	d0, r0, r1
 800a64c:	b002      	add	sp, #8
 800a64e:	4770      	bx	lr
 800a650:	7ff00000 	.word	0x7ff00000

0800a654 <__b2d>:
 800a654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a658:	6906      	ldr	r6, [r0, #16]
 800a65a:	f100 0814 	add.w	r8, r0, #20
 800a65e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a662:	1f37      	subs	r7, r6, #4
 800a664:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a668:	4610      	mov	r0, r2
 800a66a:	f7ff fd53 	bl	800a114 <__hi0bits>
 800a66e:	f1c0 0320 	rsb	r3, r0, #32
 800a672:	280a      	cmp	r0, #10
 800a674:	600b      	str	r3, [r1, #0]
 800a676:	491b      	ldr	r1, [pc, #108]	@ (800a6e4 <__b2d+0x90>)
 800a678:	dc15      	bgt.n	800a6a6 <__b2d+0x52>
 800a67a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a67e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a682:	45b8      	cmp	r8, r7
 800a684:	ea43 0501 	orr.w	r5, r3, r1
 800a688:	bf34      	ite	cc
 800a68a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a68e:	2300      	movcs	r3, #0
 800a690:	3015      	adds	r0, #21
 800a692:	fa02 f000 	lsl.w	r0, r2, r0
 800a696:	fa23 f30c 	lsr.w	r3, r3, ip
 800a69a:	4303      	orrs	r3, r0
 800a69c:	461c      	mov	r4, r3
 800a69e:	ec45 4b10 	vmov	d0, r4, r5
 800a6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6a6:	45b8      	cmp	r8, r7
 800a6a8:	bf3a      	itte	cc
 800a6aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a6ae:	f1a6 0708 	subcc.w	r7, r6, #8
 800a6b2:	2300      	movcs	r3, #0
 800a6b4:	380b      	subs	r0, #11
 800a6b6:	d012      	beq.n	800a6de <__b2d+0x8a>
 800a6b8:	f1c0 0120 	rsb	r1, r0, #32
 800a6bc:	fa23 f401 	lsr.w	r4, r3, r1
 800a6c0:	4082      	lsls	r2, r0
 800a6c2:	4322      	orrs	r2, r4
 800a6c4:	4547      	cmp	r7, r8
 800a6c6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a6ca:	bf8c      	ite	hi
 800a6cc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a6d0:	2200      	movls	r2, #0
 800a6d2:	4083      	lsls	r3, r0
 800a6d4:	40ca      	lsrs	r2, r1
 800a6d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	e7de      	b.n	800a69c <__b2d+0x48>
 800a6de:	ea42 0501 	orr.w	r5, r2, r1
 800a6e2:	e7db      	b.n	800a69c <__b2d+0x48>
 800a6e4:	3ff00000 	.word	0x3ff00000

0800a6e8 <__d2b>:
 800a6e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a6ec:	460f      	mov	r7, r1
 800a6ee:	2101      	movs	r1, #1
 800a6f0:	ec59 8b10 	vmov	r8, r9, d0
 800a6f4:	4616      	mov	r6, r2
 800a6f6:	f7ff fc1b 	bl	8009f30 <_Balloc>
 800a6fa:	4604      	mov	r4, r0
 800a6fc:	b930      	cbnz	r0, 800a70c <__d2b+0x24>
 800a6fe:	4602      	mov	r2, r0
 800a700:	4b23      	ldr	r3, [pc, #140]	@ (800a790 <__d2b+0xa8>)
 800a702:	4824      	ldr	r0, [pc, #144]	@ (800a794 <__d2b+0xac>)
 800a704:	f240 310f 	movw	r1, #783	@ 0x30f
 800a708:	f000 fcd4 	bl	800b0b4 <__assert_func>
 800a70c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a710:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a714:	b10d      	cbz	r5, 800a71a <__d2b+0x32>
 800a716:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a71a:	9301      	str	r3, [sp, #4]
 800a71c:	f1b8 0300 	subs.w	r3, r8, #0
 800a720:	d023      	beq.n	800a76a <__d2b+0x82>
 800a722:	4668      	mov	r0, sp
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	f7ff fd14 	bl	800a152 <__lo0bits>
 800a72a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a72e:	b1d0      	cbz	r0, 800a766 <__d2b+0x7e>
 800a730:	f1c0 0320 	rsb	r3, r0, #32
 800a734:	fa02 f303 	lsl.w	r3, r2, r3
 800a738:	430b      	orrs	r3, r1
 800a73a:	40c2      	lsrs	r2, r0
 800a73c:	6163      	str	r3, [r4, #20]
 800a73e:	9201      	str	r2, [sp, #4]
 800a740:	9b01      	ldr	r3, [sp, #4]
 800a742:	61a3      	str	r3, [r4, #24]
 800a744:	2b00      	cmp	r3, #0
 800a746:	bf0c      	ite	eq
 800a748:	2201      	moveq	r2, #1
 800a74a:	2202      	movne	r2, #2
 800a74c:	6122      	str	r2, [r4, #16]
 800a74e:	b1a5      	cbz	r5, 800a77a <__d2b+0x92>
 800a750:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a754:	4405      	add	r5, r0
 800a756:	603d      	str	r5, [r7, #0]
 800a758:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a75c:	6030      	str	r0, [r6, #0]
 800a75e:	4620      	mov	r0, r4
 800a760:	b003      	add	sp, #12
 800a762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a766:	6161      	str	r1, [r4, #20]
 800a768:	e7ea      	b.n	800a740 <__d2b+0x58>
 800a76a:	a801      	add	r0, sp, #4
 800a76c:	f7ff fcf1 	bl	800a152 <__lo0bits>
 800a770:	9b01      	ldr	r3, [sp, #4]
 800a772:	6163      	str	r3, [r4, #20]
 800a774:	3020      	adds	r0, #32
 800a776:	2201      	movs	r2, #1
 800a778:	e7e8      	b.n	800a74c <__d2b+0x64>
 800a77a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a77e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a782:	6038      	str	r0, [r7, #0]
 800a784:	6918      	ldr	r0, [r3, #16]
 800a786:	f7ff fcc5 	bl	800a114 <__hi0bits>
 800a78a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a78e:	e7e5      	b.n	800a75c <__d2b+0x74>
 800a790:	0800b296 	.word	0x0800b296
 800a794:	0800b31e 	.word	0x0800b31e

0800a798 <__ratio>:
 800a798:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a79c:	4688      	mov	r8, r1
 800a79e:	4669      	mov	r1, sp
 800a7a0:	4681      	mov	r9, r0
 800a7a2:	f7ff ff57 	bl	800a654 <__b2d>
 800a7a6:	a901      	add	r1, sp, #4
 800a7a8:	4640      	mov	r0, r8
 800a7aa:	ec55 4b10 	vmov	r4, r5, d0
 800a7ae:	f7ff ff51 	bl	800a654 <__b2d>
 800a7b2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a7b6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800a7ba:	1ad2      	subs	r2, r2, r3
 800a7bc:	e9dd 3100 	ldrd	r3, r1, [sp]
 800a7c0:	1a5b      	subs	r3, r3, r1
 800a7c2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800a7c6:	ec57 6b10 	vmov	r6, r7, d0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	bfd6      	itet	le
 800a7ce:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a7d2:	462a      	movgt	r2, r5
 800a7d4:	463a      	movle	r2, r7
 800a7d6:	46ab      	mov	fp, r5
 800a7d8:	46a2      	mov	sl, r4
 800a7da:	bfce      	itee	gt
 800a7dc:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a7e0:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800a7e4:	ee00 3a90 	vmovle	s1, r3
 800a7e8:	ec4b ab17 	vmov	d7, sl, fp
 800a7ec:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800a7f0:	b003      	add	sp, #12
 800a7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a7f6 <__copybits>:
 800a7f6:	3901      	subs	r1, #1
 800a7f8:	b570      	push	{r4, r5, r6, lr}
 800a7fa:	1149      	asrs	r1, r1, #5
 800a7fc:	6914      	ldr	r4, [r2, #16]
 800a7fe:	3101      	adds	r1, #1
 800a800:	f102 0314 	add.w	r3, r2, #20
 800a804:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a808:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a80c:	1f05      	subs	r5, r0, #4
 800a80e:	42a3      	cmp	r3, r4
 800a810:	d30c      	bcc.n	800a82c <__copybits+0x36>
 800a812:	1aa3      	subs	r3, r4, r2
 800a814:	3b11      	subs	r3, #17
 800a816:	f023 0303 	bic.w	r3, r3, #3
 800a81a:	3211      	adds	r2, #17
 800a81c:	42a2      	cmp	r2, r4
 800a81e:	bf88      	it	hi
 800a820:	2300      	movhi	r3, #0
 800a822:	4418      	add	r0, r3
 800a824:	2300      	movs	r3, #0
 800a826:	4288      	cmp	r0, r1
 800a828:	d305      	bcc.n	800a836 <__copybits+0x40>
 800a82a:	bd70      	pop	{r4, r5, r6, pc}
 800a82c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a830:	f845 6f04 	str.w	r6, [r5, #4]!
 800a834:	e7eb      	b.n	800a80e <__copybits+0x18>
 800a836:	f840 3b04 	str.w	r3, [r0], #4
 800a83a:	e7f4      	b.n	800a826 <__copybits+0x30>

0800a83c <__any_on>:
 800a83c:	f100 0214 	add.w	r2, r0, #20
 800a840:	6900      	ldr	r0, [r0, #16]
 800a842:	114b      	asrs	r3, r1, #5
 800a844:	4298      	cmp	r0, r3
 800a846:	b510      	push	{r4, lr}
 800a848:	db11      	blt.n	800a86e <__any_on+0x32>
 800a84a:	dd0a      	ble.n	800a862 <__any_on+0x26>
 800a84c:	f011 011f 	ands.w	r1, r1, #31
 800a850:	d007      	beq.n	800a862 <__any_on+0x26>
 800a852:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a856:	fa24 f001 	lsr.w	r0, r4, r1
 800a85a:	fa00 f101 	lsl.w	r1, r0, r1
 800a85e:	428c      	cmp	r4, r1
 800a860:	d10b      	bne.n	800a87a <__any_on+0x3e>
 800a862:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a866:	4293      	cmp	r3, r2
 800a868:	d803      	bhi.n	800a872 <__any_on+0x36>
 800a86a:	2000      	movs	r0, #0
 800a86c:	bd10      	pop	{r4, pc}
 800a86e:	4603      	mov	r3, r0
 800a870:	e7f7      	b.n	800a862 <__any_on+0x26>
 800a872:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a876:	2900      	cmp	r1, #0
 800a878:	d0f5      	beq.n	800a866 <__any_on+0x2a>
 800a87a:	2001      	movs	r0, #1
 800a87c:	e7f6      	b.n	800a86c <__any_on+0x30>

0800a87e <__ascii_wctomb>:
 800a87e:	4603      	mov	r3, r0
 800a880:	4608      	mov	r0, r1
 800a882:	b141      	cbz	r1, 800a896 <__ascii_wctomb+0x18>
 800a884:	2aff      	cmp	r2, #255	@ 0xff
 800a886:	d904      	bls.n	800a892 <__ascii_wctomb+0x14>
 800a888:	228a      	movs	r2, #138	@ 0x8a
 800a88a:	601a      	str	r2, [r3, #0]
 800a88c:	f04f 30ff 	mov.w	r0, #4294967295
 800a890:	4770      	bx	lr
 800a892:	700a      	strb	r2, [r1, #0]
 800a894:	2001      	movs	r0, #1
 800a896:	4770      	bx	lr

0800a898 <__sfputc_r>:
 800a898:	6893      	ldr	r3, [r2, #8]
 800a89a:	3b01      	subs	r3, #1
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	b410      	push	{r4}
 800a8a0:	6093      	str	r3, [r2, #8]
 800a8a2:	da08      	bge.n	800a8b6 <__sfputc_r+0x1e>
 800a8a4:	6994      	ldr	r4, [r2, #24]
 800a8a6:	42a3      	cmp	r3, r4
 800a8a8:	db01      	blt.n	800a8ae <__sfputc_r+0x16>
 800a8aa:	290a      	cmp	r1, #10
 800a8ac:	d103      	bne.n	800a8b6 <__sfputc_r+0x1e>
 800a8ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8b2:	f7fe bdc0 	b.w	8009436 <__swbuf_r>
 800a8b6:	6813      	ldr	r3, [r2, #0]
 800a8b8:	1c58      	adds	r0, r3, #1
 800a8ba:	6010      	str	r0, [r2, #0]
 800a8bc:	7019      	strb	r1, [r3, #0]
 800a8be:	4608      	mov	r0, r1
 800a8c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8c4:	4770      	bx	lr

0800a8c6 <__sfputs_r>:
 800a8c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c8:	4606      	mov	r6, r0
 800a8ca:	460f      	mov	r7, r1
 800a8cc:	4614      	mov	r4, r2
 800a8ce:	18d5      	adds	r5, r2, r3
 800a8d0:	42ac      	cmp	r4, r5
 800a8d2:	d101      	bne.n	800a8d8 <__sfputs_r+0x12>
 800a8d4:	2000      	movs	r0, #0
 800a8d6:	e007      	b.n	800a8e8 <__sfputs_r+0x22>
 800a8d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8dc:	463a      	mov	r2, r7
 800a8de:	4630      	mov	r0, r6
 800a8e0:	f7ff ffda 	bl	800a898 <__sfputc_r>
 800a8e4:	1c43      	adds	r3, r0, #1
 800a8e6:	d1f3      	bne.n	800a8d0 <__sfputs_r+0xa>
 800a8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8ec <_vfiprintf_r>:
 800a8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f0:	460d      	mov	r5, r1
 800a8f2:	b09d      	sub	sp, #116	@ 0x74
 800a8f4:	4614      	mov	r4, r2
 800a8f6:	4698      	mov	r8, r3
 800a8f8:	4606      	mov	r6, r0
 800a8fa:	b118      	cbz	r0, 800a904 <_vfiprintf_r+0x18>
 800a8fc:	6a03      	ldr	r3, [r0, #32]
 800a8fe:	b90b      	cbnz	r3, 800a904 <_vfiprintf_r+0x18>
 800a900:	f7fe fcb0 	bl	8009264 <__sinit>
 800a904:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a906:	07d9      	lsls	r1, r3, #31
 800a908:	d405      	bmi.n	800a916 <_vfiprintf_r+0x2a>
 800a90a:	89ab      	ldrh	r3, [r5, #12]
 800a90c:	059a      	lsls	r2, r3, #22
 800a90e:	d402      	bmi.n	800a916 <_vfiprintf_r+0x2a>
 800a910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a912:	f7fe feb0 	bl	8009676 <__retarget_lock_acquire_recursive>
 800a916:	89ab      	ldrh	r3, [r5, #12]
 800a918:	071b      	lsls	r3, r3, #28
 800a91a:	d501      	bpl.n	800a920 <_vfiprintf_r+0x34>
 800a91c:	692b      	ldr	r3, [r5, #16]
 800a91e:	b99b      	cbnz	r3, 800a948 <_vfiprintf_r+0x5c>
 800a920:	4629      	mov	r1, r5
 800a922:	4630      	mov	r0, r6
 800a924:	f7fe fdc6 	bl	80094b4 <__swsetup_r>
 800a928:	b170      	cbz	r0, 800a948 <_vfiprintf_r+0x5c>
 800a92a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a92c:	07dc      	lsls	r4, r3, #31
 800a92e:	d504      	bpl.n	800a93a <_vfiprintf_r+0x4e>
 800a930:	f04f 30ff 	mov.w	r0, #4294967295
 800a934:	b01d      	add	sp, #116	@ 0x74
 800a936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a93a:	89ab      	ldrh	r3, [r5, #12]
 800a93c:	0598      	lsls	r0, r3, #22
 800a93e:	d4f7      	bmi.n	800a930 <_vfiprintf_r+0x44>
 800a940:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a942:	f7fe fe99 	bl	8009678 <__retarget_lock_release_recursive>
 800a946:	e7f3      	b.n	800a930 <_vfiprintf_r+0x44>
 800a948:	2300      	movs	r3, #0
 800a94a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a94c:	2320      	movs	r3, #32
 800a94e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a952:	f8cd 800c 	str.w	r8, [sp, #12]
 800a956:	2330      	movs	r3, #48	@ 0x30
 800a958:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ab08 <_vfiprintf_r+0x21c>
 800a95c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a960:	f04f 0901 	mov.w	r9, #1
 800a964:	4623      	mov	r3, r4
 800a966:	469a      	mov	sl, r3
 800a968:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a96c:	b10a      	cbz	r2, 800a972 <_vfiprintf_r+0x86>
 800a96e:	2a25      	cmp	r2, #37	@ 0x25
 800a970:	d1f9      	bne.n	800a966 <_vfiprintf_r+0x7a>
 800a972:	ebba 0b04 	subs.w	fp, sl, r4
 800a976:	d00b      	beq.n	800a990 <_vfiprintf_r+0xa4>
 800a978:	465b      	mov	r3, fp
 800a97a:	4622      	mov	r2, r4
 800a97c:	4629      	mov	r1, r5
 800a97e:	4630      	mov	r0, r6
 800a980:	f7ff ffa1 	bl	800a8c6 <__sfputs_r>
 800a984:	3001      	adds	r0, #1
 800a986:	f000 80a7 	beq.w	800aad8 <_vfiprintf_r+0x1ec>
 800a98a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a98c:	445a      	add	r2, fp
 800a98e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a990:	f89a 3000 	ldrb.w	r3, [sl]
 800a994:	2b00      	cmp	r3, #0
 800a996:	f000 809f 	beq.w	800aad8 <_vfiprintf_r+0x1ec>
 800a99a:	2300      	movs	r3, #0
 800a99c:	f04f 32ff 	mov.w	r2, #4294967295
 800a9a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9a4:	f10a 0a01 	add.w	sl, sl, #1
 800a9a8:	9304      	str	r3, [sp, #16]
 800a9aa:	9307      	str	r3, [sp, #28]
 800a9ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a9b0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a9b2:	4654      	mov	r4, sl
 800a9b4:	2205      	movs	r2, #5
 800a9b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9ba:	4853      	ldr	r0, [pc, #332]	@ (800ab08 <_vfiprintf_r+0x21c>)
 800a9bc:	f7f5 fc40 	bl	8000240 <memchr>
 800a9c0:	9a04      	ldr	r2, [sp, #16]
 800a9c2:	b9d8      	cbnz	r0, 800a9fc <_vfiprintf_r+0x110>
 800a9c4:	06d1      	lsls	r1, r2, #27
 800a9c6:	bf44      	itt	mi
 800a9c8:	2320      	movmi	r3, #32
 800a9ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9ce:	0713      	lsls	r3, r2, #28
 800a9d0:	bf44      	itt	mi
 800a9d2:	232b      	movmi	r3, #43	@ 0x2b
 800a9d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9d8:	f89a 3000 	ldrb.w	r3, [sl]
 800a9dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9de:	d015      	beq.n	800aa0c <_vfiprintf_r+0x120>
 800a9e0:	9a07      	ldr	r2, [sp, #28]
 800a9e2:	4654      	mov	r4, sl
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	f04f 0c0a 	mov.w	ip, #10
 800a9ea:	4621      	mov	r1, r4
 800a9ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9f0:	3b30      	subs	r3, #48	@ 0x30
 800a9f2:	2b09      	cmp	r3, #9
 800a9f4:	d94b      	bls.n	800aa8e <_vfiprintf_r+0x1a2>
 800a9f6:	b1b0      	cbz	r0, 800aa26 <_vfiprintf_r+0x13a>
 800a9f8:	9207      	str	r2, [sp, #28]
 800a9fa:	e014      	b.n	800aa26 <_vfiprintf_r+0x13a>
 800a9fc:	eba0 0308 	sub.w	r3, r0, r8
 800aa00:	fa09 f303 	lsl.w	r3, r9, r3
 800aa04:	4313      	orrs	r3, r2
 800aa06:	9304      	str	r3, [sp, #16]
 800aa08:	46a2      	mov	sl, r4
 800aa0a:	e7d2      	b.n	800a9b2 <_vfiprintf_r+0xc6>
 800aa0c:	9b03      	ldr	r3, [sp, #12]
 800aa0e:	1d19      	adds	r1, r3, #4
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	9103      	str	r1, [sp, #12]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	bfbb      	ittet	lt
 800aa18:	425b      	neglt	r3, r3
 800aa1a:	f042 0202 	orrlt.w	r2, r2, #2
 800aa1e:	9307      	strge	r3, [sp, #28]
 800aa20:	9307      	strlt	r3, [sp, #28]
 800aa22:	bfb8      	it	lt
 800aa24:	9204      	strlt	r2, [sp, #16]
 800aa26:	7823      	ldrb	r3, [r4, #0]
 800aa28:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa2a:	d10a      	bne.n	800aa42 <_vfiprintf_r+0x156>
 800aa2c:	7863      	ldrb	r3, [r4, #1]
 800aa2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa30:	d132      	bne.n	800aa98 <_vfiprintf_r+0x1ac>
 800aa32:	9b03      	ldr	r3, [sp, #12]
 800aa34:	1d1a      	adds	r2, r3, #4
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	9203      	str	r2, [sp, #12]
 800aa3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa3e:	3402      	adds	r4, #2
 800aa40:	9305      	str	r3, [sp, #20]
 800aa42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ab18 <_vfiprintf_r+0x22c>
 800aa46:	7821      	ldrb	r1, [r4, #0]
 800aa48:	2203      	movs	r2, #3
 800aa4a:	4650      	mov	r0, sl
 800aa4c:	f7f5 fbf8 	bl	8000240 <memchr>
 800aa50:	b138      	cbz	r0, 800aa62 <_vfiprintf_r+0x176>
 800aa52:	9b04      	ldr	r3, [sp, #16]
 800aa54:	eba0 000a 	sub.w	r0, r0, sl
 800aa58:	2240      	movs	r2, #64	@ 0x40
 800aa5a:	4082      	lsls	r2, r0
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	3401      	adds	r4, #1
 800aa60:	9304      	str	r3, [sp, #16]
 800aa62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa66:	4829      	ldr	r0, [pc, #164]	@ (800ab0c <_vfiprintf_r+0x220>)
 800aa68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa6c:	2206      	movs	r2, #6
 800aa6e:	f7f5 fbe7 	bl	8000240 <memchr>
 800aa72:	2800      	cmp	r0, #0
 800aa74:	d03f      	beq.n	800aaf6 <_vfiprintf_r+0x20a>
 800aa76:	4b26      	ldr	r3, [pc, #152]	@ (800ab10 <_vfiprintf_r+0x224>)
 800aa78:	bb1b      	cbnz	r3, 800aac2 <_vfiprintf_r+0x1d6>
 800aa7a:	9b03      	ldr	r3, [sp, #12]
 800aa7c:	3307      	adds	r3, #7
 800aa7e:	f023 0307 	bic.w	r3, r3, #7
 800aa82:	3308      	adds	r3, #8
 800aa84:	9303      	str	r3, [sp, #12]
 800aa86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa88:	443b      	add	r3, r7
 800aa8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa8c:	e76a      	b.n	800a964 <_vfiprintf_r+0x78>
 800aa8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa92:	460c      	mov	r4, r1
 800aa94:	2001      	movs	r0, #1
 800aa96:	e7a8      	b.n	800a9ea <_vfiprintf_r+0xfe>
 800aa98:	2300      	movs	r3, #0
 800aa9a:	3401      	adds	r4, #1
 800aa9c:	9305      	str	r3, [sp, #20]
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	f04f 0c0a 	mov.w	ip, #10
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaaa:	3a30      	subs	r2, #48	@ 0x30
 800aaac:	2a09      	cmp	r2, #9
 800aaae:	d903      	bls.n	800aab8 <_vfiprintf_r+0x1cc>
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d0c6      	beq.n	800aa42 <_vfiprintf_r+0x156>
 800aab4:	9105      	str	r1, [sp, #20]
 800aab6:	e7c4      	b.n	800aa42 <_vfiprintf_r+0x156>
 800aab8:	fb0c 2101 	mla	r1, ip, r1, r2
 800aabc:	4604      	mov	r4, r0
 800aabe:	2301      	movs	r3, #1
 800aac0:	e7f0      	b.n	800aaa4 <_vfiprintf_r+0x1b8>
 800aac2:	ab03      	add	r3, sp, #12
 800aac4:	9300      	str	r3, [sp, #0]
 800aac6:	462a      	mov	r2, r5
 800aac8:	4b12      	ldr	r3, [pc, #72]	@ (800ab14 <_vfiprintf_r+0x228>)
 800aaca:	a904      	add	r1, sp, #16
 800aacc:	4630      	mov	r0, r6
 800aace:	f3af 8000 	nop.w
 800aad2:	4607      	mov	r7, r0
 800aad4:	1c78      	adds	r0, r7, #1
 800aad6:	d1d6      	bne.n	800aa86 <_vfiprintf_r+0x19a>
 800aad8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aada:	07d9      	lsls	r1, r3, #31
 800aadc:	d405      	bmi.n	800aaea <_vfiprintf_r+0x1fe>
 800aade:	89ab      	ldrh	r3, [r5, #12]
 800aae0:	059a      	lsls	r2, r3, #22
 800aae2:	d402      	bmi.n	800aaea <_vfiprintf_r+0x1fe>
 800aae4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aae6:	f7fe fdc7 	bl	8009678 <__retarget_lock_release_recursive>
 800aaea:	89ab      	ldrh	r3, [r5, #12]
 800aaec:	065b      	lsls	r3, r3, #25
 800aaee:	f53f af1f 	bmi.w	800a930 <_vfiprintf_r+0x44>
 800aaf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aaf4:	e71e      	b.n	800a934 <_vfiprintf_r+0x48>
 800aaf6:	ab03      	add	r3, sp, #12
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	462a      	mov	r2, r5
 800aafc:	4b05      	ldr	r3, [pc, #20]	@ (800ab14 <_vfiprintf_r+0x228>)
 800aafe:	a904      	add	r1, sp, #16
 800ab00:	4630      	mov	r0, r6
 800ab02:	f000 f879 	bl	800abf8 <_printf_i>
 800ab06:	e7e4      	b.n	800aad2 <_vfiprintf_r+0x1e6>
 800ab08:	0800b377 	.word	0x0800b377
 800ab0c:	0800b381 	.word	0x0800b381
 800ab10:	00000000 	.word	0x00000000
 800ab14:	0800a8c7 	.word	0x0800a8c7
 800ab18:	0800b37d 	.word	0x0800b37d

0800ab1c <_printf_common>:
 800ab1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab20:	4616      	mov	r6, r2
 800ab22:	4698      	mov	r8, r3
 800ab24:	688a      	ldr	r2, [r1, #8]
 800ab26:	690b      	ldr	r3, [r1, #16]
 800ab28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	bfb8      	it	lt
 800ab30:	4613      	movlt	r3, r2
 800ab32:	6033      	str	r3, [r6, #0]
 800ab34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab38:	4607      	mov	r7, r0
 800ab3a:	460c      	mov	r4, r1
 800ab3c:	b10a      	cbz	r2, 800ab42 <_printf_common+0x26>
 800ab3e:	3301      	adds	r3, #1
 800ab40:	6033      	str	r3, [r6, #0]
 800ab42:	6823      	ldr	r3, [r4, #0]
 800ab44:	0699      	lsls	r1, r3, #26
 800ab46:	bf42      	ittt	mi
 800ab48:	6833      	ldrmi	r3, [r6, #0]
 800ab4a:	3302      	addmi	r3, #2
 800ab4c:	6033      	strmi	r3, [r6, #0]
 800ab4e:	6825      	ldr	r5, [r4, #0]
 800ab50:	f015 0506 	ands.w	r5, r5, #6
 800ab54:	d106      	bne.n	800ab64 <_printf_common+0x48>
 800ab56:	f104 0a19 	add.w	sl, r4, #25
 800ab5a:	68e3      	ldr	r3, [r4, #12]
 800ab5c:	6832      	ldr	r2, [r6, #0]
 800ab5e:	1a9b      	subs	r3, r3, r2
 800ab60:	42ab      	cmp	r3, r5
 800ab62:	dc26      	bgt.n	800abb2 <_printf_common+0x96>
 800ab64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ab68:	6822      	ldr	r2, [r4, #0]
 800ab6a:	3b00      	subs	r3, #0
 800ab6c:	bf18      	it	ne
 800ab6e:	2301      	movne	r3, #1
 800ab70:	0692      	lsls	r2, r2, #26
 800ab72:	d42b      	bmi.n	800abcc <_printf_common+0xb0>
 800ab74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ab78:	4641      	mov	r1, r8
 800ab7a:	4638      	mov	r0, r7
 800ab7c:	47c8      	blx	r9
 800ab7e:	3001      	adds	r0, #1
 800ab80:	d01e      	beq.n	800abc0 <_printf_common+0xa4>
 800ab82:	6823      	ldr	r3, [r4, #0]
 800ab84:	6922      	ldr	r2, [r4, #16]
 800ab86:	f003 0306 	and.w	r3, r3, #6
 800ab8a:	2b04      	cmp	r3, #4
 800ab8c:	bf02      	ittt	eq
 800ab8e:	68e5      	ldreq	r5, [r4, #12]
 800ab90:	6833      	ldreq	r3, [r6, #0]
 800ab92:	1aed      	subeq	r5, r5, r3
 800ab94:	68a3      	ldr	r3, [r4, #8]
 800ab96:	bf0c      	ite	eq
 800ab98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab9c:	2500      	movne	r5, #0
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	bfc4      	itt	gt
 800aba2:	1a9b      	subgt	r3, r3, r2
 800aba4:	18ed      	addgt	r5, r5, r3
 800aba6:	2600      	movs	r6, #0
 800aba8:	341a      	adds	r4, #26
 800abaa:	42b5      	cmp	r5, r6
 800abac:	d11a      	bne.n	800abe4 <_printf_common+0xc8>
 800abae:	2000      	movs	r0, #0
 800abb0:	e008      	b.n	800abc4 <_printf_common+0xa8>
 800abb2:	2301      	movs	r3, #1
 800abb4:	4652      	mov	r2, sl
 800abb6:	4641      	mov	r1, r8
 800abb8:	4638      	mov	r0, r7
 800abba:	47c8      	blx	r9
 800abbc:	3001      	adds	r0, #1
 800abbe:	d103      	bne.n	800abc8 <_printf_common+0xac>
 800abc0:	f04f 30ff 	mov.w	r0, #4294967295
 800abc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc8:	3501      	adds	r5, #1
 800abca:	e7c6      	b.n	800ab5a <_printf_common+0x3e>
 800abcc:	18e1      	adds	r1, r4, r3
 800abce:	1c5a      	adds	r2, r3, #1
 800abd0:	2030      	movs	r0, #48	@ 0x30
 800abd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800abd6:	4422      	add	r2, r4
 800abd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800abdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800abe0:	3302      	adds	r3, #2
 800abe2:	e7c7      	b.n	800ab74 <_printf_common+0x58>
 800abe4:	2301      	movs	r3, #1
 800abe6:	4622      	mov	r2, r4
 800abe8:	4641      	mov	r1, r8
 800abea:	4638      	mov	r0, r7
 800abec:	47c8      	blx	r9
 800abee:	3001      	adds	r0, #1
 800abf0:	d0e6      	beq.n	800abc0 <_printf_common+0xa4>
 800abf2:	3601      	adds	r6, #1
 800abf4:	e7d9      	b.n	800abaa <_printf_common+0x8e>
	...

0800abf8 <_printf_i>:
 800abf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abfc:	7e0f      	ldrb	r7, [r1, #24]
 800abfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac00:	2f78      	cmp	r7, #120	@ 0x78
 800ac02:	4691      	mov	r9, r2
 800ac04:	4680      	mov	r8, r0
 800ac06:	460c      	mov	r4, r1
 800ac08:	469a      	mov	sl, r3
 800ac0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac0e:	d807      	bhi.n	800ac20 <_printf_i+0x28>
 800ac10:	2f62      	cmp	r7, #98	@ 0x62
 800ac12:	d80a      	bhi.n	800ac2a <_printf_i+0x32>
 800ac14:	2f00      	cmp	r7, #0
 800ac16:	f000 80d1 	beq.w	800adbc <_printf_i+0x1c4>
 800ac1a:	2f58      	cmp	r7, #88	@ 0x58
 800ac1c:	f000 80b8 	beq.w	800ad90 <_printf_i+0x198>
 800ac20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac28:	e03a      	b.n	800aca0 <_printf_i+0xa8>
 800ac2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac2e:	2b15      	cmp	r3, #21
 800ac30:	d8f6      	bhi.n	800ac20 <_printf_i+0x28>
 800ac32:	a101      	add	r1, pc, #4	@ (adr r1, 800ac38 <_printf_i+0x40>)
 800ac34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac38:	0800ac91 	.word	0x0800ac91
 800ac3c:	0800aca5 	.word	0x0800aca5
 800ac40:	0800ac21 	.word	0x0800ac21
 800ac44:	0800ac21 	.word	0x0800ac21
 800ac48:	0800ac21 	.word	0x0800ac21
 800ac4c:	0800ac21 	.word	0x0800ac21
 800ac50:	0800aca5 	.word	0x0800aca5
 800ac54:	0800ac21 	.word	0x0800ac21
 800ac58:	0800ac21 	.word	0x0800ac21
 800ac5c:	0800ac21 	.word	0x0800ac21
 800ac60:	0800ac21 	.word	0x0800ac21
 800ac64:	0800ada3 	.word	0x0800ada3
 800ac68:	0800accf 	.word	0x0800accf
 800ac6c:	0800ad5d 	.word	0x0800ad5d
 800ac70:	0800ac21 	.word	0x0800ac21
 800ac74:	0800ac21 	.word	0x0800ac21
 800ac78:	0800adc5 	.word	0x0800adc5
 800ac7c:	0800ac21 	.word	0x0800ac21
 800ac80:	0800accf 	.word	0x0800accf
 800ac84:	0800ac21 	.word	0x0800ac21
 800ac88:	0800ac21 	.word	0x0800ac21
 800ac8c:	0800ad65 	.word	0x0800ad65
 800ac90:	6833      	ldr	r3, [r6, #0]
 800ac92:	1d1a      	adds	r2, r3, #4
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	6032      	str	r2, [r6, #0]
 800ac98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aca0:	2301      	movs	r3, #1
 800aca2:	e09c      	b.n	800adde <_printf_i+0x1e6>
 800aca4:	6833      	ldr	r3, [r6, #0]
 800aca6:	6820      	ldr	r0, [r4, #0]
 800aca8:	1d19      	adds	r1, r3, #4
 800acaa:	6031      	str	r1, [r6, #0]
 800acac:	0606      	lsls	r6, r0, #24
 800acae:	d501      	bpl.n	800acb4 <_printf_i+0xbc>
 800acb0:	681d      	ldr	r5, [r3, #0]
 800acb2:	e003      	b.n	800acbc <_printf_i+0xc4>
 800acb4:	0645      	lsls	r5, r0, #25
 800acb6:	d5fb      	bpl.n	800acb0 <_printf_i+0xb8>
 800acb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800acbc:	2d00      	cmp	r5, #0
 800acbe:	da03      	bge.n	800acc8 <_printf_i+0xd0>
 800acc0:	232d      	movs	r3, #45	@ 0x2d
 800acc2:	426d      	negs	r5, r5
 800acc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acc8:	4858      	ldr	r0, [pc, #352]	@ (800ae2c <_printf_i+0x234>)
 800acca:	230a      	movs	r3, #10
 800accc:	e011      	b.n	800acf2 <_printf_i+0xfa>
 800acce:	6821      	ldr	r1, [r4, #0]
 800acd0:	6833      	ldr	r3, [r6, #0]
 800acd2:	0608      	lsls	r0, r1, #24
 800acd4:	f853 5b04 	ldr.w	r5, [r3], #4
 800acd8:	d402      	bmi.n	800ace0 <_printf_i+0xe8>
 800acda:	0649      	lsls	r1, r1, #25
 800acdc:	bf48      	it	mi
 800acde:	b2ad      	uxthmi	r5, r5
 800ace0:	2f6f      	cmp	r7, #111	@ 0x6f
 800ace2:	4852      	ldr	r0, [pc, #328]	@ (800ae2c <_printf_i+0x234>)
 800ace4:	6033      	str	r3, [r6, #0]
 800ace6:	bf14      	ite	ne
 800ace8:	230a      	movne	r3, #10
 800acea:	2308      	moveq	r3, #8
 800acec:	2100      	movs	r1, #0
 800acee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800acf2:	6866      	ldr	r6, [r4, #4]
 800acf4:	60a6      	str	r6, [r4, #8]
 800acf6:	2e00      	cmp	r6, #0
 800acf8:	db05      	blt.n	800ad06 <_printf_i+0x10e>
 800acfa:	6821      	ldr	r1, [r4, #0]
 800acfc:	432e      	orrs	r6, r5
 800acfe:	f021 0104 	bic.w	r1, r1, #4
 800ad02:	6021      	str	r1, [r4, #0]
 800ad04:	d04b      	beq.n	800ad9e <_printf_i+0x1a6>
 800ad06:	4616      	mov	r6, r2
 800ad08:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad0c:	fb03 5711 	mls	r7, r3, r1, r5
 800ad10:	5dc7      	ldrb	r7, [r0, r7]
 800ad12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad16:	462f      	mov	r7, r5
 800ad18:	42bb      	cmp	r3, r7
 800ad1a:	460d      	mov	r5, r1
 800ad1c:	d9f4      	bls.n	800ad08 <_printf_i+0x110>
 800ad1e:	2b08      	cmp	r3, #8
 800ad20:	d10b      	bne.n	800ad3a <_printf_i+0x142>
 800ad22:	6823      	ldr	r3, [r4, #0]
 800ad24:	07df      	lsls	r7, r3, #31
 800ad26:	d508      	bpl.n	800ad3a <_printf_i+0x142>
 800ad28:	6923      	ldr	r3, [r4, #16]
 800ad2a:	6861      	ldr	r1, [r4, #4]
 800ad2c:	4299      	cmp	r1, r3
 800ad2e:	bfde      	ittt	le
 800ad30:	2330      	movle	r3, #48	@ 0x30
 800ad32:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad36:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad3a:	1b92      	subs	r2, r2, r6
 800ad3c:	6122      	str	r2, [r4, #16]
 800ad3e:	f8cd a000 	str.w	sl, [sp]
 800ad42:	464b      	mov	r3, r9
 800ad44:	aa03      	add	r2, sp, #12
 800ad46:	4621      	mov	r1, r4
 800ad48:	4640      	mov	r0, r8
 800ad4a:	f7ff fee7 	bl	800ab1c <_printf_common>
 800ad4e:	3001      	adds	r0, #1
 800ad50:	d14a      	bne.n	800ade8 <_printf_i+0x1f0>
 800ad52:	f04f 30ff 	mov.w	r0, #4294967295
 800ad56:	b004      	add	sp, #16
 800ad58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad5c:	6823      	ldr	r3, [r4, #0]
 800ad5e:	f043 0320 	orr.w	r3, r3, #32
 800ad62:	6023      	str	r3, [r4, #0]
 800ad64:	4832      	ldr	r0, [pc, #200]	@ (800ae30 <_printf_i+0x238>)
 800ad66:	2778      	movs	r7, #120	@ 0x78
 800ad68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ad6c:	6823      	ldr	r3, [r4, #0]
 800ad6e:	6831      	ldr	r1, [r6, #0]
 800ad70:	061f      	lsls	r7, r3, #24
 800ad72:	f851 5b04 	ldr.w	r5, [r1], #4
 800ad76:	d402      	bmi.n	800ad7e <_printf_i+0x186>
 800ad78:	065f      	lsls	r7, r3, #25
 800ad7a:	bf48      	it	mi
 800ad7c:	b2ad      	uxthmi	r5, r5
 800ad7e:	6031      	str	r1, [r6, #0]
 800ad80:	07d9      	lsls	r1, r3, #31
 800ad82:	bf44      	itt	mi
 800ad84:	f043 0320 	orrmi.w	r3, r3, #32
 800ad88:	6023      	strmi	r3, [r4, #0]
 800ad8a:	b11d      	cbz	r5, 800ad94 <_printf_i+0x19c>
 800ad8c:	2310      	movs	r3, #16
 800ad8e:	e7ad      	b.n	800acec <_printf_i+0xf4>
 800ad90:	4826      	ldr	r0, [pc, #152]	@ (800ae2c <_printf_i+0x234>)
 800ad92:	e7e9      	b.n	800ad68 <_printf_i+0x170>
 800ad94:	6823      	ldr	r3, [r4, #0]
 800ad96:	f023 0320 	bic.w	r3, r3, #32
 800ad9a:	6023      	str	r3, [r4, #0]
 800ad9c:	e7f6      	b.n	800ad8c <_printf_i+0x194>
 800ad9e:	4616      	mov	r6, r2
 800ada0:	e7bd      	b.n	800ad1e <_printf_i+0x126>
 800ada2:	6833      	ldr	r3, [r6, #0]
 800ada4:	6825      	ldr	r5, [r4, #0]
 800ada6:	6961      	ldr	r1, [r4, #20]
 800ada8:	1d18      	adds	r0, r3, #4
 800adaa:	6030      	str	r0, [r6, #0]
 800adac:	062e      	lsls	r6, r5, #24
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	d501      	bpl.n	800adb6 <_printf_i+0x1be>
 800adb2:	6019      	str	r1, [r3, #0]
 800adb4:	e002      	b.n	800adbc <_printf_i+0x1c4>
 800adb6:	0668      	lsls	r0, r5, #25
 800adb8:	d5fb      	bpl.n	800adb2 <_printf_i+0x1ba>
 800adba:	8019      	strh	r1, [r3, #0]
 800adbc:	2300      	movs	r3, #0
 800adbe:	6123      	str	r3, [r4, #16]
 800adc0:	4616      	mov	r6, r2
 800adc2:	e7bc      	b.n	800ad3e <_printf_i+0x146>
 800adc4:	6833      	ldr	r3, [r6, #0]
 800adc6:	1d1a      	adds	r2, r3, #4
 800adc8:	6032      	str	r2, [r6, #0]
 800adca:	681e      	ldr	r6, [r3, #0]
 800adcc:	6862      	ldr	r2, [r4, #4]
 800adce:	2100      	movs	r1, #0
 800add0:	4630      	mov	r0, r6
 800add2:	f7f5 fa35 	bl	8000240 <memchr>
 800add6:	b108      	cbz	r0, 800addc <_printf_i+0x1e4>
 800add8:	1b80      	subs	r0, r0, r6
 800adda:	6060      	str	r0, [r4, #4]
 800addc:	6863      	ldr	r3, [r4, #4]
 800adde:	6123      	str	r3, [r4, #16]
 800ade0:	2300      	movs	r3, #0
 800ade2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ade6:	e7aa      	b.n	800ad3e <_printf_i+0x146>
 800ade8:	6923      	ldr	r3, [r4, #16]
 800adea:	4632      	mov	r2, r6
 800adec:	4649      	mov	r1, r9
 800adee:	4640      	mov	r0, r8
 800adf0:	47d0      	blx	sl
 800adf2:	3001      	adds	r0, #1
 800adf4:	d0ad      	beq.n	800ad52 <_printf_i+0x15a>
 800adf6:	6823      	ldr	r3, [r4, #0]
 800adf8:	079b      	lsls	r3, r3, #30
 800adfa:	d413      	bmi.n	800ae24 <_printf_i+0x22c>
 800adfc:	68e0      	ldr	r0, [r4, #12]
 800adfe:	9b03      	ldr	r3, [sp, #12]
 800ae00:	4298      	cmp	r0, r3
 800ae02:	bfb8      	it	lt
 800ae04:	4618      	movlt	r0, r3
 800ae06:	e7a6      	b.n	800ad56 <_printf_i+0x15e>
 800ae08:	2301      	movs	r3, #1
 800ae0a:	4632      	mov	r2, r6
 800ae0c:	4649      	mov	r1, r9
 800ae0e:	4640      	mov	r0, r8
 800ae10:	47d0      	blx	sl
 800ae12:	3001      	adds	r0, #1
 800ae14:	d09d      	beq.n	800ad52 <_printf_i+0x15a>
 800ae16:	3501      	adds	r5, #1
 800ae18:	68e3      	ldr	r3, [r4, #12]
 800ae1a:	9903      	ldr	r1, [sp, #12]
 800ae1c:	1a5b      	subs	r3, r3, r1
 800ae1e:	42ab      	cmp	r3, r5
 800ae20:	dcf2      	bgt.n	800ae08 <_printf_i+0x210>
 800ae22:	e7eb      	b.n	800adfc <_printf_i+0x204>
 800ae24:	2500      	movs	r5, #0
 800ae26:	f104 0619 	add.w	r6, r4, #25
 800ae2a:	e7f5      	b.n	800ae18 <_printf_i+0x220>
 800ae2c:	0800b388 	.word	0x0800b388
 800ae30:	0800b399 	.word	0x0800b399

0800ae34 <__sflush_r>:
 800ae34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae3c:	0716      	lsls	r6, r2, #28
 800ae3e:	4605      	mov	r5, r0
 800ae40:	460c      	mov	r4, r1
 800ae42:	d454      	bmi.n	800aeee <__sflush_r+0xba>
 800ae44:	684b      	ldr	r3, [r1, #4]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	dc02      	bgt.n	800ae50 <__sflush_r+0x1c>
 800ae4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	dd48      	ble.n	800aee2 <__sflush_r+0xae>
 800ae50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae52:	2e00      	cmp	r6, #0
 800ae54:	d045      	beq.n	800aee2 <__sflush_r+0xae>
 800ae56:	2300      	movs	r3, #0
 800ae58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ae5c:	682f      	ldr	r7, [r5, #0]
 800ae5e:	6a21      	ldr	r1, [r4, #32]
 800ae60:	602b      	str	r3, [r5, #0]
 800ae62:	d030      	beq.n	800aec6 <__sflush_r+0x92>
 800ae64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ae66:	89a3      	ldrh	r3, [r4, #12]
 800ae68:	0759      	lsls	r1, r3, #29
 800ae6a:	d505      	bpl.n	800ae78 <__sflush_r+0x44>
 800ae6c:	6863      	ldr	r3, [r4, #4]
 800ae6e:	1ad2      	subs	r2, r2, r3
 800ae70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ae72:	b10b      	cbz	r3, 800ae78 <__sflush_r+0x44>
 800ae74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae76:	1ad2      	subs	r2, r2, r3
 800ae78:	2300      	movs	r3, #0
 800ae7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae7c:	6a21      	ldr	r1, [r4, #32]
 800ae7e:	4628      	mov	r0, r5
 800ae80:	47b0      	blx	r6
 800ae82:	1c43      	adds	r3, r0, #1
 800ae84:	89a3      	ldrh	r3, [r4, #12]
 800ae86:	d106      	bne.n	800ae96 <__sflush_r+0x62>
 800ae88:	6829      	ldr	r1, [r5, #0]
 800ae8a:	291d      	cmp	r1, #29
 800ae8c:	d82b      	bhi.n	800aee6 <__sflush_r+0xb2>
 800ae8e:	4a2a      	ldr	r2, [pc, #168]	@ (800af38 <__sflush_r+0x104>)
 800ae90:	40ca      	lsrs	r2, r1
 800ae92:	07d6      	lsls	r6, r2, #31
 800ae94:	d527      	bpl.n	800aee6 <__sflush_r+0xb2>
 800ae96:	2200      	movs	r2, #0
 800ae98:	6062      	str	r2, [r4, #4]
 800ae9a:	04d9      	lsls	r1, r3, #19
 800ae9c:	6922      	ldr	r2, [r4, #16]
 800ae9e:	6022      	str	r2, [r4, #0]
 800aea0:	d504      	bpl.n	800aeac <__sflush_r+0x78>
 800aea2:	1c42      	adds	r2, r0, #1
 800aea4:	d101      	bne.n	800aeaa <__sflush_r+0x76>
 800aea6:	682b      	ldr	r3, [r5, #0]
 800aea8:	b903      	cbnz	r3, 800aeac <__sflush_r+0x78>
 800aeaa:	6560      	str	r0, [r4, #84]	@ 0x54
 800aeac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aeae:	602f      	str	r7, [r5, #0]
 800aeb0:	b1b9      	cbz	r1, 800aee2 <__sflush_r+0xae>
 800aeb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aeb6:	4299      	cmp	r1, r3
 800aeb8:	d002      	beq.n	800aec0 <__sflush_r+0x8c>
 800aeba:	4628      	mov	r0, r5
 800aebc:	f7fe fbf4 	bl	80096a8 <_free_r>
 800aec0:	2300      	movs	r3, #0
 800aec2:	6363      	str	r3, [r4, #52]	@ 0x34
 800aec4:	e00d      	b.n	800aee2 <__sflush_r+0xae>
 800aec6:	2301      	movs	r3, #1
 800aec8:	4628      	mov	r0, r5
 800aeca:	47b0      	blx	r6
 800aecc:	4602      	mov	r2, r0
 800aece:	1c50      	adds	r0, r2, #1
 800aed0:	d1c9      	bne.n	800ae66 <__sflush_r+0x32>
 800aed2:	682b      	ldr	r3, [r5, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d0c6      	beq.n	800ae66 <__sflush_r+0x32>
 800aed8:	2b1d      	cmp	r3, #29
 800aeda:	d001      	beq.n	800aee0 <__sflush_r+0xac>
 800aedc:	2b16      	cmp	r3, #22
 800aede:	d11e      	bne.n	800af1e <__sflush_r+0xea>
 800aee0:	602f      	str	r7, [r5, #0]
 800aee2:	2000      	movs	r0, #0
 800aee4:	e022      	b.n	800af2c <__sflush_r+0xf8>
 800aee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aeea:	b21b      	sxth	r3, r3
 800aeec:	e01b      	b.n	800af26 <__sflush_r+0xf2>
 800aeee:	690f      	ldr	r7, [r1, #16]
 800aef0:	2f00      	cmp	r7, #0
 800aef2:	d0f6      	beq.n	800aee2 <__sflush_r+0xae>
 800aef4:	0793      	lsls	r3, r2, #30
 800aef6:	680e      	ldr	r6, [r1, #0]
 800aef8:	bf08      	it	eq
 800aefa:	694b      	ldreq	r3, [r1, #20]
 800aefc:	600f      	str	r7, [r1, #0]
 800aefe:	bf18      	it	ne
 800af00:	2300      	movne	r3, #0
 800af02:	eba6 0807 	sub.w	r8, r6, r7
 800af06:	608b      	str	r3, [r1, #8]
 800af08:	f1b8 0f00 	cmp.w	r8, #0
 800af0c:	dde9      	ble.n	800aee2 <__sflush_r+0xae>
 800af0e:	6a21      	ldr	r1, [r4, #32]
 800af10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800af12:	4643      	mov	r3, r8
 800af14:	463a      	mov	r2, r7
 800af16:	4628      	mov	r0, r5
 800af18:	47b0      	blx	r6
 800af1a:	2800      	cmp	r0, #0
 800af1c:	dc08      	bgt.n	800af30 <__sflush_r+0xfc>
 800af1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af26:	81a3      	strh	r3, [r4, #12]
 800af28:	f04f 30ff 	mov.w	r0, #4294967295
 800af2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af30:	4407      	add	r7, r0
 800af32:	eba8 0800 	sub.w	r8, r8, r0
 800af36:	e7e7      	b.n	800af08 <__sflush_r+0xd4>
 800af38:	20400001 	.word	0x20400001

0800af3c <_fflush_r>:
 800af3c:	b538      	push	{r3, r4, r5, lr}
 800af3e:	690b      	ldr	r3, [r1, #16]
 800af40:	4605      	mov	r5, r0
 800af42:	460c      	mov	r4, r1
 800af44:	b913      	cbnz	r3, 800af4c <_fflush_r+0x10>
 800af46:	2500      	movs	r5, #0
 800af48:	4628      	mov	r0, r5
 800af4a:	bd38      	pop	{r3, r4, r5, pc}
 800af4c:	b118      	cbz	r0, 800af56 <_fflush_r+0x1a>
 800af4e:	6a03      	ldr	r3, [r0, #32]
 800af50:	b90b      	cbnz	r3, 800af56 <_fflush_r+0x1a>
 800af52:	f7fe f987 	bl	8009264 <__sinit>
 800af56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d0f3      	beq.n	800af46 <_fflush_r+0xa>
 800af5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800af60:	07d0      	lsls	r0, r2, #31
 800af62:	d404      	bmi.n	800af6e <_fflush_r+0x32>
 800af64:	0599      	lsls	r1, r3, #22
 800af66:	d402      	bmi.n	800af6e <_fflush_r+0x32>
 800af68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af6a:	f7fe fb84 	bl	8009676 <__retarget_lock_acquire_recursive>
 800af6e:	4628      	mov	r0, r5
 800af70:	4621      	mov	r1, r4
 800af72:	f7ff ff5f 	bl	800ae34 <__sflush_r>
 800af76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af78:	07da      	lsls	r2, r3, #31
 800af7a:	4605      	mov	r5, r0
 800af7c:	d4e4      	bmi.n	800af48 <_fflush_r+0xc>
 800af7e:	89a3      	ldrh	r3, [r4, #12]
 800af80:	059b      	lsls	r3, r3, #22
 800af82:	d4e1      	bmi.n	800af48 <_fflush_r+0xc>
 800af84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af86:	f7fe fb77 	bl	8009678 <__retarget_lock_release_recursive>
 800af8a:	e7dd      	b.n	800af48 <_fflush_r+0xc>

0800af8c <__swhatbuf_r>:
 800af8c:	b570      	push	{r4, r5, r6, lr}
 800af8e:	460c      	mov	r4, r1
 800af90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af94:	2900      	cmp	r1, #0
 800af96:	b096      	sub	sp, #88	@ 0x58
 800af98:	4615      	mov	r5, r2
 800af9a:	461e      	mov	r6, r3
 800af9c:	da0d      	bge.n	800afba <__swhatbuf_r+0x2e>
 800af9e:	89a3      	ldrh	r3, [r4, #12]
 800afa0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800afa4:	f04f 0100 	mov.w	r1, #0
 800afa8:	bf14      	ite	ne
 800afaa:	2340      	movne	r3, #64	@ 0x40
 800afac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800afb0:	2000      	movs	r0, #0
 800afb2:	6031      	str	r1, [r6, #0]
 800afb4:	602b      	str	r3, [r5, #0]
 800afb6:	b016      	add	sp, #88	@ 0x58
 800afb8:	bd70      	pop	{r4, r5, r6, pc}
 800afba:	466a      	mov	r2, sp
 800afbc:	f000 f848 	bl	800b050 <_fstat_r>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	dbec      	blt.n	800af9e <__swhatbuf_r+0x12>
 800afc4:	9901      	ldr	r1, [sp, #4]
 800afc6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800afca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800afce:	4259      	negs	r1, r3
 800afd0:	4159      	adcs	r1, r3
 800afd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800afd6:	e7eb      	b.n	800afb0 <__swhatbuf_r+0x24>

0800afd8 <__smakebuf_r>:
 800afd8:	898b      	ldrh	r3, [r1, #12]
 800afda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afdc:	079d      	lsls	r5, r3, #30
 800afde:	4606      	mov	r6, r0
 800afe0:	460c      	mov	r4, r1
 800afe2:	d507      	bpl.n	800aff4 <__smakebuf_r+0x1c>
 800afe4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800afe8:	6023      	str	r3, [r4, #0]
 800afea:	6123      	str	r3, [r4, #16]
 800afec:	2301      	movs	r3, #1
 800afee:	6163      	str	r3, [r4, #20]
 800aff0:	b003      	add	sp, #12
 800aff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aff4:	ab01      	add	r3, sp, #4
 800aff6:	466a      	mov	r2, sp
 800aff8:	f7ff ffc8 	bl	800af8c <__swhatbuf_r>
 800affc:	9f00      	ldr	r7, [sp, #0]
 800affe:	4605      	mov	r5, r0
 800b000:	4639      	mov	r1, r7
 800b002:	4630      	mov	r0, r6
 800b004:	f7fe fef6 	bl	8009df4 <_malloc_r>
 800b008:	b948      	cbnz	r0, 800b01e <__smakebuf_r+0x46>
 800b00a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b00e:	059a      	lsls	r2, r3, #22
 800b010:	d4ee      	bmi.n	800aff0 <__smakebuf_r+0x18>
 800b012:	f023 0303 	bic.w	r3, r3, #3
 800b016:	f043 0302 	orr.w	r3, r3, #2
 800b01a:	81a3      	strh	r3, [r4, #12]
 800b01c:	e7e2      	b.n	800afe4 <__smakebuf_r+0xc>
 800b01e:	89a3      	ldrh	r3, [r4, #12]
 800b020:	6020      	str	r0, [r4, #0]
 800b022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b026:	81a3      	strh	r3, [r4, #12]
 800b028:	9b01      	ldr	r3, [sp, #4]
 800b02a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b02e:	b15b      	cbz	r3, 800b048 <__smakebuf_r+0x70>
 800b030:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b034:	4630      	mov	r0, r6
 800b036:	f000 f81d 	bl	800b074 <_isatty_r>
 800b03a:	b128      	cbz	r0, 800b048 <__smakebuf_r+0x70>
 800b03c:	89a3      	ldrh	r3, [r4, #12]
 800b03e:	f023 0303 	bic.w	r3, r3, #3
 800b042:	f043 0301 	orr.w	r3, r3, #1
 800b046:	81a3      	strh	r3, [r4, #12]
 800b048:	89a3      	ldrh	r3, [r4, #12]
 800b04a:	431d      	orrs	r5, r3
 800b04c:	81a5      	strh	r5, [r4, #12]
 800b04e:	e7cf      	b.n	800aff0 <__smakebuf_r+0x18>

0800b050 <_fstat_r>:
 800b050:	b538      	push	{r3, r4, r5, lr}
 800b052:	4d07      	ldr	r5, [pc, #28]	@ (800b070 <_fstat_r+0x20>)
 800b054:	2300      	movs	r3, #0
 800b056:	4604      	mov	r4, r0
 800b058:	4608      	mov	r0, r1
 800b05a:	4611      	mov	r1, r2
 800b05c:	602b      	str	r3, [r5, #0]
 800b05e:	f7f7 ffc3 	bl	8002fe8 <_fstat>
 800b062:	1c43      	adds	r3, r0, #1
 800b064:	d102      	bne.n	800b06c <_fstat_r+0x1c>
 800b066:	682b      	ldr	r3, [r5, #0]
 800b068:	b103      	cbz	r3, 800b06c <_fstat_r+0x1c>
 800b06a:	6023      	str	r3, [r4, #0]
 800b06c:	bd38      	pop	{r3, r4, r5, pc}
 800b06e:	bf00      	nop
 800b070:	20000aa0 	.word	0x20000aa0

0800b074 <_isatty_r>:
 800b074:	b538      	push	{r3, r4, r5, lr}
 800b076:	4d06      	ldr	r5, [pc, #24]	@ (800b090 <_isatty_r+0x1c>)
 800b078:	2300      	movs	r3, #0
 800b07a:	4604      	mov	r4, r0
 800b07c:	4608      	mov	r0, r1
 800b07e:	602b      	str	r3, [r5, #0]
 800b080:	f7f7 ffc2 	bl	8003008 <_isatty>
 800b084:	1c43      	adds	r3, r0, #1
 800b086:	d102      	bne.n	800b08e <_isatty_r+0x1a>
 800b088:	682b      	ldr	r3, [r5, #0]
 800b08a:	b103      	cbz	r3, 800b08e <_isatty_r+0x1a>
 800b08c:	6023      	str	r3, [r4, #0]
 800b08e:	bd38      	pop	{r3, r4, r5, pc}
 800b090:	20000aa0 	.word	0x20000aa0

0800b094 <_sbrk_r>:
 800b094:	b538      	push	{r3, r4, r5, lr}
 800b096:	4d06      	ldr	r5, [pc, #24]	@ (800b0b0 <_sbrk_r+0x1c>)
 800b098:	2300      	movs	r3, #0
 800b09a:	4604      	mov	r4, r0
 800b09c:	4608      	mov	r0, r1
 800b09e:	602b      	str	r3, [r5, #0]
 800b0a0:	f7f7 ffca 	bl	8003038 <_sbrk>
 800b0a4:	1c43      	adds	r3, r0, #1
 800b0a6:	d102      	bne.n	800b0ae <_sbrk_r+0x1a>
 800b0a8:	682b      	ldr	r3, [r5, #0]
 800b0aa:	b103      	cbz	r3, 800b0ae <_sbrk_r+0x1a>
 800b0ac:	6023      	str	r3, [r4, #0]
 800b0ae:	bd38      	pop	{r3, r4, r5, pc}
 800b0b0:	20000aa0 	.word	0x20000aa0

0800b0b4 <__assert_func>:
 800b0b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0b6:	4614      	mov	r4, r2
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	4b09      	ldr	r3, [pc, #36]	@ (800b0e0 <__assert_func+0x2c>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4605      	mov	r5, r0
 800b0c0:	68d8      	ldr	r0, [r3, #12]
 800b0c2:	b14c      	cbz	r4, 800b0d8 <__assert_func+0x24>
 800b0c4:	4b07      	ldr	r3, [pc, #28]	@ (800b0e4 <__assert_func+0x30>)
 800b0c6:	9100      	str	r1, [sp, #0]
 800b0c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b0cc:	4906      	ldr	r1, [pc, #24]	@ (800b0e8 <__assert_func+0x34>)
 800b0ce:	462b      	mov	r3, r5
 800b0d0:	f000 f82a 	bl	800b128 <fiprintf>
 800b0d4:	f000 f83a 	bl	800b14c <abort>
 800b0d8:	4b04      	ldr	r3, [pc, #16]	@ (800b0ec <__assert_func+0x38>)
 800b0da:	461c      	mov	r4, r3
 800b0dc:	e7f3      	b.n	800b0c6 <__assert_func+0x12>
 800b0de:	bf00      	nop
 800b0e0:	200001a4 	.word	0x200001a4
 800b0e4:	0800b3aa 	.word	0x0800b3aa
 800b0e8:	0800b3b7 	.word	0x0800b3b7
 800b0ec:	0800b3e5 	.word	0x0800b3e5

0800b0f0 <_calloc_r>:
 800b0f0:	b570      	push	{r4, r5, r6, lr}
 800b0f2:	fba1 5402 	umull	r5, r4, r1, r2
 800b0f6:	b934      	cbnz	r4, 800b106 <_calloc_r+0x16>
 800b0f8:	4629      	mov	r1, r5
 800b0fa:	f7fe fe7b 	bl	8009df4 <_malloc_r>
 800b0fe:	4606      	mov	r6, r0
 800b100:	b928      	cbnz	r0, 800b10e <_calloc_r+0x1e>
 800b102:	4630      	mov	r0, r6
 800b104:	bd70      	pop	{r4, r5, r6, pc}
 800b106:	220c      	movs	r2, #12
 800b108:	6002      	str	r2, [r0, #0]
 800b10a:	2600      	movs	r6, #0
 800b10c:	e7f9      	b.n	800b102 <_calloc_r+0x12>
 800b10e:	462a      	mov	r2, r5
 800b110:	4621      	mov	r1, r4
 800b112:	f7fe fa25 	bl	8009560 <memset>
 800b116:	e7f4      	b.n	800b102 <_calloc_r+0x12>

0800b118 <malloc>:
 800b118:	4b02      	ldr	r3, [pc, #8]	@ (800b124 <malloc+0xc>)
 800b11a:	4601      	mov	r1, r0
 800b11c:	6818      	ldr	r0, [r3, #0]
 800b11e:	f7fe be69 	b.w	8009df4 <_malloc_r>
 800b122:	bf00      	nop
 800b124:	200001a4 	.word	0x200001a4

0800b128 <fiprintf>:
 800b128:	b40e      	push	{r1, r2, r3}
 800b12a:	b503      	push	{r0, r1, lr}
 800b12c:	4601      	mov	r1, r0
 800b12e:	ab03      	add	r3, sp, #12
 800b130:	4805      	ldr	r0, [pc, #20]	@ (800b148 <fiprintf+0x20>)
 800b132:	f853 2b04 	ldr.w	r2, [r3], #4
 800b136:	6800      	ldr	r0, [r0, #0]
 800b138:	9301      	str	r3, [sp, #4]
 800b13a:	f7ff fbd7 	bl	800a8ec <_vfiprintf_r>
 800b13e:	b002      	add	sp, #8
 800b140:	f85d eb04 	ldr.w	lr, [sp], #4
 800b144:	b003      	add	sp, #12
 800b146:	4770      	bx	lr
 800b148:	200001a4 	.word	0x200001a4

0800b14c <abort>:
 800b14c:	b508      	push	{r3, lr}
 800b14e:	2006      	movs	r0, #6
 800b150:	f000 f82c 	bl	800b1ac <raise>
 800b154:	2001      	movs	r0, #1
 800b156:	f7f7 fef7 	bl	8002f48 <_exit>

0800b15a <_raise_r>:
 800b15a:	291f      	cmp	r1, #31
 800b15c:	b538      	push	{r3, r4, r5, lr}
 800b15e:	4605      	mov	r5, r0
 800b160:	460c      	mov	r4, r1
 800b162:	d904      	bls.n	800b16e <_raise_r+0x14>
 800b164:	2316      	movs	r3, #22
 800b166:	6003      	str	r3, [r0, #0]
 800b168:	f04f 30ff 	mov.w	r0, #4294967295
 800b16c:	bd38      	pop	{r3, r4, r5, pc}
 800b16e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b170:	b112      	cbz	r2, 800b178 <_raise_r+0x1e>
 800b172:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b176:	b94b      	cbnz	r3, 800b18c <_raise_r+0x32>
 800b178:	4628      	mov	r0, r5
 800b17a:	f000 f831 	bl	800b1e0 <_getpid_r>
 800b17e:	4622      	mov	r2, r4
 800b180:	4601      	mov	r1, r0
 800b182:	4628      	mov	r0, r5
 800b184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b188:	f000 b818 	b.w	800b1bc <_kill_r>
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d00a      	beq.n	800b1a6 <_raise_r+0x4c>
 800b190:	1c59      	adds	r1, r3, #1
 800b192:	d103      	bne.n	800b19c <_raise_r+0x42>
 800b194:	2316      	movs	r3, #22
 800b196:	6003      	str	r3, [r0, #0]
 800b198:	2001      	movs	r0, #1
 800b19a:	e7e7      	b.n	800b16c <_raise_r+0x12>
 800b19c:	2100      	movs	r1, #0
 800b19e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	4798      	blx	r3
 800b1a6:	2000      	movs	r0, #0
 800b1a8:	e7e0      	b.n	800b16c <_raise_r+0x12>
	...

0800b1ac <raise>:
 800b1ac:	4b02      	ldr	r3, [pc, #8]	@ (800b1b8 <raise+0xc>)
 800b1ae:	4601      	mov	r1, r0
 800b1b0:	6818      	ldr	r0, [r3, #0]
 800b1b2:	f7ff bfd2 	b.w	800b15a <_raise_r>
 800b1b6:	bf00      	nop
 800b1b8:	200001a4 	.word	0x200001a4

0800b1bc <_kill_r>:
 800b1bc:	b538      	push	{r3, r4, r5, lr}
 800b1be:	4d07      	ldr	r5, [pc, #28]	@ (800b1dc <_kill_r+0x20>)
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	4604      	mov	r4, r0
 800b1c4:	4608      	mov	r0, r1
 800b1c6:	4611      	mov	r1, r2
 800b1c8:	602b      	str	r3, [r5, #0]
 800b1ca:	f7f7 fead 	bl	8002f28 <_kill>
 800b1ce:	1c43      	adds	r3, r0, #1
 800b1d0:	d102      	bne.n	800b1d8 <_kill_r+0x1c>
 800b1d2:	682b      	ldr	r3, [r5, #0]
 800b1d4:	b103      	cbz	r3, 800b1d8 <_kill_r+0x1c>
 800b1d6:	6023      	str	r3, [r4, #0]
 800b1d8:	bd38      	pop	{r3, r4, r5, pc}
 800b1da:	bf00      	nop
 800b1dc:	20000aa0 	.word	0x20000aa0

0800b1e0 <_getpid_r>:
 800b1e0:	f7f7 be9a 	b.w	8002f18 <_getpid>

0800b1e4 <_init>:
 800b1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e6:	bf00      	nop
 800b1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ea:	bc08      	pop	{r3}
 800b1ec:	469e      	mov	lr, r3
 800b1ee:	4770      	bx	lr

0800b1f0 <_fini>:
 800b1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1f2:	bf00      	nop
 800b1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1f6:	bc08      	pop	{r3}
 800b1f8:	469e      	mov	lr, r3
 800b1fa:	4770      	bx	lr
